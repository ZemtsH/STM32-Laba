
STM32Laba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08008c80  08008c80  00018c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090c0  080090c0  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  080090c0  080090c0  000190c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090c8  080090c8  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090c8  080090c8  000190c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090cc  080090cc  000190cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  080090d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000278  08009348  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08009348  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fcc6  00000000  00000000  000202eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002751  00000000  00000000  0002ffb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  00032708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3d  00000000  00000000  00033458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021978  00000000  00000000  00033e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012482  00000000  00000000  0005580d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4558  00000000  00000000  00067c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000482c  00000000  00000000  0012c1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00130a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000278 	.word	0x20000278
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c64 	.word	0x08008c64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	08008c64 	.word	0x08008c64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <MX_GPIO_Init+0x8c>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <MX_GPIO_Init+0x8c>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_GPIO_Init+0x8c>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MX_GPIO_Init+0x8c>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <MX_GPIO_Init+0x8c>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_GPIO_Init+0x8c>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_GPIO_Init+0x8c>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <MX_GPIO_Init+0x8c>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_GPIO_Init+0x8c>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2108      	movs	r1, #8
 8000f06:	480b      	ldr	r0, [pc, #44]	; (8000f34 <MX_GPIO_Init+0x90>)
 8000f08:	f001 fa58 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000f0c:	2308      	movs	r3, #8
 8000f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4619      	mov	r1, r3
 8000f22:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_GPIO_Init+0x90>)
 8000f24:	f001 f8e0 	bl	80020e8 <HAL_GPIO_Init>

}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48000400 	.word	0x48000400

08000f38 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f3e:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <MX_I2C1_Init+0x78>)
 8000f40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f44:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <MX_I2C1_Init+0x7c>)
 8000f46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f72:	480e      	ldr	r0, [pc, #56]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f74:	f001 fa3a 	bl	80023ec <HAL_I2C_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f7e:	f000 f91c 	bl	80011ba <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f82:	2100      	movs	r1, #0
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f86:	f002 fd39 	bl	80039fc <HAL_I2CEx_ConfigAnalogFilter>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f90:	f000 f913 	bl	80011ba <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f94:	2100      	movs	r1, #0
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f98:	f002 fd7b 	bl	8003a92 <HAL_I2CEx_ConfigDigitalFilter>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fa2:	f000 f90a 	bl	80011ba <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000294 	.word	0x20000294
 8000fb0:	40005400 	.word	0x40005400
 8000fb4:	00702991 	.word	0x00702991

08000fb8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b09e      	sub	sp, #120	; 0x78
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	2254      	movs	r2, #84	; 0x54
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f005 f9d0 	bl	800637e <memset>
  if(i2cHandle->Instance==I2C1)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a27      	ldr	r2, [pc, #156]	; (8001080 <HAL_I2C_MspInit+0xc8>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d147      	bne.n	8001078 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fe8:	2340      	movs	r3, #64	; 0x40
 8000fea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 fc35 	bl	8004864 <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001000:	f000 f8db 	bl	80011ba <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <HAL_I2C_MspInit+0xcc>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001008:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <HAL_I2C_MspInit+0xcc>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <HAL_I2C_MspInit+0xcc>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800101c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001020:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001022:	2312      	movs	r3, #18
 8001024:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001026:	2301      	movs	r3, #1
 8001028:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800102e:	2304      	movs	r3, #4
 8001030:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f001 f854 	bl	80020e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <HAL_I2C_MspInit+0xcc>)
 8001042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001044:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <HAL_I2C_MspInit+0xcc>)
 8001046:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800104a:	6593      	str	r3, [r2, #88]	; 0x58
 800104c:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <HAL_I2C_MspInit+0xcc>)
 800104e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	201f      	movs	r0, #31
 800105e:	f000 ffbe 	bl	8001fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001062:	201f      	movs	r0, #31
 8001064:	f000 ffd7 	bl	8002016 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	2020      	movs	r0, #32
 800106e:	f000 ffb6 	bl	8001fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001072:	2020      	movs	r0, #32
 8001074:	f000 ffcf 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001078:	bf00      	nop
 800107a:	3778      	adds	r7, #120	; 0x78
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40005400 	.word	0x40005400
 8001084:	40021000 	.word	0x40021000

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108e:	f000 fe32 	bl	8001cf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001092:	f000 f841 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001096:	f7ff ff05 	bl	8000ea4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800109a:	f7ff ff4d 	bl	8000f38 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800109e:	f000 fd67 	bl	8001b70 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 80010a2:	bf00      	nop
 80010a4:	4816      	ldr	r0, [pc, #88]	; (8001100 <main+0x78>)
 80010a6:	f000 f88d 	bl	80011c4 <MPU6050_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d0f9      	beq.n	80010a4 <main+0x1c>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 80010b0:	4914      	ldr	r1, [pc, #80]	; (8001104 <main+0x7c>)
 80010b2:	4813      	ldr	r0, [pc, #76]	; (8001100 <main+0x78>)
 80010b4:	f000 f8e0 	bl	8001278 <MPU6050_Read_All>
	  HAL_Delay(1);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f000 fe91 	bl	8001de0 <HAL_Delay>
	  sprintf(str, "%9.6f", MPU6050.KalmanAngleX);
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <main+0x7c>)
 80010c0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80010c4:	1d38      	adds	r0, r7, #4
 80010c6:	4910      	ldr	r1, [pc, #64]	; (8001108 <main+0x80>)
 80010c8:	f005 f8f6 	bl	80062b8 <siprintf>
	  str[9]=",";
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <main+0x84>)
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	737b      	strb	r3, [r7, #13]
	  HAL_UART_Transmit(&huart2, str, 10 , 1);
 80010d2:	1d39      	adds	r1, r7, #4
 80010d4:	2301      	movs	r3, #1
 80010d6:	220a      	movs	r2, #10
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <main+0x88>)
 80010da:	f003 fef9 	bl	8004ed0 <HAL_UART_Transmit>
	  sprintf(str, "%9.6f", MPU6050.KalmanAngleY);
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <main+0x7c>)
 80010e0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80010e4:	1d38      	adds	r0, r7, #4
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <main+0x80>)
 80010e8:	f005 f8e6 	bl	80062b8 <siprintf>
	  str[9]=";\n";
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <main+0x8c>)
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	737b      	strb	r3, [r7, #13]
	  HAL_UART_Transmit(&huart2, str, 11 , 1);
 80010f2:	1d39      	adds	r1, r7, #4
 80010f4:	2301      	movs	r3, #1
 80010f6:	220b      	movs	r2, #11
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <main+0x88>)
 80010fa:	f003 fee9 	bl	8004ed0 <HAL_UART_Transmit>
  {
 80010fe:	e7d7      	b.n	80010b0 <main+0x28>
 8001100:	20000294 	.word	0x20000294
 8001104:	200002e8 	.word	0x200002e8
 8001108:	08008c80 	.word	0x08008c80
 800110c:	08008c88 	.word	0x08008c88
 8001110:	20000348 	.word	0x20000348
 8001114:	08008c8c 	.word	0x08008c8c

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b096      	sub	sp, #88	; 0x58
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	2244      	movs	r2, #68	; 0x44
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f005 f929 	bl	800637e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800113a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800113e:	f002 fd03 	bl	8003b48 <HAL_PWREx_ControlVoltageScaling>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001148:	f000 f837 	bl	80011ba <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114c:	2302      	movs	r3, #2
 800114e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001154:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001156:	2310      	movs	r3, #16
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800115e:	2302      	movs	r3, #2
 8001160:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001166:	230a      	movs	r3, #10
 8001168:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800116a:	2307      	movs	r3, #7
 800116c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800116e:	2302      	movs	r3, #2
 8001170:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001172:	2302      	movs	r3, #2
 8001174:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4618      	mov	r0, r3
 800117c:	f002 fd3a 	bl	8003bf4 <HAL_RCC_OscConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001186:	f000 f818 	bl	80011ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118a:	230f      	movs	r3, #15
 800118c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118e:	2303      	movs	r3, #3
 8001190:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800119e:	463b      	mov	r3, r7
 80011a0:	2104      	movs	r1, #4
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 f93a 	bl	800441c <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ae:	f000 f804 	bl	80011ba <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3758      	adds	r7, #88	; 0x58
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011be:	b672      	cpsid	i
}
 80011c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <Error_Handler+0x8>

080011c4 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80011cc:	2364      	movs	r3, #100	; 0x64
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	2301      	movs	r3, #1
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	f107 030f 	add.w	r3, r7, #15
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	2275      	movs	r2, #117	; 0x75
 80011de:	21d0      	movs	r1, #208	; 0xd0
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f001 fab3 	bl	800274c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2b68      	cmp	r3, #104	; 0x68
 80011ea:	d13d      	bne.n	8001268 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80011f0:	2364      	movs	r3, #100	; 0x64
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2301      	movs	r3, #1
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	f107 030e 	add.w	r3, r7, #14
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	226b      	movs	r2, #107	; 0x6b
 8001202:	21d0      	movs	r1, #208	; 0xd0
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f001 f98d 	bl	8002524 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800120a:	2307      	movs	r3, #7
 800120c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800120e:	2364      	movs	r3, #100	; 0x64
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2301      	movs	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	f107 030e 	add.w	r3, r7, #14
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2301      	movs	r3, #1
 800121e:	2219      	movs	r2, #25
 8001220:	21d0      	movs	r1, #208	; 0xd0
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f001 f97e 	bl	8002524 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001228:	2300      	movs	r3, #0
 800122a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800122c:	2364      	movs	r3, #100	; 0x64
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	2301      	movs	r3, #1
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	f107 030e 	add.w	r3, r7, #14
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	221c      	movs	r2, #28
 800123e:	21d0      	movs	r1, #208	; 0xd0
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f001 f96f 	bl	8002524 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001246:	2300      	movs	r3, #0
 8001248:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800124a:	2364      	movs	r3, #100	; 0x64
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	2301      	movs	r3, #1
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	f107 030e 	add.w	r3, r7, #14
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	221b      	movs	r2, #27
 800125c:	21d0      	movs	r1, #208	; 0xd0
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f001 f960 	bl	8002524 <HAL_I2C_Mem_Write>
        return 0;
 8001264:	2300      	movs	r3, #0
 8001266:	e000      	b.n	800126a <MPU6050_Init+0xa6>
    }
    return 1;
 8001268:	2301      	movs	r3, #1
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	0000      	movs	r0, r0
 8001274:	0000      	movs	r0, r0
	...

08001278 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800127c:	b094      	sub	sp, #80	; 0x50
 800127e:	af04      	add	r7, sp, #16
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001284:	2364      	movs	r3, #100	; 0x64
 8001286:	9302      	str	r3, [sp, #8]
 8001288:	230e      	movs	r3, #14
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	223b      	movs	r2, #59	; 0x3b
 8001296:	21d0      	movs	r1, #208	; 0xd0
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f001 fa57 	bl	800274c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800129e:	7a3b      	ldrb	r3, [r7, #8]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	7a7b      	ldrb	r3, [r7, #9]
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80012b0:	7abb      	ldrb	r3, [r7, #10]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	7afb      	ldrb	r3, [r7, #11]
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b21a      	sxth	r2, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80012c2:	7b3b      	ldrb	r3, [r7, #12]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	7b7b      	ldrb	r3, [r7, #13]
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80012d4:	7bbb      	ldrb	r3, [r7, #14]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	b21a      	sxth	r2, r3
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	b21b      	sxth	r3, r3
 80012de:	4313      	orrs	r3, r2
 80012e0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80012e2:	7c3b      	ldrb	r3, [r7, #16]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	7c7b      	ldrb	r3, [r7, #17]
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80012f4:	7cbb      	ldrb	r3, [r7, #18]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	7cfb      	ldrb	r3, [r7, #19]
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21a      	sxth	r2, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001306:	7d3b      	ldrb	r3, [r7, #20]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b21a      	sxth	r2, r3
 800130c:	7d7b      	ldrb	r3, [r7, #21]
 800130e:	b21b      	sxth	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	b21a      	sxth	r2, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f900 	bl	8000524 <__aeabi_i2d>
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4bbd      	ldr	r3, [pc, #756]	; (8001620 <MPU6050_Read_All+0x3a8>)
 800132a:	f7ff fa8f 	bl	800084c <__aeabi_ddiv>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	6839      	ldr	r1, [r7, #0]
 8001334:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f8f0 	bl	8000524 <__aeabi_i2d>
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4bb5      	ldr	r3, [pc, #724]	; (8001620 <MPU6050_Read_All+0x3a8>)
 800134a:	f7ff fa7f 	bl	800084c <__aeabi_ddiv>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	6839      	ldr	r1, [r7, #0]
 8001354:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f8e0 	bl	8000524 <__aeabi_i2d>
 8001364:	a3a8      	add	r3, pc, #672	; (adr r3, 8001608 <MPU6050_Read_All+0x390>)
 8001366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136a:	f7ff fa6f 	bl	800084c <__aeabi_ddiv>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	6839      	ldr	r1, [r7, #0]
 8001374:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001378:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001384:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001624 <MPU6050_Read_All+0x3ac>
 8001388:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800138c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001628 <MPU6050_Read_All+0x3b0>
 8001390:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f8bf 	bl	8000524 <__aeabi_i2d>
 80013a6:	a39a      	add	r3, pc, #616	; (adr r3, 8001610 <MPU6050_Read_All+0x398>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7ff fa4e 	bl	800084c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	6839      	ldr	r1, [r7, #0]
 80013b6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8af 	bl	8000524 <__aeabi_i2d>
 80013c6:	a392      	add	r3, pc, #584	; (adr r3, 8001610 <MPU6050_Read_All+0x398>)
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	f7ff fa3e 	bl	800084c <__aeabi_ddiv>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	6839      	ldr	r1, [r7, #0]
 80013d6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f89f 	bl	8000524 <__aeabi_i2d>
 80013e6:	a38a      	add	r3, pc, #552	; (adr r3, 8001610 <MPU6050_Read_All+0x398>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7ff fa2e 	bl	800084c <__aeabi_ddiv>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	6839      	ldr	r1, [r7, #0]
 80013f6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80013fa:	f000 fce5 	bl	8001dc8 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b8a      	ldr	r3, [pc, #552]	; (800162c <MPU6050_Read_All+0x3b4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f87c 	bl	8000504 <__aeabi_ui2d>
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b87      	ldr	r3, [pc, #540]	; (8001630 <MPU6050_Read_All+0x3b8>)
 8001412:	f7ff fa1b 	bl	800084c <__aeabi_ddiv>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800141e:	f000 fcd3 	bl	8001dc8 <HAL_GetTick>
 8001422:	4603      	mov	r3, r0
 8001424:	4a81      	ldr	r2, [pc, #516]	; (800162c <MPU6050_Read_All+0x3b4>)
 8001426:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142e:	461a      	mov	r2, r3
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001436:	fb03 f202 	mul.w	r2, r3, r2
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001440:	4619      	mov	r1, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001448:	fb01 f303 	mul.w	r3, r1, r3
 800144c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f868 	bl	8000524 <__aeabi_i2d>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	ec43 2b10 	vmov	d0, r2, r3
 800145c:	f007 f88a 	bl	8008574 <sqrt>
 8001460:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001470:	f7ff fb2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d11f      	bne.n	80014ba <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f84f 	bl	8000524 <__aeabi_i2d>
 8001486:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800148a:	f7ff f9df 	bl	800084c <__aeabi_ddiv>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	ec43 2b17 	vmov	d7, r2, r3
 8001496:	eeb0 0a47 	vmov.f32	s0, s14
 800149a:	eef0 0a67 	vmov.f32	s1, s15
 800149e:	f007 f897 	bl	80085d0 <atan>
 80014a2:	ec51 0b10 	vmov	r0, r1, d0
 80014a6:	a35c      	add	r3, pc, #368	; (adr r3, 8001618 <MPU6050_Read_All+0x3a0>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f7ff f8a4 	bl	80005f8 <__aeabi_dmul>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80014b8:	e005      	b.n	80014c6 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014cc:	425b      	negs	r3, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f828 	bl	8000524 <__aeabi_i2d>
 80014d4:	4682      	mov	sl, r0
 80014d6:	468b      	mov	fp, r1
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f820 	bl	8000524 <__aeabi_i2d>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	ec43 2b11 	vmov	d1, r2, r3
 80014ec:	ec4b ab10 	vmov	d0, sl, fp
 80014f0:	f007 f83e 	bl	8008570 <atan2>
 80014f4:	ec51 0b10 	vmov	r0, r1, d0
 80014f8:	a347      	add	r3, pc, #284	; (adr r3, 8001618 <MPU6050_Read_All+0x3a0>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7ff f87b 	bl	80005f8 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b49      	ldr	r3, [pc, #292]	; (8001634 <MPU6050_Read_All+0x3bc>)
 8001510:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001514:	f7ff fae2 	bl	8000adc <__aeabi_dcmplt>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00a      	beq.n	8001534 <MPU6050_Read_All+0x2bc>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b43      	ldr	r3, [pc, #268]	; (8001638 <MPU6050_Read_All+0x3c0>)
 800152a:	f7ff faf5 	bl	8000b18 <__aeabi_dcmpgt>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d114      	bne.n	800155e <MPU6050_Read_All+0x2e6>
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <MPU6050_Read_All+0x3c0>)
 800153a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800153e:	f7ff faeb 	bl	8000b18 <__aeabi_dcmpgt>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d015      	beq.n	8001574 <MPU6050_Read_All+0x2fc>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	4b38      	ldr	r3, [pc, #224]	; (8001634 <MPU6050_Read_All+0x3bc>)
 8001554:	f7ff fac2 	bl	8000adc <__aeabi_dcmplt>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00a      	beq.n	8001574 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 800155e:	4937      	ldr	r1, [pc, #220]	; (800163c <MPU6050_Read_All+0x3c4>)
 8001560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001564:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001568:	6839      	ldr	r1, [r7, #0]
 800156a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800156e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001572:	e014      	b.n	800159e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800157a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800157e:	eeb0 1a47 	vmov.f32	s2, s14
 8001582:	eef0 1a67 	vmov.f32	s3, s15
 8001586:	ed97 0b06 	vldr	d0, [r7, #24]
 800158a:	482c      	ldr	r0, [pc, #176]	; (800163c <MPU6050_Read_All+0x3c4>)
 800158c:	f000 f85a 	bl	8001644 <Kalman_getAngle>
 8001590:	eeb0 7a40 	vmov.f32	s14, s0
 8001594:	eef0 7a60 	vmov.f32	s15, s1
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80015a4:	4690      	mov	r8, r2
 80015a6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <MPU6050_Read_All+0x3c0>)
 80015b0:	4640      	mov	r0, r8
 80015b2:	4649      	mov	r1, r9
 80015b4:	f7ff fab0 	bl	8000b18 <__aeabi_dcmpgt>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d008      	beq.n	80015d0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80015c4:	4614      	mov	r4, r2
 80015c6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80015d6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80015da:	eeb0 1a47 	vmov.f32	s2, s14
 80015de:	eef0 1a67 	vmov.f32	s3, s15
 80015e2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80015e6:	4816      	ldr	r0, [pc, #88]	; (8001640 <MPU6050_Read_All+0x3c8>)
 80015e8:	f000 f82c 	bl	8001644 <Kalman_getAngle>
 80015ec:	eeb0 7a40 	vmov.f32	s14, s0
 80015f0:	eef0 7a60 	vmov.f32	s15, s1
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 80015fa:	bf00      	nop
 80015fc:	3740      	adds	r7, #64	; 0x40
 80015fe:	46bd      	mov	sp, r7
 8001600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001604:	f3af 8000 	nop.w
 8001608:	00000000 	.word	0x00000000
 800160c:	40cc2900 	.word	0x40cc2900
 8001610:	00000000 	.word	0x00000000
 8001614:	40606000 	.word	0x40606000
 8001618:	1a63c1f8 	.word	0x1a63c1f8
 800161c:	404ca5dc 	.word	0x404ca5dc
 8001620:	40d00000 	.word	0x40d00000
 8001624:	43aa0000 	.word	0x43aa0000
 8001628:	42121eb8 	.word	0x42121eb8
 800162c:	20000340 	.word	0x20000340
 8001630:	408f4000 	.word	0x408f4000
 8001634:	c0568000 	.word	0xc0568000
 8001638:	40568000 	.word	0x40568000
 800163c:	20000048 	.word	0x20000048
 8001640:	20000000 	.word	0x20000000

08001644 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001644:	b5b0      	push	{r4, r5, r7, lr}
 8001646:	b096      	sub	sp, #88	; 0x58
 8001648:	af00      	add	r7, sp, #0
 800164a:	61f8      	str	r0, [r7, #28]
 800164c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001650:	ed87 1b02 	vstr	d1, [r7, #8]
 8001654:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800165e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001662:	f7fe fe11 	bl	8000288 <__aeabi_dsub>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001674:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001678:	e9d7 0100 	ldrd	r0, r1, [r7]
 800167c:	f7fe ffbc 	bl	80005f8 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f7fe fe00 	bl	800028c <__adddf3>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	69f9      	ldr	r1, [r7, #28]
 8001692:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80016a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016a6:	f7fe ffa7 	bl	80005f8 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80016b8:	f7fe fde6 	bl	8000288 <__aeabi_dsub>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80016ca:	f7fe fddd 	bl	8000288 <__aeabi_dsub>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	f7fe fdd6 	bl	800028c <__adddf3>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016ec:	f7fe ff84 	bl	80005f8 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4620      	mov	r0, r4
 80016f6:	4629      	mov	r1, r5
 80016f8:	f7fe fdc8 	bl	800028c <__adddf3>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	69f9      	ldr	r1, [r7, #28]
 8001702:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001716:	f7fe ff6f 	bl	80005f8 <__aeabi_dmul>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4620      	mov	r0, r4
 8001720:	4629      	mov	r1, r5
 8001722:	f7fe fdb1 	bl	8000288 <__aeabi_dsub>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	69f9      	ldr	r1, [r7, #28]
 800172c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800173c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001740:	f7fe ff5a 	bl	80005f8 <__aeabi_dmul>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4620      	mov	r0, r4
 800174a:	4629      	mov	r1, r5
 800174c:	f7fe fd9c 	bl	8000288 <__aeabi_dsub>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	69f9      	ldr	r1, [r7, #28]
 8001756:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800176a:	f7fe ff45 	bl	80005f8 <__aeabi_dmul>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4620      	mov	r0, r4
 8001774:	4629      	mov	r1, r5
 8001776:	f7fe fd89 	bl	800028c <__adddf3>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	69f9      	ldr	r1, [r7, #28]
 8001780:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001790:	f7fe fd7c 	bl	800028c <__adddf3>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80017a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017a6:	f7ff f851 	bl	800084c <__aeabi_ddiv>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80017b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017bc:	f7ff f846 	bl	800084c <__aeabi_ddiv>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80017ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017d2:	f7fe fd59 	bl	8000288 <__aeabi_dsub>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80017e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80017ec:	f7fe ff04 	bl	80005f8 <__aeabi_dmul>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4620      	mov	r0, r4
 80017f6:	4629      	mov	r1, r5
 80017f8:	f7fe fd48 	bl	800028c <__adddf3>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	69f9      	ldr	r1, [r7, #28]
 8001802:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800180c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001810:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001814:	f7fe fef0 	bl	80005f8 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7fe fd34 	bl	800028c <__adddf3>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	69f9      	ldr	r1, [r7, #28]
 800182a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001834:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800183e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001848:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800184c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001850:	f7fe fed2 	bl	80005f8 <__aeabi_dmul>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4620      	mov	r0, r4
 800185a:	4629      	mov	r1, r5
 800185c:	f7fe fd14 	bl	8000288 <__aeabi_dsub>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	69f9      	ldr	r1, [r7, #28]
 8001866:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001870:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001874:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001878:	f7fe febe 	bl	80005f8 <__aeabi_dmul>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4620      	mov	r0, r4
 8001882:	4629      	mov	r1, r5
 8001884:	f7fe fd00 	bl	8000288 <__aeabi_dsub>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	69f9      	ldr	r1, [r7, #28]
 800188e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001898:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800189c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80018a0:	f7fe feaa 	bl	80005f8 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4620      	mov	r0, r4
 80018aa:	4629      	mov	r1, r5
 80018ac:	f7fe fcec 	bl	8000288 <__aeabi_dsub>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	69f9      	ldr	r1, [r7, #28]
 80018b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80018c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80018c8:	f7fe fe96 	bl	80005f8 <__aeabi_dmul>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4620      	mov	r0, r4
 80018d2:	4629      	mov	r1, r5
 80018d4:	f7fe fcd8 	bl	8000288 <__aeabi_dsub>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	69f9      	ldr	r1, [r7, #28]
 80018de:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018e8:	ec43 2b17 	vmov	d7, r2, r3
};
 80018ec:	eeb0 0a47 	vmov.f32	s0, s14
 80018f0:	eef0 0a67 	vmov.f32	s1, s15
 80018f4:	3758      	adds	r7, #88	; 0x58
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080018fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_MspInit+0x44>)
 8001904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001906:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <HAL_MspInit+0x44>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6613      	str	r3, [r2, #96]	; 0x60
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <HAL_MspInit+0x44>)
 8001910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_MspInit+0x44>)
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	4a08      	ldr	r2, [pc, #32]	; (8001940 <HAL_MspInit+0x44>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	6593      	str	r3, [r2, #88]	; 0x58
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_MspInit+0x44>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <NMI_Handler+0x4>

0800194a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler+0x4>

08001956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler+0x4>

08001962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001990:	f000 fa06 	bl	8001da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}

08001998 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <I2C1_EV_IRQHandler+0x10>)
 800199e:	f000 ffef 	bl	8002980 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000294 	.word	0x20000294

080019ac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <I2C1_ER_IRQHandler+0x10>)
 80019b2:	f000 ffff 	bl	80029b4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000294 	.word	0x20000294

080019c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return 1;
 80019c4:	2301      	movs	r3, #1
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_kill>:

int _kill(int pid, int sig)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019da:	f004 fd23 	bl	8006424 <__errno>
 80019de:	4603      	mov	r3, r0
 80019e0:	2216      	movs	r2, #22
 80019e2:	601a      	str	r2, [r3, #0]
  return -1;
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_exit>:

void _exit (int status)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ffe7 	bl	80019d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a02:	e7fe      	b.n	8001a02 <_exit+0x12>

08001a04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e00a      	b.n	8001a2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a16:	f3af 8000 	nop.w
 8001a1a:	4601      	mov	r1, r0
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	60ba      	str	r2, [r7, #8]
 8001a22:	b2ca      	uxtb	r2, r1
 8001a24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	dbf0      	blt.n	8001a16 <_read+0x12>
  }

  return len;
 8001a34:	687b      	ldr	r3, [r7, #4]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	e009      	b.n	8001a64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	60ba      	str	r2, [r7, #8]
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3301      	adds	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dbf1      	blt.n	8001a50 <_write+0x12>
  }
  return len;
 8001a6c:	687b      	ldr	r3, [r7, #4]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <_close>:

int _close(int file)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a9e:	605a      	str	r2, [r3, #4]
  return 0;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <_isatty>:

int _isatty(int file)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae8:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <_sbrk+0x5c>)
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <_sbrk+0x60>)
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <_sbrk+0x64>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <_sbrk+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d207      	bcs.n	8001b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b10:	f004 fc88 	bl	8006424 <__errno>
 8001b14:	4603      	mov	r3, r0
 8001b16:	220c      	movs	r2, #12
 8001b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	e009      	b.n	8001b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <_sbrk+0x64>)
 8001b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20010000 	.word	0x20010000
 8001b40:	00000400 	.word	0x00000400
 8001b44:	20000344 	.word	0x20000344
 8001b48:	20000520 	.word	0x20000520

08001b4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <SystemInit+0x20>)
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <SystemInit+0x20>)
 8001b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b76:	4a15      	ldr	r2, [pc, #84]	; (8001bcc <MX_USART2_UART_Init+0x5c>)
 8001b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b7c:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8001b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001bb4:	f003 f93e 	bl	8004e34 <HAL_UART_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bbe:	f7ff fafc 	bl	80011ba <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000348 	.word	0x20000348
 8001bcc:	40004400 	.word	0x40004400

08001bd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b09e      	sub	sp, #120	; 0x78
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	2254      	movs	r2, #84	; 0x54
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f004 fbc4 	bl	800637e <memset>
  if(uartHandle->Instance==USART2)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a28      	ldr	r2, [pc, #160]	; (8001c9c <HAL_UART_MspInit+0xcc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d148      	bne.n	8001c92 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c00:	2302      	movs	r3, #2
 8001c02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 fe29 	bl	8004864 <HAL_RCCEx_PeriphCLKConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c18:	f7ff facf 	bl	80011ba <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c1c:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_UART_MspInit+0xd0>)
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <HAL_UART_MspInit+0xd0>)
 8001c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c26:	6593      	str	r3, [r2, #88]	; 0x58
 8001c28:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <HAL_UART_MspInit+0xd0>)
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_UART_MspInit+0xd0>)
 8001c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c38:	4a19      	ldr	r2, [pc, #100]	; (8001ca0 <HAL_UART_MspInit+0xd0>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c40:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <HAL_UART_MspInit+0xd0>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001c60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c64:	4619      	mov	r1, r3
 8001c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6a:	f000 fa3d 	bl	80020e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c72:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001c80:	2303      	movs	r3, #3
 8001c82:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001c84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8e:	f000 fa2b 	bl	80020e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c92:	bf00      	nop
 8001c94:	3778      	adds	r7, #120	; 0x78
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca8:	f7ff ff50 	bl	8001b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cac:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cae:	490d      	ldr	r1, [pc, #52]	; (8001ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ce8 <LoopForever+0xe>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb4:	e002      	b.n	8001cbc <LoopCopyDataInit>

08001cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cba:	3304      	adds	r3, #4

08001cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc0:	d3f9      	bcc.n	8001cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cc4:	4c0a      	ldr	r4, [pc, #40]	; (8001cf0 <LoopForever+0x16>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc8:	e001      	b.n	8001cce <LoopFillZerobss>

08001cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ccc:	3204      	adds	r2, #4

08001cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd0:	d3fb      	bcc.n	8001cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f004 fbad 	bl	8006430 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cd6:	f7ff f9d7 	bl	8001088 <main>

08001cda <LoopForever>:

LoopForever:
    b LoopForever
 8001cda:	e7fe      	b.n	8001cda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cdc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce4:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8001ce8:	080090d0 	.word	0x080090d0
  ldr r2, =_sbss
 8001cec:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8001cf0:	20000520 	.word	0x20000520

08001cf4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cf4:	e7fe      	b.n	8001cf4 <ADC1_IRQHandler>

08001cf6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d00:	2003      	movs	r0, #3
 8001d02:	f000 f961 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d06:	2000      	movs	r0, #0
 8001d08:	f000 f80e 	bl	8001d28 <HAL_InitTick>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	71fb      	strb	r3, [r7, #7]
 8001d16:	e001      	b.n	8001d1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d18:	f7ff fdf0 	bl	80018fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d34:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <HAL_InitTick+0x6c>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d023      	beq.n	8001d84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <HAL_InitTick+0x70>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <HAL_InitTick+0x6c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f96d 	bl	8002032 <HAL_SYSTICK_Config>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10f      	bne.n	8001d7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b0f      	cmp	r3, #15
 8001d62:	d809      	bhi.n	8001d78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d64:	2200      	movs	r2, #0
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f000 f937 	bl	8001fde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d70:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <HAL_InitTick+0x74>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e007      	b.n	8001d88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	e004      	b.n	8001d88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
 8001d82:	e001      	b.n	8001d88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000098 	.word	0x20000098
 8001d98:	20000090 	.word	0x20000090
 8001d9c:	20000094 	.word	0x20000094

08001da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_IncTick+0x20>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_IncTick+0x24>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <HAL_IncTick+0x24>)
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000098 	.word	0x20000098
 8001dc4:	200003d0 	.word	0x200003d0

08001dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_GetTick+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	200003d0 	.word	0x200003d0

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff ffee 	bl	8001dc8 <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d005      	beq.n	8001e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_Delay+0x44>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e06:	bf00      	nop
 8001e08:	f7ff ffde 	bl	8001dc8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <HAL_Delay+0x28>
  {
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000098 	.word	0x20000098

08001e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	db0b      	blt.n	8001eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	4907      	ldr	r1, [pc, #28]	; (8001ec4 <__NVIC_EnableIRQ+0x38>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2001      	movs	r0, #1
 8001eae:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db0a      	blt.n	8001ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	490c      	ldr	r1, [pc, #48]	; (8001f14 <__NVIC_SetPriority+0x4c>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	0112      	lsls	r2, r2, #4
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	440b      	add	r3, r1
 8001eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef0:	e00a      	b.n	8001f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4908      	ldr	r1, [pc, #32]	; (8001f18 <__NVIC_SetPriority+0x50>)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3b04      	subs	r3, #4
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	440b      	add	r3, r1
 8001f06:	761a      	strb	r2, [r3, #24]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	; 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f1c3 0307 	rsb	r3, r3, #7
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	bf28      	it	cs
 8001f3a:	2304      	movcs	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3304      	adds	r3, #4
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d902      	bls.n	8001f4c <NVIC_EncodePriority+0x30>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3b03      	subs	r3, #3
 8001f4a:	e000      	b.n	8001f4e <NVIC_EncodePriority+0x32>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	401a      	ands	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	4313      	orrs	r3, r2
         );
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	; 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f94:	d301      	bcc.n	8001f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00f      	b.n	8001fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <SysTick_Config+0x40>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f7ff ff8e 	bl	8001ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <SysTick_Config+0x40>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <SysTick_Config+0x40>)
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	e000e010 	.word	0xe000e010

08001fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff29 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff0:	f7ff ff3e 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001ff4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ff8e 	bl	8001f1c <NVIC_EncodePriority>
 8002000:	4602      	mov	r2, r0
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff5d 	bl	8001ec8 <__NVIC_SetPriority>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff31 	bl	8001e8c <__NVIC_EnableIRQ>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffa2 	bl	8001f84 <SysTick_Config>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d005      	beq.n	800206e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2204      	movs	r2, #4
 8002066:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e029      	b.n	80020c2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 020e 	bic.w	r2, r2, #14
 800207c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0201 	bic.w	r2, r2, #1
 800208c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f003 021c 	and.w	r2, r3, #28
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	2101      	movs	r1, #1
 800209c:	fa01 f202 	lsl.w	r2, r1, r2
 80020a0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	4798      	blx	r3
    }
  }
  return status;
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020da:	b2db      	uxtb	r3, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f6:	e148      	b.n	800238a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	2101      	movs	r1, #1
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	4013      	ands	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 813a 	beq.w	8002384 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d005      	beq.n	8002128 <HAL_GPIO_Init+0x40>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d130      	bne.n	800218a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800215e:	2201      	movs	r2, #1
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4013      	ands	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	f003 0201 	and.w	r2, r3, #1
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b03      	cmp	r3, #3
 8002194:	d017      	beq.n	80021c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	2203      	movs	r2, #3
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d123      	bne.n	800221a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	08da      	lsrs	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3208      	adds	r2, #8
 80021da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	08da      	lsrs	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3208      	adds	r2, #8
 8002214:	6939      	ldr	r1, [r7, #16]
 8002216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	2203      	movs	r2, #3
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0203 	and.w	r2, r3, #3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 8094 	beq.w	8002384 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225c:	4b52      	ldr	r3, [pc, #328]	; (80023a8 <HAL_GPIO_Init+0x2c0>)
 800225e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002260:	4a51      	ldr	r2, [pc, #324]	; (80023a8 <HAL_GPIO_Init+0x2c0>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6613      	str	r3, [r2, #96]	; 0x60
 8002268:	4b4f      	ldr	r3, [pc, #316]	; (80023a8 <HAL_GPIO_Init+0x2c0>)
 800226a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002274:	4a4d      	ldr	r2, [pc, #308]	; (80023ac <HAL_GPIO_Init+0x2c4>)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	3302      	adds	r3, #2
 800227c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002280:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	220f      	movs	r2, #15
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800229e:	d00d      	beq.n	80022bc <HAL_GPIO_Init+0x1d4>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a43      	ldr	r2, [pc, #268]	; (80023b0 <HAL_GPIO_Init+0x2c8>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d007      	beq.n	80022b8 <HAL_GPIO_Init+0x1d0>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a42      	ldr	r2, [pc, #264]	; (80023b4 <HAL_GPIO_Init+0x2cc>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d101      	bne.n	80022b4 <HAL_GPIO_Init+0x1cc>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e004      	b.n	80022be <HAL_GPIO_Init+0x1d6>
 80022b4:	2307      	movs	r3, #7
 80022b6:	e002      	b.n	80022be <HAL_GPIO_Init+0x1d6>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <HAL_GPIO_Init+0x1d6>
 80022bc:	2300      	movs	r3, #0
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	f002 0203 	and.w	r2, r2, #3
 80022c4:	0092      	lsls	r2, r2, #2
 80022c6:	4093      	lsls	r3, r2
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022ce:	4937      	ldr	r1, [pc, #220]	; (80023ac <HAL_GPIO_Init+0x2c4>)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	3302      	adds	r3, #2
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002300:	4a2d      	ldr	r2, [pc, #180]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002306:	4b2c      	ldr	r3, [pc, #176]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800232a:	4a23      	ldr	r2, [pc, #140]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002330:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002354:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800235a:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800237e:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	3301      	adds	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	f47f aeaf 	bne.w	80020f8 <HAL_GPIO_Init+0x10>
  }
}
 800239a:	bf00      	nop
 800239c:	bf00      	nop
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40010000 	.word	0x40010000
 80023b0:	48000400 	.word	0x48000400
 80023b4:	48000800 	.word	0x48000800
 80023b8:	40010400 	.word	0x40010400

080023bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
 80023c8:	4613      	mov	r3, r2
 80023ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023cc:	787b      	ldrb	r3, [r7, #1]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023d8:	e002      	b.n	80023e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e08d      	b.n	800251a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe fdd0 	bl	8000fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2224      	movs	r2, #36	; 0x24
 800241c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0201 	bic.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800243c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800244c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d107      	bne.n	8002466 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	e006      	b.n	8002474 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002472:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d108      	bne.n	800248e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	e007      	b.n	800249e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800249c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69d9      	ldr	r1, [r3, #28]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1a      	ldr	r2, [r3, #32]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af02      	add	r7, sp, #8
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	4608      	mov	r0, r1
 800252e:	4611      	mov	r1, r2
 8002530:	461a      	mov	r2, r3
 8002532:	4603      	mov	r3, r0
 8002534:	817b      	strh	r3, [r7, #10]
 8002536:	460b      	mov	r3, r1
 8002538:	813b      	strh	r3, [r7, #8]
 800253a:	4613      	mov	r3, r2
 800253c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b20      	cmp	r3, #32
 8002548:	f040 80f9 	bne.w	800273e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_I2C_Mem_Write+0x34>
 8002552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800255e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0ed      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_I2C_Mem_Write+0x4e>
 800256e:	2302      	movs	r3, #2
 8002570:	e0e6      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800257a:	f7ff fc25 	bl	8001dc8 <HAL_GetTick>
 800257e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2319      	movs	r3, #25
 8002586:	2201      	movs	r2, #1
 8002588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 ffec 	bl	800356a <I2C_WaitOnFlagUntilTimeout>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0d1      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2221      	movs	r2, #33	; 0x21
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2240      	movs	r2, #64	; 0x40
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a3a      	ldr	r2, [r7, #32]
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025c4:	88f8      	ldrh	r0, [r7, #6]
 80025c6:	893a      	ldrh	r2, [r7, #8]
 80025c8:	8979      	ldrh	r1, [r7, #10]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	4603      	mov	r3, r0
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 fb81 	bl	8002cdc <I2C_RequestMemoryWrite>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0a9      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2bff      	cmp	r3, #255	; 0xff
 80025f4:	d90e      	bls.n	8002614 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	22ff      	movs	r2, #255	; 0xff
 80025fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	b2da      	uxtb	r2, r3
 8002602:	8979      	ldrh	r1, [r7, #10]
 8002604:	2300      	movs	r3, #0
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f001 f965 	bl	80038dc <I2C_TransferConfig>
 8002612:	e00f      	b.n	8002634 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002622:	b2da      	uxtb	r2, r3
 8002624:	8979      	ldrh	r1, [r7, #10]
 8002626:	2300      	movs	r3, #0
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f001 f954 	bl	80038dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 ffe5 	bl	8003608 <I2C_WaitOnTXISFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e07b      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	781a      	ldrb	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d034      	beq.n	80026ec <HAL_I2C_Mem_Write+0x1c8>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002686:	2b00      	cmp	r3, #0
 8002688:	d130      	bne.n	80026ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	2200      	movs	r2, #0
 8002692:	2180      	movs	r1, #128	; 0x80
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 ff68 	bl	800356a <I2C_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e04d      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2bff      	cmp	r3, #255	; 0xff
 80026ac:	d90e      	bls.n	80026cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	22ff      	movs	r2, #255	; 0xff
 80026b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	8979      	ldrh	r1, [r7, #10]
 80026bc:	2300      	movs	r3, #0
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f001 f909 	bl	80038dc <I2C_TransferConfig>
 80026ca:	e00f      	b.n	80026ec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	8979      	ldrh	r1, [r7, #10]
 80026de:	2300      	movs	r3, #0
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f001 f8f8 	bl	80038dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d19e      	bne.n	8002634 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 ffcb 	bl	8003696 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e01a      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2220      	movs	r2, #32
 8002710:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_I2C_Mem_Write+0x224>)
 800271e:	400b      	ands	r3, r1
 8002720:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800273e:	2302      	movs	r3, #2
  }
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	fe00e800 	.word	0xfe00e800

0800274c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	4608      	mov	r0, r1
 8002756:	4611      	mov	r1, r2
 8002758:	461a      	mov	r2, r3
 800275a:	4603      	mov	r3, r0
 800275c:	817b      	strh	r3, [r7, #10]
 800275e:	460b      	mov	r3, r1
 8002760:	813b      	strh	r3, [r7, #8]
 8002762:	4613      	mov	r3, r2
 8002764:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b20      	cmp	r3, #32
 8002770:	f040 80fd 	bne.w	800296e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_I2C_Mem_Read+0x34>
 800277a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002786:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0f1      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_I2C_Mem_Read+0x4e>
 8002796:	2302      	movs	r3, #2
 8002798:	e0ea      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027a2:	f7ff fb11 	bl	8001dc8 <HAL_GetTick>
 80027a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2319      	movs	r3, #25
 80027ae:	2201      	movs	r2, #1
 80027b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 fed8 	bl	800356a <I2C_WaitOnFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0d5      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2222      	movs	r2, #34	; 0x22
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2240      	movs	r2, #64	; 0x40
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a3a      	ldr	r2, [r7, #32]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ec:	88f8      	ldrh	r0, [r7, #6]
 80027ee:	893a      	ldrh	r2, [r7, #8]
 80027f0:	8979      	ldrh	r1, [r7, #10]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	4603      	mov	r3, r0
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fac1 	bl	8002d84 <I2C_RequestMemoryRead>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0ad      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	2bff      	cmp	r3, #255	; 0xff
 800281c:	d90e      	bls.n	800283c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	22ff      	movs	r2, #255	; 0xff
 8002822:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002828:	b2da      	uxtb	r2, r3
 800282a:	8979      	ldrh	r1, [r7, #10]
 800282c:	4b52      	ldr	r3, [pc, #328]	; (8002978 <HAL_I2C_Mem_Read+0x22c>)
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f001 f851 	bl	80038dc <I2C_TransferConfig>
 800283a:	e00f      	b.n	800285c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284a:	b2da      	uxtb	r2, r3
 800284c:	8979      	ldrh	r1, [r7, #10]
 800284e:	4b4a      	ldr	r3, [pc, #296]	; (8002978 <HAL_I2C_Mem_Read+0x22c>)
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f001 f840 	bl	80038dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	2200      	movs	r2, #0
 8002864:	2104      	movs	r1, #4
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 fe7f 	bl	800356a <I2C_WaitOnFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e07c      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d034      	beq.n	800291c <HAL_I2C_Mem_Read+0x1d0>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d130      	bne.n	800291c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	2200      	movs	r2, #0
 80028c2:	2180      	movs	r1, #128	; 0x80
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fe50 	bl	800356a <I2C_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e04d      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2bff      	cmp	r3, #255	; 0xff
 80028dc:	d90e      	bls.n	80028fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	22ff      	movs	r2, #255	; 0xff
 80028e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	8979      	ldrh	r1, [r7, #10]
 80028ec:	2300      	movs	r3, #0
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 fff1 	bl	80038dc <I2C_TransferConfig>
 80028fa:	e00f      	b.n	800291c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	b2da      	uxtb	r2, r3
 800290c:	8979      	ldrh	r1, [r7, #10]
 800290e:	2300      	movs	r3, #0
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 ffe0 	bl	80038dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d19a      	bne.n	800285c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 feb3 	bl	8003696 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e01a      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2220      	movs	r2, #32
 8002940:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_I2C_Mem_Read+0x230>)
 800294e:	400b      	ands	r3, r1
 8002950:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e000      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800296e:	2302      	movs	r3, #2
  }
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	80002400 	.word	0x80002400
 800297c:	fe00e800 	.word	0xfe00e800

08002980 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	68f9      	ldr	r1, [r7, #12]
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	4798      	blx	r3
  }
}
 80029ac:	bf00      	nop
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00f      	beq.n	80029f6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	f043 0201 	orr.w	r2, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00f      	beq.n	8002a20 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	f043 0208 	orr.w	r2, r3, #8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a1e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00f      	beq.n	8002a4a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	f043 0202 	orr.w	r2, r3, #2
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a48:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 030b 	and.w	r3, r3, #11
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002a5a:	68f9      	ldr	r1, [r7, #12]
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 fc2b 	bl	80032b8 <I2C_ITError>
  }
}
 8002a62:	bf00      	nop
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	70fb      	strb	r3, [r7, #3]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <I2C_Slave_ISR_IT+0x24>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e0e1      	b.n	8002cd2 <I2C_Slave_ISR_IT+0x1e8>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002b2a:	6939      	ldr	r1, [r7, #16]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fa5d 	bl	8002fec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d04b      	beq.n	8002bd4 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d046      	beq.n	8002bd4 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d128      	bne.n	8002ba2 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b28      	cmp	r3, #40	; 0x28
 8002b5a:	d108      	bne.n	8002b6e <I2C_Slave_ISR_IT+0x84>
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b62:	d104      	bne.n	8002b6e <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b64:	6939      	ldr	r1, [r7, #16]
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fb52 	bl	8003210 <I2C_ITListenCplt>
 8002b6c:	e031      	b.n	8002bd2 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b29      	cmp	r3, #41	; 0x29
 8002b78:	d10e      	bne.n	8002b98 <I2C_Slave_ISR_IT+0xae>
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b80:	d00a      	beq.n	8002b98 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2210      	movs	r2, #16
 8002b88:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fcab 	bl	80034e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f9cf 	bl	8002f34 <I2C_ITSlaveSeqCplt>
 8002b96:	e01c      	b.n	8002bd2 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2210      	movs	r2, #16
 8002b9e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002ba0:	e08f      	b.n	8002cc2 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2210      	movs	r2, #16
 8002ba8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f043 0204 	orr.w	r2, r3, #4
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <I2C_Slave_ISR_IT+0xda>
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bc2:	d17e      	bne.n	8002cc2 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	4619      	mov	r1, r3
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 fb74 	bl	80032b8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002bd0:	e077      	b.n	8002cc2 <I2C_Slave_ISR_IT+0x1d8>
 8002bd2:	e076      	b.n	8002cc2 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d02f      	beq.n	8002c3e <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d02a      	beq.n	8002c3e <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d018      	beq.n	8002c24 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d14b      	bne.n	8002cc6 <I2C_Slave_ISR_IT+0x1dc>
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c34:	d047      	beq.n	8002cc6 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f97c 	bl	8002f34 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002c3c:	e043      	b.n	8002cc6 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d009      	beq.n	8002c5c <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d004      	beq.n	8002c5c <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002c52:	6939      	ldr	r1, [r7, #16]
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f8e9 	bl	8002e2c <I2C_ITAddrCplt>
 8002c5a:	e035      	b.n	8002cc8 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d030      	beq.n	8002cc8 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d02b      	beq.n	8002cc8 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d018      	beq.n	8002cac <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	781a      	ldrb	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	851a      	strh	r2, [r3, #40]	; 0x28
 8002caa:	e00d      	b.n	8002cc8 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb2:	d002      	beq.n	8002cba <I2C_Slave_ISR_IT+0x1d0>
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f93a 	bl	8002f34 <I2C_ITSlaveSeqCplt>
 8002cc0:	e002      	b.n	8002cc8 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8002cc2:	bf00      	nop
 8002cc4:	e000      	b.n	8002cc8 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8002cc6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	4608      	mov	r0, r1
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4603      	mov	r3, r0
 8002cec:	817b      	strh	r3, [r7, #10]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	813b      	strh	r3, [r7, #8]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	8979      	ldrh	r1, [r7, #10]
 8002cfc:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <I2C_RequestMemoryWrite+0xa4>)
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fde9 	bl	80038dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	69b9      	ldr	r1, [r7, #24]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fc7a 	bl	8003608 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e02c      	b.n	8002d78 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d105      	bne.n	8002d30 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d24:	893b      	ldrh	r3, [r7, #8]
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	629a      	str	r2, [r3, #40]	; 0x28
 8002d2e:	e015      	b.n	8002d5c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d30:	893b      	ldrh	r3, [r7, #8]
 8002d32:	0a1b      	lsrs	r3, r3, #8
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	69b9      	ldr	r1, [r7, #24]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fc60 	bl	8003608 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e012      	b.n	8002d78 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d52:	893b      	ldrh	r3, [r7, #8]
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2200      	movs	r2, #0
 8002d64:	2180      	movs	r1, #128	; 0x80
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fbff 	bl	800356a <I2C_WaitOnFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	80002000 	.word	0x80002000

08002d84 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	4611      	mov	r1, r2
 8002d90:	461a      	mov	r2, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	817b      	strh	r3, [r7, #10]
 8002d96:	460b      	mov	r3, r1
 8002d98:	813b      	strh	r3, [r7, #8]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	8979      	ldrh	r1, [r7, #10]
 8002da4:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <I2C_RequestMemoryRead+0xa4>)
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	2300      	movs	r3, #0
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 fd96 	bl	80038dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	69b9      	ldr	r1, [r7, #24]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fc27 	bl	8003608 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e02c      	b.n	8002e1e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dc4:	88fb      	ldrh	r3, [r7, #6]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d105      	bne.n	8002dd6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dca:	893b      	ldrh	r3, [r7, #8]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28
 8002dd4:	e015      	b.n	8002e02 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002dd6:	893b      	ldrh	r3, [r7, #8]
 8002dd8:	0a1b      	lsrs	r3, r3, #8
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	69b9      	ldr	r1, [r7, #24]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fc0d 	bl	8003608 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e012      	b.n	8002e1e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002df8:	893b      	ldrh	r3, [r7, #8]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2140      	movs	r1, #64	; 0x40
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fbac 	bl	800356a <I2C_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	80002000 	.word	0x80002000

08002e2c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e42:	2b28      	cmp	r3, #40	; 0x28
 8002e44:	d16a      	bne.n	8002f1c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	0c1b      	lsrs	r3, r3, #16
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002e64:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e72:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002e80:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d138      	bne.n	8002efc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002e8a:	897b      	ldrh	r3, [r7, #10]
 8002e8c:	09db      	lsrs	r3, r3, #7
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	89bb      	ldrh	r3, [r7, #12]
 8002e92:	4053      	eors	r3, r2
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f003 0306 	and.w	r3, r3, #6
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d11c      	bne.n	8002ed8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002e9e:	897b      	ldrh	r3, [r7, #10]
 8002ea0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d13b      	bne.n	8002f2c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2208      	movs	r2, #8
 8002ec0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002eca:	89ba      	ldrh	r2, [r7, #12]
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff fdde 	bl	8002a92 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002ed6:	e029      	b.n	8002f2c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002ed8:	893b      	ldrh	r3, [r7, #8]
 8002eda:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002edc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fd2d 	bl	8003940 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002eee:	89ba      	ldrh	r2, [r7, #12]
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff fdcc 	bl	8002a92 <HAL_I2C_AddrCallback>
}
 8002efa:	e017      	b.n	8002f2c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002efc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fd1d 	bl	8003940 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f0e:	89ba      	ldrh	r2, [r7, #12]
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	4619      	mov	r1, r3
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff fdbc 	bl	8002a92 <HAL_I2C_AddrCallback>
}
 8002f1a:	e007      	b.n	8002f2c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2208      	movs	r2, #8
 8002f22:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	e00c      	b.n	8002f82 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f80:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b29      	cmp	r3, #41	; 0x29
 8002f8c:	d112      	bne.n	8002fb4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2228      	movs	r2, #40	; 0x28
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2221      	movs	r2, #33	; 0x21
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fcce 	bl	8003940 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff fd5c 	bl	8002a6a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002fb2:	e017      	b.n	8002fe4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8002fbe:	d111      	bne.n	8002fe4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2228      	movs	r2, #40	; 0x28
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2222      	movs	r2, #34	; 0x22
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002fce:	2102      	movs	r1, #2
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fcb5 	bl	8003940 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff fd4d 	bl	8002a7e <HAL_I2C_SlaveRxCpltCallback>
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003008:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2220      	movs	r2, #32
 8003010:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	2b21      	cmp	r3, #33	; 0x21
 8003016:	d002      	beq.n	800301e <I2C_ITSlaveCplt+0x32>
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b29      	cmp	r3, #41	; 0x29
 800301c:	d108      	bne.n	8003030 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800301e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fc8c 	bl	8003940 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2221      	movs	r2, #33	; 0x21
 800302c:	631a      	str	r2, [r3, #48]	; 0x30
 800302e:	e019      	b.n	8003064 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b22      	cmp	r3, #34	; 0x22
 8003034:	d002      	beq.n	800303c <I2C_ITSlaveCplt+0x50>
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	2b2a      	cmp	r3, #42	; 0x2a
 800303a:	d108      	bne.n	800304e <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800303c:	f248 0102 	movw	r1, #32770	; 0x8002
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fc7d 	bl	8003940 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2222      	movs	r2, #34	; 0x22
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
 800304c:	e00a      	b.n	8003064 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	2b28      	cmp	r3, #40	; 0x28
 8003052:	d107      	bne.n	8003064 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003054:	f248 0103 	movw	r1, #32771	; 0x8003
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fc71 	bl	8003940 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003072:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6859      	ldr	r1, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4b62      	ldr	r3, [pc, #392]	; (8003208 <I2C_ITSlaveCplt+0x21c>)
 8003080:	400b      	ands	r3, r1
 8003082:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fa2e 	bl	80034e6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d013      	beq.n	80030bc <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030a2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01f      	beq.n	80030ec <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030ba:	e017      	b.n	80030ec <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d012      	beq.n	80030ec <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030d4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d006      	beq.n	80030ec <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d020      	beq.n	8003138 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f023 0304 	bic.w	r3, r3, #4
 80030fc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00c      	beq.n	8003138 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	f043 0204 	orr.w	r2, r3, #4
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	2b00      	cmp	r3, #0
 8003162:	d010      	beq.n	8003186 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	4619      	mov	r1, r3
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f8a4 	bl	80032b8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b28      	cmp	r3, #40	; 0x28
 800317a:	d141      	bne.n	8003200 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800317c:	6979      	ldr	r1, [r7, #20]
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f846 	bl	8003210 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003184:	e03c      	b.n	8003200 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800318e:	d014      	beq.n	80031ba <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff fecf 	bl	8002f34 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a1c      	ldr	r2, [pc, #112]	; (800320c <I2C_ITSlaveCplt+0x220>)
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff fc7b 	bl	8002aae <HAL_I2C_ListenCpltCallback>
}
 80031b8:	e022      	b.n	8003200 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b22      	cmp	r3, #34	; 0x22
 80031c4:	d10e      	bne.n	80031e4 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff fc4e 	bl	8002a7e <HAL_I2C_SlaveRxCpltCallback>
}
 80031e2:	e00d      	b.n	8003200 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff fc35 	bl	8002a6a <HAL_I2C_SlaveTxCpltCallback>
}
 8003200:	bf00      	nop
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	fe00e800 	.word	0xfe00e800
 800320c:	ffff0000 	.word	0xffff0000

08003210 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a25      	ldr	r2, [pc, #148]	; (80032b4 <I2C_ITListenCplt+0xa4>)
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	d022      	beq.n	800328c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003262:	2b00      	cmp	r3, #0
 8003264:	d012      	beq.n	800328c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	f043 0204 	orr.w	r2, r3, #4
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800328c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fb55 	bl	8003940 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2210      	movs	r2, #16
 800329c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fc01 	bl	8002aae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	ffff0000 	.word	0xffff0000

080032b8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a6d      	ldr	r2, [pc, #436]	; (800348c <I2C_ITError+0x1d4>)
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	2b28      	cmp	r3, #40	; 0x28
 80032ee:	d005      	beq.n	80032fc <I2C_ITError+0x44>
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	2b29      	cmp	r3, #41	; 0x29
 80032f4:	d002      	beq.n	80032fc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b2a      	cmp	r3, #42	; 0x2a
 80032fa:	d10b      	bne.n	8003314 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032fc:	2103      	movs	r1, #3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fb1e 	bl	8003940 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2228      	movs	r2, #40	; 0x28
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a60      	ldr	r2, [pc, #384]	; (8003490 <I2C_ITError+0x1d8>)
 8003310:	635a      	str	r2, [r3, #52]	; 0x34
 8003312:	e030      	b.n	8003376 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003314:	f248 0103 	movw	r1, #32771	; 0x8003
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fb11 	bl	8003940 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f8e1 	bl	80034e6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b60      	cmp	r3, #96	; 0x60
 800332e:	d01f      	beq.n	8003370 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b20      	cmp	r3, #32
 8003344:	d114      	bne.n	8003370 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b10      	cmp	r3, #16
 8003352:	d109      	bne.n	8003368 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2210      	movs	r2, #16
 800335a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003360:	f043 0204 	orr.w	r2, r3, #4
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2220      	movs	r2, #32
 800336e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003380:	2b00      	cmp	r3, #0
 8003382:	d039      	beq.n	80033f8 <I2C_ITError+0x140>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b11      	cmp	r3, #17
 8003388:	d002      	beq.n	8003390 <I2C_ITError+0xd8>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b21      	cmp	r3, #33	; 0x21
 800338e:	d133      	bne.n	80033f8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800339e:	d107      	bne.n	80033b0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fe fe89 	bl	80020cc <HAL_DMA_GetState>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d017      	beq.n	80033f0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c4:	4a33      	ldr	r2, [pc, #204]	; (8003494 <I2C_ITError+0x1dc>)
 80033c6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fe fe38 	bl	800204a <HAL_DMA_Abort_IT>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d04d      	beq.n	800347c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033ea:	4610      	mov	r0, r2
 80033ec:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033ee:	e045      	b.n	800347c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f851 	bl	8003498 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033f6:	e041      	b.n	800347c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d039      	beq.n	8003474 <I2C_ITError+0x1bc>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b12      	cmp	r3, #18
 8003404:	d002      	beq.n	800340c <I2C_ITError+0x154>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b22      	cmp	r3, #34	; 0x22
 800340a:	d133      	bne.n	8003474 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341a:	d107      	bne.n	800342c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800342a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe fe4b 	bl	80020cc <HAL_DMA_GetState>
 8003436:	4603      	mov	r3, r0
 8003438:	2b01      	cmp	r3, #1
 800343a:	d017      	beq.n	800346c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003440:	4a14      	ldr	r2, [pc, #80]	; (8003494 <I2C_ITError+0x1dc>)
 8003442:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003450:	4618      	mov	r0, r3
 8003452:	f7fe fdfa 	bl	800204a <HAL_DMA_Abort_IT>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d011      	beq.n	8003480 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003466:	4610      	mov	r0, r2
 8003468:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800346a:	e009      	b.n	8003480 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f813 	bl	8003498 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003472:	e005      	b.n	8003480 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f80f 	bl	8003498 <I2C_TreatErrorCallback>
  }
}
 800347a:	e002      	b.n	8003482 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800347c:	bf00      	nop
 800347e:	e000      	b.n	8003482 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003480:	bf00      	nop
}
 8003482:	bf00      	nop
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	ffff0000 	.word	0xffff0000
 8003490:	08002aeb 	.word	0x08002aeb
 8003494:	0800352f 	.word	0x0800352f

08003498 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b60      	cmp	r3, #96	; 0x60
 80034aa:	d10e      	bne.n	80034ca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff fb07 	bl	8002ad6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034c8:	e009      	b.n	80034de <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff faf2 	bl	8002ac2 <HAL_I2C_ErrorCallback>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d103      	bne.n	8003504 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2200      	movs	r2, #0
 8003502:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b01      	cmp	r3, #1
 8003510:	d007      	beq.n	8003522 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	619a      	str	r2, [r3, #24]
  }
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	2200      	movs	r2, #0
 800354a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003558:	2200      	movs	r2, #0
 800355a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f7ff ff9b 	bl	8003498 <I2C_TreatErrorCallback>
}
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	4613      	mov	r3, r2
 8003578:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800357a:	e031      	b.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003582:	d02d      	beq.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003584:	f7fe fc20 	bl	8001dc8 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d302      	bcc.n	800359a <I2C_WaitOnFlagUntilTimeout+0x30>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d122      	bne.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699a      	ldr	r2, [r3, #24]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4013      	ands	r3, r2
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	bf0c      	ite	eq
 80035aa:	2301      	moveq	r3, #1
 80035ac:	2300      	movne	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d113      	bne.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e00f      	b.n	8003600 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d0be      	beq.n	800357c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003614:	e033      	b.n	800367e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f87e 	bl	800371c <I2C_IsErrorOccurred>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e031      	b.n	800368e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d025      	beq.n	800367e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7fe fbc9 	bl	8001dc8 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d11a      	bne.n	800367e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b02      	cmp	r3, #2
 8003654:	d013      	beq.n	800367e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f043 0220 	orr.w	r2, r3, #32
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e007      	b.n	800368e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b02      	cmp	r3, #2
 800368a:	d1c4      	bne.n	8003616 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036a2:	e02f      	b.n	8003704 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f837 	bl	800371c <I2C_IsErrorOccurred>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e02d      	b.n	8003714 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b8:	f7fe fb86 	bl	8001dc8 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d302      	bcc.n	80036ce <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d11a      	bne.n	8003704 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d013      	beq.n	8003704 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e0:	f043 0220 	orr.w	r2, r3, #32
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e007      	b.n	8003714 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b20      	cmp	r3, #32
 8003710:	d1c8      	bne.n	80036a4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08a      	sub	sp, #40	; 0x28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b00      	cmp	r3, #0
 8003746:	d068      	beq.n	800381a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2210      	movs	r2, #16
 800374e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003750:	e049      	b.n	80037e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d045      	beq.n	80037e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800375a:	f7fe fb35 	bl	8001dc8 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	429a      	cmp	r2, r3
 8003768:	d302      	bcc.n	8003770 <I2C_IsErrorOccurred+0x54>
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d13a      	bne.n	80037e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003782:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800378e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003792:	d121      	bne.n	80037d8 <I2C_IsErrorOccurred+0xbc>
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800379a:	d01d      	beq.n	80037d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d01a      	beq.n	80037d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037b2:	f7fe fb09 	bl	8001dc8 <HAL_GetTick>
 80037b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037b8:	e00e      	b.n	80037d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037ba:	f7fe fb05 	bl	8001dc8 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b19      	cmp	r3, #25
 80037c6:	d907      	bls.n	80037d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	f043 0320 	orr.w	r3, r3, #32
 80037ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80037d6:	e006      	b.n	80037e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	d1e9      	bne.n	80037ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d003      	beq.n	80037fc <I2C_IsErrorOccurred+0xe0>
 80037f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0aa      	beq.n	8003752 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003800:	2b00      	cmp	r3, #0
 8003802:	d103      	bne.n	800380c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2220      	movs	r2, #32
 800380a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	f043 0304 	orr.w	r3, r3, #4
 8003812:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00b      	beq.n	8003844 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800383c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	f043 0308 	orr.w	r3, r3, #8
 8003854:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800385e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00b      	beq.n	8003888 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	f043 0302 	orr.w	r3, r3, #2
 8003876:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003880:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01c      	beq.n	80038ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f7ff fe28 	bl	80034e6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6859      	ldr	r1, [r3, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <I2C_IsErrorOccurred+0x1bc>)
 80038a2:	400b      	ands	r3, r1
 80038a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80038ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3728      	adds	r7, #40	; 0x28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	fe00e800 	.word	0xfe00e800

080038dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	817b      	strh	r3, [r7, #10]
 80038ea:	4613      	mov	r3, r2
 80038ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ee:	897b      	ldrh	r3, [r7, #10]
 80038f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038f4:	7a7b      	ldrb	r3, [r7, #9]
 80038f6:	041b      	lsls	r3, r3, #16
 80038f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	4313      	orrs	r3, r2
 8003906:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800390a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	0d5b      	lsrs	r3, r3, #21
 8003916:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <I2C_TransferConfig+0x60>)
 800391c:	430b      	orrs	r3, r1
 800391e:	43db      	mvns	r3, r3
 8003920:	ea02 0103 	and.w	r1, r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800392e:	bf00      	nop
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	03ff63ff 	.word	0x03ff63ff

08003940 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003950:	887b      	ldrh	r3, [r7, #2]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00f      	beq.n	800397a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003960:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003968:	b2db      	uxtb	r3, r3
 800396a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800396e:	2b28      	cmp	r3, #40	; 0x28
 8003970:	d003      	beq.n	800397a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003978:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800397a:	887b      	ldrh	r3, [r7, #2]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00f      	beq.n	80039a4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800398a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003992:	b2db      	uxtb	r3, r3
 8003994:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003998:	2b28      	cmp	r3, #40	; 0x28
 800399a:	d003      	beq.n	80039a4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80039a2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80039a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	da03      	bge.n	80039b4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80039b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80039b4:	887b      	ldrh	r3, [r7, #2]
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d103      	bne.n	80039c2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80039c0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80039c2:	887b      	ldrh	r3, [r7, #2]
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d103      	bne.n	80039d0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f043 0320 	orr.w	r3, r3, #32
 80039ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80039d0:	887b      	ldrh	r3, [r7, #2]
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d103      	bne.n	80039de <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039dc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6819      	ldr	r1, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	43da      	mvns	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	400a      	ands	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
}
 80039f0:	bf00      	nop
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d138      	bne.n	8003a84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e032      	b.n	8003a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2224      	movs	r2, #36	; 0x24
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0201 	bic.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	e000      	b.n	8003a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
  }
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b085      	sub	sp, #20
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d139      	bne.n	8003b1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e033      	b.n	8003b1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2224      	movs	r2, #36	; 0x24
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0201 	bic.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ae4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	021b      	lsls	r3, r3, #8
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	e000      	b.n	8003b1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b1c:	2302      	movs	r3, #2
  }
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b30:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40007000 	.word	0x40007000

08003b48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b56:	d130      	bne.n	8003bba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b58:	4b23      	ldr	r3, [pc, #140]	; (8003be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b64:	d038      	beq.n	8003bd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b66:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b6e:	4a1e      	ldr	r2, [pc, #120]	; (8003be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b76:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2232      	movs	r2, #50	; 0x32
 8003b7c:	fb02 f303 	mul.w	r3, r2, r3
 8003b80:	4a1b      	ldr	r2, [pc, #108]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	0c9b      	lsrs	r3, r3, #18
 8003b88:	3301      	adds	r3, #1
 8003b8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b8c:	e002      	b.n	8003b94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b94:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba0:	d102      	bne.n	8003ba8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f2      	bne.n	8003b8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb4:	d110      	bne.n	8003bd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e00f      	b.n	8003bda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bba:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc6:	d007      	beq.n	8003bd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bc8:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bd0:	4a05      	ldr	r2, [pc, #20]	; (8003be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40007000 	.word	0x40007000
 8003bec:	20000090 	.word	0x20000090
 8003bf0:	431bde83 	.word	0x431bde83

08003bf4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d102      	bne.n	8003c08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f000 bc02 	b.w	800440c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c08:	4b96      	ldr	r3, [pc, #600]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c12:	4b94      	ldr	r3, [pc, #592]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80e4 	beq.w	8003df2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <HAL_RCC_OscConfig+0x4c>
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b0c      	cmp	r3, #12
 8003c34:	f040 808b 	bne.w	8003d4e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	f040 8087 	bne.w	8003d4e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c40:	4b88      	ldr	r3, [pc, #544]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_OscConfig+0x64>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e3d9      	b.n	800440c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1a      	ldr	r2, [r3, #32]
 8003c5c:	4b81      	ldr	r3, [pc, #516]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d004      	beq.n	8003c72 <HAL_RCC_OscConfig+0x7e>
 8003c68:	4b7e      	ldr	r3, [pc, #504]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c70:	e005      	b.n	8003c7e <HAL_RCC_OscConfig+0x8a>
 8003c72:	4b7c      	ldr	r3, [pc, #496]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d223      	bcs.n	8003cca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fd8c 	bl	80047a4 <RCC_SetFlashLatencyFromMSIRange>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e3ba      	b.n	800440c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c96:	4b73      	ldr	r3, [pc, #460]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a72      	ldr	r2, [pc, #456]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003c9c:	f043 0308 	orr.w	r3, r3, #8
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	4b70      	ldr	r3, [pc, #448]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	496d      	ldr	r1, [pc, #436]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cb4:	4b6b      	ldr	r3, [pc, #428]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	4968      	ldr	r1, [pc, #416]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	604b      	str	r3, [r1, #4]
 8003cc8:	e025      	b.n	8003d16 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cca:	4b66      	ldr	r3, [pc, #408]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a65      	ldr	r2, [pc, #404]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003cd0:	f043 0308 	orr.w	r3, r3, #8
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	4b63      	ldr	r3, [pc, #396]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	4960      	ldr	r1, [pc, #384]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ce8:	4b5e      	ldr	r3, [pc, #376]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	495b      	ldr	r1, [pc, #364]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fd4c 	bl	80047a4 <RCC_SetFlashLatencyFromMSIRange>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e37a      	b.n	800440c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d16:	f000 fc81 	bl	800461c <HAL_RCC_GetSysClockFreq>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	4b51      	ldr	r3, [pc, #324]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	4950      	ldr	r1, [pc, #320]	; (8003e68 <HAL_RCC_OscConfig+0x274>)
 8003d28:	5ccb      	ldrb	r3, [r1, r3]
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d32:	4a4e      	ldr	r2, [pc, #312]	; (8003e6c <HAL_RCC_OscConfig+0x278>)
 8003d34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d36:	4b4e      	ldr	r3, [pc, #312]	; (8003e70 <HAL_RCC_OscConfig+0x27c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fd fff4 	bl	8001d28 <HAL_InitTick>
 8003d40:	4603      	mov	r3, r0
 8003d42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d052      	beq.n	8003df0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	e35e      	b.n	800440c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d032      	beq.n	8003dbc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d56:	4b43      	ldr	r3, [pc, #268]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a42      	ldr	r2, [pc, #264]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d62:	f7fe f831 	bl	8001dc8 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d6a:	f7fe f82d 	bl	8001dc8 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e347      	b.n	800440c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d7c:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d88:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a35      	ldr	r2, [pc, #212]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003d8e:	f043 0308 	orr.w	r3, r3, #8
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	4b33      	ldr	r3, [pc, #204]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	4930      	ldr	r1, [pc, #192]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003da6:	4b2f      	ldr	r3, [pc, #188]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	492b      	ldr	r1, [pc, #172]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	604b      	str	r3, [r1, #4]
 8003dba:	e01a      	b.n	8003df2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dbc:	4b29      	ldr	r3, [pc, #164]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a28      	ldr	r2, [pc, #160]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dc8:	f7fd fffe 	bl	8001dc8 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dd0:	f7fd fffa 	bl	8001dc8 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e314      	b.n	800440c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003de2:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x1dc>
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003df0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d073      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_OscConfig+0x21c>
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b0c      	cmp	r3, #12
 8003e08:	d10e      	bne.n	8003e28 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d10b      	bne.n	8003e28 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e10:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d063      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x2f0>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d15f      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e2f1      	b.n	800440c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e30:	d106      	bne.n	8003e40 <HAL_RCC_OscConfig+0x24c>
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a0b      	ldr	r2, [pc, #44]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	e025      	b.n	8003e8c <HAL_RCC_OscConfig+0x298>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e48:	d114      	bne.n	8003e74 <HAL_RCC_OscConfig+0x280>
 8003e4a:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a05      	ldr	r2, [pc, #20]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a02      	ldr	r2, [pc, #8]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	e013      	b.n	8003e8c <HAL_RCC_OscConfig+0x298>
 8003e64:	40021000 	.word	0x40021000
 8003e68:	08008c90 	.word	0x08008c90
 8003e6c:	20000090 	.word	0x20000090
 8003e70:	20000094 	.word	0x20000094
 8003e74:	4ba0      	ldr	r3, [pc, #640]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a9f      	ldr	r2, [pc, #636]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	4b9d      	ldr	r3, [pc, #628]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a9c      	ldr	r2, [pc, #624]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d013      	beq.n	8003ebc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fd ff98 	bl	8001dc8 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e9c:	f7fd ff94 	bl	8001dc8 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	; 0x64
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e2ae      	b.n	800440c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eae:	4b92      	ldr	r3, [pc, #584]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x2a8>
 8003eba:	e014      	b.n	8003ee6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fd ff84 	bl	8001dc8 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec4:	f7fd ff80 	bl	8001dc8 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b64      	cmp	r3, #100	; 0x64
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e29a      	b.n	800440c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ed6:	4b88      	ldr	r3, [pc, #544]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x2d0>
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d060      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_OscConfig+0x310>
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	2b0c      	cmp	r3, #12
 8003efc:	d119      	bne.n	8003f32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d116      	bne.n	8003f32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f04:	4b7c      	ldr	r3, [pc, #496]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_OscConfig+0x328>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e277      	b.n	800440c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1c:	4b76      	ldr	r3, [pc, #472]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	061b      	lsls	r3, r3, #24
 8003f2a:	4973      	ldr	r1, [pc, #460]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f30:	e040      	b.n	8003fb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d023      	beq.n	8003f82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f3a:	4b6f      	ldr	r3, [pc, #444]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a6e      	ldr	r2, [pc, #440]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7fd ff3f 	bl	8001dc8 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f4e:	f7fd ff3b 	bl	8001dc8 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e255      	b.n	800440c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f60:	4b65      	ldr	r3, [pc, #404]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6c:	4b62      	ldr	r3, [pc, #392]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	061b      	lsls	r3, r3, #24
 8003f7a:	495f      	ldr	r1, [pc, #380]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	604b      	str	r3, [r1, #4]
 8003f80:	e018      	b.n	8003fb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f82:	4b5d      	ldr	r3, [pc, #372]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a5c      	ldr	r2, [pc, #368]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8e:	f7fd ff1b 	bl	8001dc8 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f96:	f7fd ff17 	bl	8001dc8 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e231      	b.n	800440c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fa8:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f0      	bne.n	8003f96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d03c      	beq.n	800403a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01c      	beq.n	8004002 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc8:	4b4b      	ldr	r3, [pc, #300]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fce:	4a4a      	ldr	r2, [pc, #296]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd8:	f7fd fef6 	bl	8001dc8 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe0:	f7fd fef2 	bl	8001dc8 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e20c      	b.n	800440c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ff2:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8003ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0ef      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x3ec>
 8004000:	e01b      	b.n	800403a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004002:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8004004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004008:	4a3b      	ldr	r2, [pc, #236]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004012:	f7fd fed9 	bl	8001dc8 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800401a:	f7fd fed5 	bl	8001dc8 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e1ef      	b.n	800440c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800402c:	4b32      	ldr	r3, [pc, #200]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 800402e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1ef      	bne.n	800401a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 80a6 	beq.w	8004194 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004048:	2300      	movs	r3, #0
 800404a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800404c:	4b2a      	ldr	r3, [pc, #168]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 800404e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10d      	bne.n	8004074 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004058:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 800405a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405c:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 800405e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004062:	6593      	str	r3, [r2, #88]	; 0x58
 8004064:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 8004066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004070:	2301      	movs	r3, #1
 8004072:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004074:	4b21      	ldr	r3, [pc, #132]	; (80040fc <HAL_RCC_OscConfig+0x508>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d118      	bne.n	80040b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004080:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <HAL_RCC_OscConfig+0x508>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1d      	ldr	r2, [pc, #116]	; (80040fc <HAL_RCC_OscConfig+0x508>)
 8004086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408c:	f7fd fe9c 	bl	8001dc8 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004094:	f7fd fe98 	bl	8001dc8 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e1b2      	b.n	800440c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a6:	4b15      	ldr	r3, [pc, #84]	; (80040fc <HAL_RCC_OscConfig+0x508>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d108      	bne.n	80040cc <HAL_RCC_OscConfig+0x4d8>
 80040ba:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c0:	4a0d      	ldr	r2, [pc, #52]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040ca:	e029      	b.n	8004120 <HAL_RCC_OscConfig+0x52c>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2b05      	cmp	r3, #5
 80040d2:	d115      	bne.n	8004100 <HAL_RCC_OscConfig+0x50c>
 80040d4:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040da:	4a07      	ldr	r2, [pc, #28]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 80040dc:	f043 0304 	orr.w	r3, r3, #4
 80040e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040e4:	4b04      	ldr	r3, [pc, #16]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ea:	4a03      	ldr	r2, [pc, #12]	; (80040f8 <HAL_RCC_OscConfig+0x504>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040f4:	e014      	b.n	8004120 <HAL_RCC_OscConfig+0x52c>
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40007000 	.word	0x40007000
 8004100:	4b9a      	ldr	r3, [pc, #616]	; (800436c <HAL_RCC_OscConfig+0x778>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004106:	4a99      	ldr	r2, [pc, #612]	; (800436c <HAL_RCC_OscConfig+0x778>)
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004110:	4b96      	ldr	r3, [pc, #600]	; (800436c <HAL_RCC_OscConfig+0x778>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004116:	4a95      	ldr	r2, [pc, #596]	; (800436c <HAL_RCC_OscConfig+0x778>)
 8004118:	f023 0304 	bic.w	r3, r3, #4
 800411c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d016      	beq.n	8004156 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004128:	f7fd fe4e 	bl	8001dc8 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800412e:	e00a      	b.n	8004146 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004130:	f7fd fe4a 	bl	8001dc8 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	; 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e162      	b.n	800440c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004146:	4b89      	ldr	r3, [pc, #548]	; (800436c <HAL_RCC_OscConfig+0x778>)
 8004148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0ed      	beq.n	8004130 <HAL_RCC_OscConfig+0x53c>
 8004154:	e015      	b.n	8004182 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004156:	f7fd fe37 	bl	8001dc8 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800415c:	e00a      	b.n	8004174 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415e:	f7fd fe33 	bl	8001dc8 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	f241 3288 	movw	r2, #5000	; 0x1388
 800416c:	4293      	cmp	r3, r2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e14b      	b.n	800440c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004174:	4b7d      	ldr	r3, [pc, #500]	; (800436c <HAL_RCC_OscConfig+0x778>)
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1ed      	bne.n	800415e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004182:	7ffb      	ldrb	r3, [r7, #31]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d105      	bne.n	8004194 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004188:	4b78      	ldr	r3, [pc, #480]	; (800436c <HAL_RCC_OscConfig+0x778>)
 800418a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418c:	4a77      	ldr	r2, [pc, #476]	; (800436c <HAL_RCC_OscConfig+0x778>)
 800418e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004192:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d03c      	beq.n	800421a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01c      	beq.n	80041e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041a8:	4b70      	ldr	r3, [pc, #448]	; (800436c <HAL_RCC_OscConfig+0x778>)
 80041aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ae:	4a6f      	ldr	r2, [pc, #444]	; (800436c <HAL_RCC_OscConfig+0x778>)
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b8:	f7fd fe06 	bl	8001dc8 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041c0:	f7fd fe02 	bl	8001dc8 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e11c      	b.n	800440c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041d2:	4b66      	ldr	r3, [pc, #408]	; (800436c <HAL_RCC_OscConfig+0x778>)
 80041d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0ef      	beq.n	80041c0 <HAL_RCC_OscConfig+0x5cc>
 80041e0:	e01b      	b.n	800421a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041e2:	4b62      	ldr	r3, [pc, #392]	; (800436c <HAL_RCC_OscConfig+0x778>)
 80041e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041e8:	4a60      	ldr	r2, [pc, #384]	; (800436c <HAL_RCC_OscConfig+0x778>)
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f2:	f7fd fde9 	bl	8001dc8 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041fa:	f7fd fde5 	bl	8001dc8 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e0ff      	b.n	800440c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800420c:	4b57      	ldr	r3, [pc, #348]	; (800436c <HAL_RCC_OscConfig+0x778>)
 800420e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1ef      	bne.n	80041fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 80f3 	beq.w	800440a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	2b02      	cmp	r3, #2
 800422a:	f040 80c9 	bne.w	80043c0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800422e:	4b4f      	ldr	r3, [pc, #316]	; (800436c <HAL_RCC_OscConfig+0x778>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f003 0203 	and.w	r2, r3, #3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	429a      	cmp	r2, r3
 8004240:	d12c      	bne.n	800429c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	3b01      	subs	r3, #1
 800424e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d123      	bne.n	800429c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004260:	429a      	cmp	r2, r3
 8004262:	d11b      	bne.n	800429c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004270:	429a      	cmp	r2, r3
 8004272:	d113      	bne.n	800429c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	3b01      	subs	r3, #1
 8004282:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d109      	bne.n	800429c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	3b01      	subs	r3, #1
 8004296:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004298:	429a      	cmp	r2, r3
 800429a:	d06b      	beq.n	8004374 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2b0c      	cmp	r3, #12
 80042a0:	d062      	beq.n	8004368 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042a2:	4b32      	ldr	r3, [pc, #200]	; (800436c <HAL_RCC_OscConfig+0x778>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e0ac      	b.n	800440c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042b2:	4b2e      	ldr	r3, [pc, #184]	; (800436c <HAL_RCC_OscConfig+0x778>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a2d      	ldr	r2, [pc, #180]	; (800436c <HAL_RCC_OscConfig+0x778>)
 80042b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042be:	f7fd fd83 	bl	8001dc8 <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c6:	f7fd fd7f 	bl	8001dc8 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e099      	b.n	800440c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042d8:	4b24      	ldr	r3, [pc, #144]	; (800436c <HAL_RCC_OscConfig+0x778>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1f0      	bne.n	80042c6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042e4:	4b21      	ldr	r3, [pc, #132]	; (800436c <HAL_RCC_OscConfig+0x778>)
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	4b21      	ldr	r3, [pc, #132]	; (8004370 <HAL_RCC_OscConfig+0x77c>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042f4:	3a01      	subs	r2, #1
 80042f6:	0112      	lsls	r2, r2, #4
 80042f8:	4311      	orrs	r1, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042fe:	0212      	lsls	r2, r2, #8
 8004300:	4311      	orrs	r1, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004306:	0852      	lsrs	r2, r2, #1
 8004308:	3a01      	subs	r2, #1
 800430a:	0552      	lsls	r2, r2, #21
 800430c:	4311      	orrs	r1, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004312:	0852      	lsrs	r2, r2, #1
 8004314:	3a01      	subs	r2, #1
 8004316:	0652      	lsls	r2, r2, #25
 8004318:	4311      	orrs	r1, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800431e:	06d2      	lsls	r2, r2, #27
 8004320:	430a      	orrs	r2, r1
 8004322:	4912      	ldr	r1, [pc, #72]	; (800436c <HAL_RCC_OscConfig+0x778>)
 8004324:	4313      	orrs	r3, r2
 8004326:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004328:	4b10      	ldr	r3, [pc, #64]	; (800436c <HAL_RCC_OscConfig+0x778>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a0f      	ldr	r2, [pc, #60]	; (800436c <HAL_RCC_OscConfig+0x778>)
 800432e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004332:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004334:	4b0d      	ldr	r3, [pc, #52]	; (800436c <HAL_RCC_OscConfig+0x778>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a0c      	ldr	r2, [pc, #48]	; (800436c <HAL_RCC_OscConfig+0x778>)
 800433a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800433e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004340:	f7fd fd42 	bl	8001dc8 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004348:	f7fd fd3e 	bl	8001dc8 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e058      	b.n	800440c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800435a:	4b04      	ldr	r3, [pc, #16]	; (800436c <HAL_RCC_OscConfig+0x778>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004366:	e050      	b.n	800440a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e04f      	b.n	800440c <HAL_RCC_OscConfig+0x818>
 800436c:	40021000 	.word	0x40021000
 8004370:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004374:	4b27      	ldr	r3, [pc, #156]	; (8004414 <HAL_RCC_OscConfig+0x820>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d144      	bne.n	800440a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004380:	4b24      	ldr	r3, [pc, #144]	; (8004414 <HAL_RCC_OscConfig+0x820>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a23      	ldr	r2, [pc, #140]	; (8004414 <HAL_RCC_OscConfig+0x820>)
 8004386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800438a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800438c:	4b21      	ldr	r3, [pc, #132]	; (8004414 <HAL_RCC_OscConfig+0x820>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a20      	ldr	r2, [pc, #128]	; (8004414 <HAL_RCC_OscConfig+0x820>)
 8004392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004396:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004398:	f7fd fd16 	bl	8001dc8 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fd fd12 	bl	8001dc8 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e02c      	b.n	800440c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b2:	4b18      	ldr	r3, [pc, #96]	; (8004414 <HAL_RCC_OscConfig+0x820>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x7ac>
 80043be:	e024      	b.n	800440a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	d01f      	beq.n	8004406 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c6:	4b13      	ldr	r3, [pc, #76]	; (8004414 <HAL_RCC_OscConfig+0x820>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a12      	ldr	r2, [pc, #72]	; (8004414 <HAL_RCC_OscConfig+0x820>)
 80043cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d2:	f7fd fcf9 	bl	8001dc8 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043da:	f7fd fcf5 	bl	8001dc8 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e00f      	b.n	800440c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_OscConfig+0x820>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1f0      	bne.n	80043da <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <HAL_RCC_OscConfig+0x820>)
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	4905      	ldr	r1, [pc, #20]	; (8004414 <HAL_RCC_OscConfig+0x820>)
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_RCC_OscConfig+0x824>)
 8004400:	4013      	ands	r3, r2
 8004402:	60cb      	str	r3, [r1, #12]
 8004404:	e001      	b.n	800440a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3720      	adds	r7, #32
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40021000 	.word	0x40021000
 8004418:	feeefffc 	.word	0xfeeefffc

0800441c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0e7      	b.n	8004600 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004430:	4b75      	ldr	r3, [pc, #468]	; (8004608 <HAL_RCC_ClockConfig+0x1ec>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d910      	bls.n	8004460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443e:	4b72      	ldr	r3, [pc, #456]	; (8004608 <HAL_RCC_ClockConfig+0x1ec>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f023 0207 	bic.w	r2, r3, #7
 8004446:	4970      	ldr	r1, [pc, #448]	; (8004608 <HAL_RCC_ClockConfig+0x1ec>)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800444e:	4b6e      	ldr	r3, [pc, #440]	; (8004608 <HAL_RCC_ClockConfig+0x1ec>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d001      	beq.n	8004460 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0cf      	b.n	8004600 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d010      	beq.n	800448e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	4b66      	ldr	r3, [pc, #408]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004478:	429a      	cmp	r2, r3
 800447a:	d908      	bls.n	800448e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800447c:	4b63      	ldr	r3, [pc, #396]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	4960      	ldr	r1, [pc, #384]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 800448a:	4313      	orrs	r3, r2
 800448c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d04c      	beq.n	8004534 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d107      	bne.n	80044b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a2:	4b5a      	ldr	r3, [pc, #360]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d121      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e0a6      	b.n	8004600 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d107      	bne.n	80044ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ba:	4b54      	ldr	r3, [pc, #336]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d115      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e09a      	b.n	8004600 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044d2:	4b4e      	ldr	r3, [pc, #312]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e08e      	b.n	8004600 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044e2:	4b4a      	ldr	r3, [pc, #296]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e086      	b.n	8004600 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044f2:	4b46      	ldr	r3, [pc, #280]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f023 0203 	bic.w	r2, r3, #3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	4943      	ldr	r1, [pc, #268]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 8004500:	4313      	orrs	r3, r2
 8004502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004504:	f7fd fc60 	bl	8001dc8 <HAL_GetTick>
 8004508:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450a:	e00a      	b.n	8004522 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800450c:	f7fd fc5c 	bl	8001dc8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	; 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e06e      	b.n	8004600 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004522:	4b3a      	ldr	r3, [pc, #232]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 020c 	and.w	r2, r3, #12
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	429a      	cmp	r2, r3
 8004532:	d1eb      	bne.n	800450c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d010      	beq.n	8004562 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	4b31      	ldr	r3, [pc, #196]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800454c:	429a      	cmp	r2, r3
 800454e:	d208      	bcs.n	8004562 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004550:	4b2e      	ldr	r3, [pc, #184]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	492b      	ldr	r1, [pc, #172]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 800455e:	4313      	orrs	r3, r2
 8004560:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004562:	4b29      	ldr	r3, [pc, #164]	; (8004608 <HAL_RCC_ClockConfig+0x1ec>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0307 	and.w	r3, r3, #7
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d210      	bcs.n	8004592 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004570:	4b25      	ldr	r3, [pc, #148]	; (8004608 <HAL_RCC_ClockConfig+0x1ec>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f023 0207 	bic.w	r2, r3, #7
 8004578:	4923      	ldr	r1, [pc, #140]	; (8004608 <HAL_RCC_ClockConfig+0x1ec>)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	4313      	orrs	r3, r2
 800457e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004580:	4b21      	ldr	r3, [pc, #132]	; (8004608 <HAL_RCC_ClockConfig+0x1ec>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d001      	beq.n	8004592 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e036      	b.n	8004600 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800459e:	4b1b      	ldr	r3, [pc, #108]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	4918      	ldr	r1, [pc, #96]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d009      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045bc:	4b13      	ldr	r3, [pc, #76]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	4910      	ldr	r1, [pc, #64]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045d0:	f000 f824 	bl	800461c <HAL_RCC_GetSysClockFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b0d      	ldr	r3, [pc, #52]	; (800460c <HAL_RCC_ClockConfig+0x1f0>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	091b      	lsrs	r3, r3, #4
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	490b      	ldr	r1, [pc, #44]	; (8004610 <HAL_RCC_ClockConfig+0x1f4>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ec:	4a09      	ldr	r2, [pc, #36]	; (8004614 <HAL_RCC_ClockConfig+0x1f8>)
 80045ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045f0:	4b09      	ldr	r3, [pc, #36]	; (8004618 <HAL_RCC_ClockConfig+0x1fc>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fd fb97 	bl	8001d28 <HAL_InitTick>
 80045fa:	4603      	mov	r3, r0
 80045fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80045fe:	7afb      	ldrb	r3, [r7, #11]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40022000 	.word	0x40022000
 800460c:	40021000 	.word	0x40021000
 8004610:	08008c90 	.word	0x08008c90
 8004614:	20000090 	.word	0x20000090
 8004618:	20000094 	.word	0x20000094

0800461c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800461c:	b480      	push	{r7}
 800461e:	b089      	sub	sp, #36	; 0x24
 8004620:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	2300      	movs	r3, #0
 8004628:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800462a:	4b3e      	ldr	r3, [pc, #248]	; (8004724 <HAL_RCC_GetSysClockFreq+0x108>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004634:	4b3b      	ldr	r3, [pc, #236]	; (8004724 <HAL_RCC_GetSysClockFreq+0x108>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_RCC_GetSysClockFreq+0x34>
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	2b0c      	cmp	r3, #12
 8004648:	d121      	bne.n	800468e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d11e      	bne.n	800468e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004650:	4b34      	ldr	r3, [pc, #208]	; (8004724 <HAL_RCC_GetSysClockFreq+0x108>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d107      	bne.n	800466c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800465c:	4b31      	ldr	r3, [pc, #196]	; (8004724 <HAL_RCC_GetSysClockFreq+0x108>)
 800465e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004662:	0a1b      	lsrs	r3, r3, #8
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	e005      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800466c:	4b2d      	ldr	r3, [pc, #180]	; (8004724 <HAL_RCC_GetSysClockFreq+0x108>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	091b      	lsrs	r3, r3, #4
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004678:	4a2b      	ldr	r2, [pc, #172]	; (8004728 <HAL_RCC_GetSysClockFreq+0x10c>)
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004680:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10d      	bne.n	80046a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b04      	cmp	r3, #4
 8004692:	d102      	bne.n	800469a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004694:	4b25      	ldr	r3, [pc, #148]	; (800472c <HAL_RCC_GetSysClockFreq+0x110>)
 8004696:	61bb      	str	r3, [r7, #24]
 8004698:	e004      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b08      	cmp	r3, #8
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046a0:	4b23      	ldr	r3, [pc, #140]	; (8004730 <HAL_RCC_GetSysClockFreq+0x114>)
 80046a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	d134      	bne.n	8004714 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046aa:	4b1e      	ldr	r3, [pc, #120]	; (8004724 <HAL_RCC_GetSysClockFreq+0x108>)
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d003      	beq.n	80046c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d003      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0xac>
 80046c0:	e005      	b.n	80046ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046c2:	4b1a      	ldr	r3, [pc, #104]	; (800472c <HAL_RCC_GetSysClockFreq+0x110>)
 80046c4:	617b      	str	r3, [r7, #20]
      break;
 80046c6:	e005      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046c8:	4b19      	ldr	r3, [pc, #100]	; (8004730 <HAL_RCC_GetSysClockFreq+0x114>)
 80046ca:	617b      	str	r3, [r7, #20]
      break;
 80046cc:	e002      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	617b      	str	r3, [r7, #20]
      break;
 80046d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046d4:	4b13      	ldr	r3, [pc, #76]	; (8004724 <HAL_RCC_GetSysClockFreq+0x108>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	3301      	adds	r3, #1
 80046e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046e2:	4b10      	ldr	r3, [pc, #64]	; (8004724 <HAL_RCC_GetSysClockFreq+0x108>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	0a1b      	lsrs	r3, r3, #8
 80046e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	fb03 f202 	mul.w	r2, r3, r2
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046fa:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <HAL_RCC_GetSysClockFreq+0x108>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	0e5b      	lsrs	r3, r3, #25
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	3301      	adds	r3, #1
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004712:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004714:	69bb      	ldr	r3, [r7, #24]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3724      	adds	r7, #36	; 0x24
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40021000 	.word	0x40021000
 8004728:	08008ca8 	.word	0x08008ca8
 800472c:	00f42400 	.word	0x00f42400
 8004730:	007a1200 	.word	0x007a1200

08004734 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004738:	4b03      	ldr	r3, [pc, #12]	; (8004748 <HAL_RCC_GetHCLKFreq+0x14>)
 800473a:	681b      	ldr	r3, [r3, #0]
}
 800473c:	4618      	mov	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000090 	.word	0x20000090

0800474c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004750:	f7ff fff0 	bl	8004734 <HAL_RCC_GetHCLKFreq>
 8004754:	4602      	mov	r2, r0
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	4904      	ldr	r1, [pc, #16]	; (8004774 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004762:	5ccb      	ldrb	r3, [r1, r3]
 8004764:	f003 031f 	and.w	r3, r3, #31
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800476c:	4618      	mov	r0, r3
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40021000 	.word	0x40021000
 8004774:	08008ca0 	.word	0x08008ca0

08004778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800477c:	f7ff ffda 	bl	8004734 <HAL_RCC_GetHCLKFreq>
 8004780:	4602      	mov	r2, r0
 8004782:	4b06      	ldr	r3, [pc, #24]	; (800479c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	0adb      	lsrs	r3, r3, #11
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	4904      	ldr	r1, [pc, #16]	; (80047a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800478e:	5ccb      	ldrb	r3, [r1, r3]
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004798:	4618      	mov	r0, r3
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	08008ca0 	.word	0x08008ca0

080047a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047b0:	4b2a      	ldr	r3, [pc, #168]	; (800485c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047bc:	f7ff f9b6 	bl	8003b2c <HAL_PWREx_GetVoltageRange>
 80047c0:	6178      	str	r0, [r7, #20]
 80047c2:	e014      	b.n	80047ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047c4:	4b25      	ldr	r3, [pc, #148]	; (800485c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	4a24      	ldr	r2, [pc, #144]	; (800485c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ce:	6593      	str	r3, [r2, #88]	; 0x58
 80047d0:	4b22      	ldr	r3, [pc, #136]	; (800485c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80047dc:	f7ff f9a6 	bl	8003b2c <HAL_PWREx_GetVoltageRange>
 80047e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80047e2:	4b1e      	ldr	r3, [pc, #120]	; (800485c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e6:	4a1d      	ldr	r2, [pc, #116]	; (800485c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f4:	d10b      	bne.n	800480e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b80      	cmp	r3, #128	; 0x80
 80047fa:	d919      	bls.n	8004830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2ba0      	cmp	r3, #160	; 0xa0
 8004800:	d902      	bls.n	8004808 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004802:	2302      	movs	r3, #2
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	e013      	b.n	8004830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004808:	2301      	movs	r3, #1
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	e010      	b.n	8004830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b80      	cmp	r3, #128	; 0x80
 8004812:	d902      	bls.n	800481a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004814:	2303      	movs	r3, #3
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	e00a      	b.n	8004830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b80      	cmp	r3, #128	; 0x80
 800481e:	d102      	bne.n	8004826 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004820:	2302      	movs	r3, #2
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	e004      	b.n	8004830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b70      	cmp	r3, #112	; 0x70
 800482a:	d101      	bne.n	8004830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800482c:	2301      	movs	r3, #1
 800482e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f023 0207 	bic.w	r2, r3, #7
 8004838:	4909      	ldr	r1, [pc, #36]	; (8004860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004840:	4b07      	ldr	r3, [pc, #28]	; (8004860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	429a      	cmp	r2, r3
 800484c:	d001      	beq.n	8004852 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40021000 	.word	0x40021000
 8004860:	40022000 	.word	0x40022000

08004864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800486c:	2300      	movs	r3, #0
 800486e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004870:	2300      	movs	r3, #0
 8004872:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800487c:	2b00      	cmp	r3, #0
 800487e:	d031      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004884:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004888:	d01a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800488a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800488e:	d814      	bhi.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004894:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004898:	d10f      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800489a:	4b5d      	ldr	r3, [pc, #372]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	4a5c      	ldr	r2, [pc, #368]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048a6:	e00c      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3304      	adds	r3, #4
 80048ac:	2100      	movs	r1, #0
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f9ce 	bl	8004c50 <RCCEx_PLLSAI1_Config>
 80048b4:	4603      	mov	r3, r0
 80048b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048b8:	e003      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	74fb      	strb	r3, [r7, #19]
      break;
 80048be:	e000      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80048c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048c2:	7cfb      	ldrb	r3, [r7, #19]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048c8:	4b51      	ldr	r3, [pc, #324]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d6:	494e      	ldr	r1, [pc, #312]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048de:	e001      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 809e 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f2:	2300      	movs	r3, #0
 80048f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048f6:	4b46      	ldr	r3, [pc, #280]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004906:	2300      	movs	r3, #0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00d      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800490c:	4b40      	ldr	r3, [pc, #256]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800490e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004910:	4a3f      	ldr	r2, [pc, #252]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004916:	6593      	str	r3, [r2, #88]	; 0x58
 8004918:	4b3d      	ldr	r3, [pc, #244]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800491a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004924:	2301      	movs	r3, #1
 8004926:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004928:	4b3a      	ldr	r3, [pc, #232]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a39      	ldr	r2, [pc, #228]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800492e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004932:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004934:	f7fd fa48 	bl	8001dc8 <HAL_GetTick>
 8004938:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800493a:	e009      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800493c:	f7fd fa44 	bl	8001dc8 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d902      	bls.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	74fb      	strb	r3, [r7, #19]
        break;
 800494e:	e005      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004950:	4b30      	ldr	r3, [pc, #192]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0ef      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800495c:	7cfb      	ldrb	r3, [r7, #19]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d15a      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004962:	4b2b      	ldr	r3, [pc, #172]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01e      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	429a      	cmp	r2, r3
 800497c:	d019      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800497e:	4b24      	ldr	r3, [pc, #144]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004988:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800498a:	4b21      	ldr	r3, [pc, #132]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	4a1f      	ldr	r2, [pc, #124]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800499a:	4b1d      	ldr	r3, [pc, #116]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a0:	4a1b      	ldr	r2, [pc, #108]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049aa:	4a19      	ldr	r2, [pc, #100]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d016      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049bc:	f7fd fa04 	bl	8001dc8 <HAL_GetTick>
 80049c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c2:	e00b      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c4:	f7fd fa00 	bl	8001dc8 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d902      	bls.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	74fb      	strb	r3, [r7, #19]
            break;
 80049da:	e006      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049dc:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0ec      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80049ea:	7cfb      	ldrb	r3, [r7, #19]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10b      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049f0:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fe:	4904      	ldr	r1, [pc, #16]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a06:	e009      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a08:	7cfb      	ldrb	r3, [r7, #19]
 8004a0a:	74bb      	strb	r3, [r7, #18]
 8004a0c:	e006      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a18:	7cfb      	ldrb	r3, [r7, #19]
 8004a1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a1c:	7c7b      	ldrb	r3, [r7, #17]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d105      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a22:	4b8a      	ldr	r3, [pc, #552]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a26:	4a89      	ldr	r2, [pc, #548]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a3a:	4b84      	ldr	r3, [pc, #528]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a40:	f023 0203 	bic.w	r2, r3, #3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	4980      	ldr	r1, [pc, #512]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a5c:	4b7b      	ldr	r3, [pc, #492]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a62:	f023 020c 	bic.w	r2, r3, #12
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	4978      	ldr	r1, [pc, #480]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a7e:	4b73      	ldr	r3, [pc, #460]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	496f      	ldr	r1, [pc, #444]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aa0:	4b6a      	ldr	r3, [pc, #424]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aae:	4967      	ldr	r1, [pc, #412]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ac2:	4b62      	ldr	r3, [pc, #392]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	495e      	ldr	r1, [pc, #376]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ae4:	4b59      	ldr	r3, [pc, #356]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	4956      	ldr	r1, [pc, #344]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b06:	4b51      	ldr	r3, [pc, #324]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	494d      	ldr	r1, [pc, #308]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d028      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b28:	4b48      	ldr	r3, [pc, #288]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	4945      	ldr	r1, [pc, #276]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b46:	d106      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b48:	4b40      	ldr	r3, [pc, #256]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	4a3f      	ldr	r2, [pc, #252]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b52:	60d3      	str	r3, [r2, #12]
 8004b54:	e011      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b5e:	d10c      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3304      	adds	r3, #4
 8004b64:	2101      	movs	r1, #1
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 f872 	bl	8004c50 <RCCEx_PLLSAI1_Config>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004b76:	7cfb      	ldrb	r3, [r7, #19]
 8004b78:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d028      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b86:	4b31      	ldr	r3, [pc, #196]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b94:	492d      	ldr	r1, [pc, #180]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba4:	d106      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba6:	4b29      	ldr	r3, [pc, #164]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	4a28      	ldr	r2, [pc, #160]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bb0:	60d3      	str	r3, [r2, #12]
 8004bb2:	e011      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 f843 	bl	8004c50 <RCCEx_PLLSAI1_Config>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bce:	7cfb      	ldrb	r3, [r7, #19]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004bd4:	7cfb      	ldrb	r3, [r7, #19]
 8004bd6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01c      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004be4:	4b19      	ldr	r3, [pc, #100]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf2:	4916      	ldr	r1, [pc, #88]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c02:	d10c      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	2102      	movs	r1, #2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 f820 	bl	8004c50 <RCCEx_PLLSAI1_Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c14:	7cfb      	ldrb	r3, [r7, #19]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004c1a:	7cfb      	ldrb	r3, [r7, #19]
 8004c1c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c2a:	4b08      	ldr	r3, [pc, #32]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c30:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c38:	4904      	ldr	r1, [pc, #16]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c40:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40021000 	.word	0x40021000

08004c50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c5e:	4b74      	ldr	r3, [pc, #464]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d018      	beq.n	8004c9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c6a:	4b71      	ldr	r3, [pc, #452]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f003 0203 	and.w	r2, r3, #3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d10d      	bne.n	8004c96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
       ||
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c82:	4b6b      	ldr	r3, [pc, #428]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	091b      	lsrs	r3, r3, #4
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
       ||
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d047      	beq.n	8004d26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	73fb      	strb	r3, [r7, #15]
 8004c9a:	e044      	b.n	8004d26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d018      	beq.n	8004cd6 <RCCEx_PLLSAI1_Config+0x86>
 8004ca4:	2b03      	cmp	r3, #3
 8004ca6:	d825      	bhi.n	8004cf4 <RCCEx_PLLSAI1_Config+0xa4>
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d002      	beq.n	8004cb2 <RCCEx_PLLSAI1_Config+0x62>
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d009      	beq.n	8004cc4 <RCCEx_PLLSAI1_Config+0x74>
 8004cb0:	e020      	b.n	8004cf4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cb2:	4b5f      	ldr	r3, [pc, #380]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d11d      	bne.n	8004cfa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cc2:	e01a      	b.n	8004cfa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cc4:	4b5a      	ldr	r3, [pc, #360]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d116      	bne.n	8004cfe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cd4:	e013      	b.n	8004cfe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cd6:	4b56      	ldr	r3, [pc, #344]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10f      	bne.n	8004d02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ce2:	4b53      	ldr	r3, [pc, #332]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d109      	bne.n	8004d02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cf2:	e006      	b.n	8004d02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf8:	e004      	b.n	8004d04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cfa:	bf00      	nop
 8004cfc:	e002      	b.n	8004d04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cfe:	bf00      	nop
 8004d00:	e000      	b.n	8004d04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d02:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10d      	bne.n	8004d26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d0a:	4b49      	ldr	r3, [pc, #292]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6819      	ldr	r1, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	4943      	ldr	r1, [pc, #268]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d17c      	bne.n	8004e26 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d2c:	4b40      	ldr	r3, [pc, #256]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a3f      	ldr	r2, [pc, #252]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d38:	f7fd f846 	bl	8001dc8 <HAL_GetTick>
 8004d3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d3e:	e009      	b.n	8004d54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d40:	f7fd f842 	bl	8001dc8 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d902      	bls.n	8004d54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	73fb      	strb	r3, [r7, #15]
        break;
 8004d52:	e005      	b.n	8004d60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d54:	4b36      	ldr	r3, [pc, #216]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1ef      	bne.n	8004d40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d15f      	bne.n	8004e26 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d110      	bne.n	8004d8e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d6c:	4b30      	ldr	r3, [pc, #192]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004d74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6892      	ldr	r2, [r2, #8]
 8004d7c:	0211      	lsls	r1, r2, #8
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	68d2      	ldr	r2, [r2, #12]
 8004d82:	06d2      	lsls	r2, r2, #27
 8004d84:	430a      	orrs	r2, r1
 8004d86:	492a      	ldr	r1, [pc, #168]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	610b      	str	r3, [r1, #16]
 8004d8c:	e027      	b.n	8004dde <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d112      	bne.n	8004dba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d94:	4b26      	ldr	r3, [pc, #152]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6892      	ldr	r2, [r2, #8]
 8004da4:	0211      	lsls	r1, r2, #8
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6912      	ldr	r2, [r2, #16]
 8004daa:	0852      	lsrs	r2, r2, #1
 8004dac:	3a01      	subs	r2, #1
 8004dae:	0552      	lsls	r2, r2, #21
 8004db0:	430a      	orrs	r2, r1
 8004db2:	491f      	ldr	r1, [pc, #124]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	610b      	str	r3, [r1, #16]
 8004db8:	e011      	b.n	8004dde <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dba:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004dc2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6892      	ldr	r2, [r2, #8]
 8004dca:	0211      	lsls	r1, r2, #8
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6952      	ldr	r2, [r2, #20]
 8004dd0:	0852      	lsrs	r2, r2, #1
 8004dd2:	3a01      	subs	r2, #1
 8004dd4:	0652      	lsls	r2, r2, #25
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	4915      	ldr	r1, [pc, #84]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004dde:	4b14      	ldr	r3, [pc, #80]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a13      	ldr	r2, [pc, #76]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004de4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004de8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dea:	f7fc ffed 	bl	8001dc8 <HAL_GetTick>
 8004dee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004df0:	e009      	b.n	8004e06 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004df2:	f7fc ffe9 	bl	8001dc8 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d902      	bls.n	8004e06 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	73fb      	strb	r3, [r7, #15]
          break;
 8004e04:	e005      	b.n	8004e12 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e06:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0ef      	beq.n	8004df2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d106      	bne.n	8004e26 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	4903      	ldr	r1, [pc, #12]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40021000 	.word	0x40021000

08004e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e040      	b.n	8004ec8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7fc feba 	bl	8001bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2224      	movs	r2, #36	; 0x24
 8004e60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0201 	bic.w	r2, r2, #1
 8004e70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fade 	bl	800543c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f8af 	bl	8004fe4 <UART_SetConfig>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e01b      	b.n	8004ec8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0201 	orr.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 fb5d 	bl	8005580 <UART_CheckIdleState>
 8004ec6:	4603      	mov	r3, r0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08a      	sub	sp, #40	; 0x28
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	4613      	mov	r3, r2
 8004ede:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d178      	bne.n	8004fda <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <HAL_UART_Transmit+0x24>
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e071      	b.n	8004fdc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2221      	movs	r2, #33	; 0x21
 8004f04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f06:	f7fc ff5f 	bl	8001dc8 <HAL_GetTick>
 8004f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	88fa      	ldrh	r2, [r7, #6]
 8004f18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f24:	d108      	bne.n	8004f38 <HAL_UART_Transmit+0x68>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d104      	bne.n	8004f38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	e003      	b.n	8004f40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f40:	e030      	b.n	8004fa4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2180      	movs	r1, #128	; 0x80
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 fbbf 	bl	80056d0 <UART_WaitOnFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d004      	beq.n	8004f62 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e03c      	b.n	8004fdc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10b      	bne.n	8004f80 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	881a      	ldrh	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f74:	b292      	uxth	r2, r2
 8004f76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	3302      	adds	r3, #2
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	e008      	b.n	8004f92 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	781a      	ldrb	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	b292      	uxth	r2, r2
 8004f8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1c8      	bne.n	8004f42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2140      	movs	r1, #64	; 0x40
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 fb88 	bl	80056d0 <UART_WaitOnFlagUntilTimeout>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d004      	beq.n	8004fd0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e005      	b.n	8004fdc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e000      	b.n	8004fdc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004fda:	2302      	movs	r3, #2
  }
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3720      	adds	r7, #32
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe8:	b08a      	sub	sp, #40	; 0x28
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	431a      	orrs	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	4313      	orrs	r3, r2
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4bb4      	ldr	r3, [pc, #720]	; (80052e4 <UART_SetConfig+0x300>)
 8005014:	4013      	ands	r3, r2
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800501c:	430b      	orrs	r3, r1
 800501e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4aa9      	ldr	r2, [pc, #676]	; (80052e8 <UART_SetConfig+0x304>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504c:	4313      	orrs	r3, r2
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005060:	430a      	orrs	r2, r1
 8005062:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4aa0      	ldr	r2, [pc, #640]	; (80052ec <UART_SetConfig+0x308>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d126      	bne.n	80050bc <UART_SetConfig+0xd8>
 800506e:	4ba0      	ldr	r3, [pc, #640]	; (80052f0 <UART_SetConfig+0x30c>)
 8005070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	2b03      	cmp	r3, #3
 800507a:	d81b      	bhi.n	80050b4 <UART_SetConfig+0xd0>
 800507c:	a201      	add	r2, pc, #4	; (adr r2, 8005084 <UART_SetConfig+0xa0>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	08005095 	.word	0x08005095
 8005088:	080050a5 	.word	0x080050a5
 800508c:	0800509d 	.word	0x0800509d
 8005090:	080050ad 	.word	0x080050ad
 8005094:	2301      	movs	r3, #1
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509a:	e080      	b.n	800519e <UART_SetConfig+0x1ba>
 800509c:	2302      	movs	r3, #2
 800509e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a2:	e07c      	b.n	800519e <UART_SetConfig+0x1ba>
 80050a4:	2304      	movs	r3, #4
 80050a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050aa:	e078      	b.n	800519e <UART_SetConfig+0x1ba>
 80050ac:	2308      	movs	r3, #8
 80050ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b2:	e074      	b.n	800519e <UART_SetConfig+0x1ba>
 80050b4:	2310      	movs	r3, #16
 80050b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ba:	e070      	b.n	800519e <UART_SetConfig+0x1ba>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a8c      	ldr	r2, [pc, #560]	; (80052f4 <UART_SetConfig+0x310>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d138      	bne.n	8005138 <UART_SetConfig+0x154>
 80050c6:	4b8a      	ldr	r3, [pc, #552]	; (80052f0 <UART_SetConfig+0x30c>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050cc:	f003 030c 	and.w	r3, r3, #12
 80050d0:	2b0c      	cmp	r3, #12
 80050d2:	d82d      	bhi.n	8005130 <UART_SetConfig+0x14c>
 80050d4:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <UART_SetConfig+0xf8>)
 80050d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050da:	bf00      	nop
 80050dc:	08005111 	.word	0x08005111
 80050e0:	08005131 	.word	0x08005131
 80050e4:	08005131 	.word	0x08005131
 80050e8:	08005131 	.word	0x08005131
 80050ec:	08005121 	.word	0x08005121
 80050f0:	08005131 	.word	0x08005131
 80050f4:	08005131 	.word	0x08005131
 80050f8:	08005131 	.word	0x08005131
 80050fc:	08005119 	.word	0x08005119
 8005100:	08005131 	.word	0x08005131
 8005104:	08005131 	.word	0x08005131
 8005108:	08005131 	.word	0x08005131
 800510c:	08005129 	.word	0x08005129
 8005110:	2300      	movs	r3, #0
 8005112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005116:	e042      	b.n	800519e <UART_SetConfig+0x1ba>
 8005118:	2302      	movs	r3, #2
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511e:	e03e      	b.n	800519e <UART_SetConfig+0x1ba>
 8005120:	2304      	movs	r3, #4
 8005122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005126:	e03a      	b.n	800519e <UART_SetConfig+0x1ba>
 8005128:	2308      	movs	r3, #8
 800512a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512e:	e036      	b.n	800519e <UART_SetConfig+0x1ba>
 8005130:	2310      	movs	r3, #16
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005136:	e032      	b.n	800519e <UART_SetConfig+0x1ba>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a6a      	ldr	r2, [pc, #424]	; (80052e8 <UART_SetConfig+0x304>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d12a      	bne.n	8005198 <UART_SetConfig+0x1b4>
 8005142:	4b6b      	ldr	r3, [pc, #428]	; (80052f0 <UART_SetConfig+0x30c>)
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005148:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800514c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005150:	d01a      	beq.n	8005188 <UART_SetConfig+0x1a4>
 8005152:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005156:	d81b      	bhi.n	8005190 <UART_SetConfig+0x1ac>
 8005158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515c:	d00c      	beq.n	8005178 <UART_SetConfig+0x194>
 800515e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005162:	d815      	bhi.n	8005190 <UART_SetConfig+0x1ac>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <UART_SetConfig+0x18c>
 8005168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516c:	d008      	beq.n	8005180 <UART_SetConfig+0x19c>
 800516e:	e00f      	b.n	8005190 <UART_SetConfig+0x1ac>
 8005170:	2300      	movs	r3, #0
 8005172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005176:	e012      	b.n	800519e <UART_SetConfig+0x1ba>
 8005178:	2302      	movs	r3, #2
 800517a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517e:	e00e      	b.n	800519e <UART_SetConfig+0x1ba>
 8005180:	2304      	movs	r3, #4
 8005182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005186:	e00a      	b.n	800519e <UART_SetConfig+0x1ba>
 8005188:	2308      	movs	r3, #8
 800518a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518e:	e006      	b.n	800519e <UART_SetConfig+0x1ba>
 8005190:	2310      	movs	r3, #16
 8005192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005196:	e002      	b.n	800519e <UART_SetConfig+0x1ba>
 8005198:	2310      	movs	r3, #16
 800519a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a51      	ldr	r2, [pc, #324]	; (80052e8 <UART_SetConfig+0x304>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d17a      	bne.n	800529e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d824      	bhi.n	80051fa <UART_SetConfig+0x216>
 80051b0:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <UART_SetConfig+0x1d4>)
 80051b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b6:	bf00      	nop
 80051b8:	080051dd 	.word	0x080051dd
 80051bc:	080051fb 	.word	0x080051fb
 80051c0:	080051e5 	.word	0x080051e5
 80051c4:	080051fb 	.word	0x080051fb
 80051c8:	080051eb 	.word	0x080051eb
 80051cc:	080051fb 	.word	0x080051fb
 80051d0:	080051fb 	.word	0x080051fb
 80051d4:	080051fb 	.word	0x080051fb
 80051d8:	080051f3 	.word	0x080051f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051dc:	f7ff fab6 	bl	800474c <HAL_RCC_GetPCLK1Freq>
 80051e0:	61f8      	str	r0, [r7, #28]
        break;
 80051e2:	e010      	b.n	8005206 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e4:	4b44      	ldr	r3, [pc, #272]	; (80052f8 <UART_SetConfig+0x314>)
 80051e6:	61fb      	str	r3, [r7, #28]
        break;
 80051e8:	e00d      	b.n	8005206 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ea:	f7ff fa17 	bl	800461c <HAL_RCC_GetSysClockFreq>
 80051ee:	61f8      	str	r0, [r7, #28]
        break;
 80051f0:	e009      	b.n	8005206 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051f6:	61fb      	str	r3, [r7, #28]
        break;
 80051f8:	e005      	b.n	8005206 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005204:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 8107 	beq.w	800541c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	4413      	add	r3, r2
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	429a      	cmp	r2, r3
 800521c:	d305      	bcc.n	800522a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	429a      	cmp	r2, r3
 8005228:	d903      	bls.n	8005232 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005230:	e0f4      	b.n	800541c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	2200      	movs	r2, #0
 8005236:	461c      	mov	r4, r3
 8005238:	4615      	mov	r5, r2
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	022b      	lsls	r3, r5, #8
 8005244:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005248:	0222      	lsls	r2, r4, #8
 800524a:	68f9      	ldr	r1, [r7, #12]
 800524c:	6849      	ldr	r1, [r1, #4]
 800524e:	0849      	lsrs	r1, r1, #1
 8005250:	2000      	movs	r0, #0
 8005252:	4688      	mov	r8, r1
 8005254:	4681      	mov	r9, r0
 8005256:	eb12 0a08 	adds.w	sl, r2, r8
 800525a:	eb43 0b09 	adc.w	fp, r3, r9
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	603b      	str	r3, [r7, #0]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800526c:	4650      	mov	r0, sl
 800526e:	4659      	mov	r1, fp
 8005270:	f7fb fc9a 	bl	8000ba8 <__aeabi_uldivmod>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4613      	mov	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005282:	d308      	bcc.n	8005296 <UART_SetConfig+0x2b2>
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800528a:	d204      	bcs.n	8005296 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	60da      	str	r2, [r3, #12]
 8005294:	e0c2      	b.n	800541c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800529c:	e0be      	b.n	800541c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a6:	d16a      	bne.n	800537e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80052a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d834      	bhi.n	800531a <UART_SetConfig+0x336>
 80052b0:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <UART_SetConfig+0x2d4>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	080052dd 	.word	0x080052dd
 80052bc:	080052fd 	.word	0x080052fd
 80052c0:	08005305 	.word	0x08005305
 80052c4:	0800531b 	.word	0x0800531b
 80052c8:	0800530b 	.word	0x0800530b
 80052cc:	0800531b 	.word	0x0800531b
 80052d0:	0800531b 	.word	0x0800531b
 80052d4:	0800531b 	.word	0x0800531b
 80052d8:	08005313 	.word	0x08005313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052dc:	f7ff fa36 	bl	800474c <HAL_RCC_GetPCLK1Freq>
 80052e0:	61f8      	str	r0, [r7, #28]
        break;
 80052e2:	e020      	b.n	8005326 <UART_SetConfig+0x342>
 80052e4:	efff69f3 	.word	0xefff69f3
 80052e8:	40008000 	.word	0x40008000
 80052ec:	40013800 	.word	0x40013800
 80052f0:	40021000 	.word	0x40021000
 80052f4:	40004400 	.word	0x40004400
 80052f8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052fc:	f7ff fa3c 	bl	8004778 <HAL_RCC_GetPCLK2Freq>
 8005300:	61f8      	str	r0, [r7, #28]
        break;
 8005302:	e010      	b.n	8005326 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005304:	4b4c      	ldr	r3, [pc, #304]	; (8005438 <UART_SetConfig+0x454>)
 8005306:	61fb      	str	r3, [r7, #28]
        break;
 8005308:	e00d      	b.n	8005326 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800530a:	f7ff f987 	bl	800461c <HAL_RCC_GetSysClockFreq>
 800530e:	61f8      	str	r0, [r7, #28]
        break;
 8005310:	e009      	b.n	8005326 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005316:	61fb      	str	r3, [r7, #28]
        break;
 8005318:	e005      	b.n	8005326 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005324:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d077      	beq.n	800541c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	005a      	lsls	r2, r3, #1
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	441a      	add	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005340:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2b0f      	cmp	r3, #15
 8005346:	d916      	bls.n	8005376 <UART_SetConfig+0x392>
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800534e:	d212      	bcs.n	8005376 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	b29b      	uxth	r3, r3
 8005354:	f023 030f 	bic.w	r3, r3, #15
 8005358:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	085b      	lsrs	r3, r3, #1
 800535e:	b29b      	uxth	r3, r3
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	b29a      	uxth	r2, r3
 8005366:	8afb      	ldrh	r3, [r7, #22]
 8005368:	4313      	orrs	r3, r2
 800536a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	8afa      	ldrh	r2, [r7, #22]
 8005372:	60da      	str	r2, [r3, #12]
 8005374:	e052      	b.n	800541c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800537c:	e04e      	b.n	800541c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800537e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005382:	2b08      	cmp	r3, #8
 8005384:	d827      	bhi.n	80053d6 <UART_SetConfig+0x3f2>
 8005386:	a201      	add	r2, pc, #4	; (adr r2, 800538c <UART_SetConfig+0x3a8>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	080053b1 	.word	0x080053b1
 8005390:	080053b9 	.word	0x080053b9
 8005394:	080053c1 	.word	0x080053c1
 8005398:	080053d7 	.word	0x080053d7
 800539c:	080053c7 	.word	0x080053c7
 80053a0:	080053d7 	.word	0x080053d7
 80053a4:	080053d7 	.word	0x080053d7
 80053a8:	080053d7 	.word	0x080053d7
 80053ac:	080053cf 	.word	0x080053cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b0:	f7ff f9cc 	bl	800474c <HAL_RCC_GetPCLK1Freq>
 80053b4:	61f8      	str	r0, [r7, #28]
        break;
 80053b6:	e014      	b.n	80053e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053b8:	f7ff f9de 	bl	8004778 <HAL_RCC_GetPCLK2Freq>
 80053bc:	61f8      	str	r0, [r7, #28]
        break;
 80053be:	e010      	b.n	80053e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c0:	4b1d      	ldr	r3, [pc, #116]	; (8005438 <UART_SetConfig+0x454>)
 80053c2:	61fb      	str	r3, [r7, #28]
        break;
 80053c4:	e00d      	b.n	80053e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053c6:	f7ff f929 	bl	800461c <HAL_RCC_GetSysClockFreq>
 80053ca:	61f8      	str	r0, [r7, #28]
        break;
 80053cc:	e009      	b.n	80053e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d2:	61fb      	str	r3, [r7, #28]
        break;
 80053d4:	e005      	b.n	80053e2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053e0:	bf00      	nop
    }

    if (pclk != 0U)
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d019      	beq.n	800541c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	085a      	lsrs	r2, r3, #1
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	441a      	add	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b0f      	cmp	r3, #15
 8005400:	d909      	bls.n	8005416 <UART_SetConfig+0x432>
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005408:	d205      	bcs.n	8005416 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60da      	str	r2, [r3, #12]
 8005414:	e002      	b.n	800541c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005428:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800542c:	4618      	mov	r0, r3
 800542e:	3728      	adds	r7, #40	; 0x28
 8005430:	46bd      	mov	sp, r7
 8005432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005436:	bf00      	nop
 8005438:	00f42400 	.word	0x00f42400

0800543c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00a      	beq.n	80054cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01a      	beq.n	8005552 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800553a:	d10a      	bne.n	8005552 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	605a      	str	r2, [r3, #4]
  }
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b098      	sub	sp, #96	; 0x60
 8005584:	af02      	add	r7, sp, #8
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005590:	f7fc fc1a 	bl	8001dc8 <HAL_GetTick>
 8005594:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d12e      	bne.n	8005602 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ac:	2200      	movs	r2, #0
 80055ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f88c 	bl	80056d0 <UART_WaitOnFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d021      	beq.n	8005602 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d2:	653b      	str	r3, [r7, #80]	; 0x50
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055dc:	647b      	str	r3, [r7, #68]	; 0x44
 80055de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e6      	bne.n	80055be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2220      	movs	r2, #32
 80055f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e062      	b.n	80056c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b04      	cmp	r3, #4
 800560e:	d149      	bne.n	80056a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005618:	2200      	movs	r2, #0
 800561a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f856 	bl	80056d0 <UART_WaitOnFlagUntilTimeout>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d03c      	beq.n	80056a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	623b      	str	r3, [r7, #32]
   return(result);
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800563e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005648:	633b      	str	r3, [r7, #48]	; 0x30
 800564a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800564e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e6      	bne.n	800562a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3308      	adds	r3, #8
 8005662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	60fb      	str	r3, [r7, #12]
   return(result);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 0301 	bic.w	r3, r3, #1
 8005672:	64bb      	str	r3, [r7, #72]	; 0x48
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3308      	adds	r3, #8
 800567a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800567c:	61fa      	str	r2, [r7, #28]
 800567e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	69b9      	ldr	r1, [r7, #24]
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	617b      	str	r3, [r7, #20]
   return(result);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e5      	bne.n	800565c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e011      	b.n	80056c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3758      	adds	r7, #88	; 0x58
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	603b      	str	r3, [r7, #0]
 80056dc:	4613      	mov	r3, r2
 80056de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e0:	e049      	b.n	8005776 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e8:	d045      	beq.n	8005776 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ea:	f7fc fb6d 	bl	8001dc8 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d302      	bcc.n	8005700 <UART_WaitOnFlagUntilTimeout+0x30>
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e048      	b.n	8005796 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b00      	cmp	r3, #0
 8005710:	d031      	beq.n	8005776 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b08      	cmp	r3, #8
 800571e:	d110      	bne.n	8005742 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2208      	movs	r2, #8
 8005726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f838 	bl	800579e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2208      	movs	r2, #8
 8005732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e029      	b.n	8005796 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800574c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005750:	d111      	bne.n	8005776 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800575a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 f81e 	bl	800579e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2220      	movs	r2, #32
 8005766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e00f      	b.n	8005796 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69da      	ldr	r2, [r3, #28]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4013      	ands	r3, r2
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	429a      	cmp	r2, r3
 8005784:	bf0c      	ite	eq
 8005786:	2301      	moveq	r3, #1
 8005788:	2300      	movne	r3, #0
 800578a:	b2db      	uxtb	r3, r3
 800578c:	461a      	mov	r2, r3
 800578e:	79fb      	ldrb	r3, [r7, #7]
 8005790:	429a      	cmp	r2, r3
 8005792:	d0a6      	beq.n	80056e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800579e:	b480      	push	{r7}
 80057a0:	b095      	sub	sp, #84	; 0x54
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	461a      	mov	r2, r3
 80057c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c4:	643b      	str	r3, [r7, #64]	; 0x40
 80057c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e6      	bne.n	80057a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3308      	adds	r3, #8
 80057de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f023 0301 	bic.w	r3, r3, #1
 80057ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3308      	adds	r3, #8
 80057f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e5      	bne.n	80057d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005810:	2b01      	cmp	r3, #1
 8005812:	d118      	bne.n	8005846 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	60bb      	str	r3, [r7, #8]
   return(result);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f023 0310 	bic.w	r3, r3, #16
 8005828:	647b      	str	r3, [r7, #68]	; 0x44
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6979      	ldr	r1, [r7, #20]
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	613b      	str	r3, [r7, #16]
   return(result);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e6      	bne.n	8005814 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	669a      	str	r2, [r3, #104]	; 0x68
}
 800585a:	bf00      	nop
 800585c:	3754      	adds	r7, #84	; 0x54
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <__cvt>:
 8005866:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800586a:	ec55 4b10 	vmov	r4, r5, d0
 800586e:	2d00      	cmp	r5, #0
 8005870:	460e      	mov	r6, r1
 8005872:	4619      	mov	r1, r3
 8005874:	462b      	mov	r3, r5
 8005876:	bfbb      	ittet	lt
 8005878:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800587c:	461d      	movlt	r5, r3
 800587e:	2300      	movge	r3, #0
 8005880:	232d      	movlt	r3, #45	; 0x2d
 8005882:	700b      	strb	r3, [r1, #0]
 8005884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005886:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800588a:	4691      	mov	r9, r2
 800588c:	f023 0820 	bic.w	r8, r3, #32
 8005890:	bfbc      	itt	lt
 8005892:	4622      	movlt	r2, r4
 8005894:	4614      	movlt	r4, r2
 8005896:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800589a:	d005      	beq.n	80058a8 <__cvt+0x42>
 800589c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058a0:	d100      	bne.n	80058a4 <__cvt+0x3e>
 80058a2:	3601      	adds	r6, #1
 80058a4:	2102      	movs	r1, #2
 80058a6:	e000      	b.n	80058aa <__cvt+0x44>
 80058a8:	2103      	movs	r1, #3
 80058aa:	ab03      	add	r3, sp, #12
 80058ac:	9301      	str	r3, [sp, #4]
 80058ae:	ab02      	add	r3, sp, #8
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	ec45 4b10 	vmov	d0, r4, r5
 80058b6:	4653      	mov	r3, sl
 80058b8:	4632      	mov	r2, r6
 80058ba:	f000 fe69 	bl	8006590 <_dtoa_r>
 80058be:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058c2:	4607      	mov	r7, r0
 80058c4:	d102      	bne.n	80058cc <__cvt+0x66>
 80058c6:	f019 0f01 	tst.w	r9, #1
 80058ca:	d022      	beq.n	8005912 <__cvt+0xac>
 80058cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058d0:	eb07 0906 	add.w	r9, r7, r6
 80058d4:	d110      	bne.n	80058f8 <__cvt+0x92>
 80058d6:	783b      	ldrb	r3, [r7, #0]
 80058d8:	2b30      	cmp	r3, #48	; 0x30
 80058da:	d10a      	bne.n	80058f2 <__cvt+0x8c>
 80058dc:	2200      	movs	r2, #0
 80058de:	2300      	movs	r3, #0
 80058e0:	4620      	mov	r0, r4
 80058e2:	4629      	mov	r1, r5
 80058e4:	f7fb f8f0 	bl	8000ac8 <__aeabi_dcmpeq>
 80058e8:	b918      	cbnz	r0, 80058f2 <__cvt+0x8c>
 80058ea:	f1c6 0601 	rsb	r6, r6, #1
 80058ee:	f8ca 6000 	str.w	r6, [sl]
 80058f2:	f8da 3000 	ldr.w	r3, [sl]
 80058f6:	4499      	add	r9, r3
 80058f8:	2200      	movs	r2, #0
 80058fa:	2300      	movs	r3, #0
 80058fc:	4620      	mov	r0, r4
 80058fe:	4629      	mov	r1, r5
 8005900:	f7fb f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005904:	b108      	cbz	r0, 800590a <__cvt+0xa4>
 8005906:	f8cd 900c 	str.w	r9, [sp, #12]
 800590a:	2230      	movs	r2, #48	; 0x30
 800590c:	9b03      	ldr	r3, [sp, #12]
 800590e:	454b      	cmp	r3, r9
 8005910:	d307      	bcc.n	8005922 <__cvt+0xbc>
 8005912:	9b03      	ldr	r3, [sp, #12]
 8005914:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005916:	1bdb      	subs	r3, r3, r7
 8005918:	4638      	mov	r0, r7
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	b004      	add	sp, #16
 800591e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005922:	1c59      	adds	r1, r3, #1
 8005924:	9103      	str	r1, [sp, #12]
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	e7f0      	b.n	800590c <__cvt+0xa6>

0800592a <__exponent>:
 800592a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800592c:	4603      	mov	r3, r0
 800592e:	2900      	cmp	r1, #0
 8005930:	bfb8      	it	lt
 8005932:	4249      	neglt	r1, r1
 8005934:	f803 2b02 	strb.w	r2, [r3], #2
 8005938:	bfb4      	ite	lt
 800593a:	222d      	movlt	r2, #45	; 0x2d
 800593c:	222b      	movge	r2, #43	; 0x2b
 800593e:	2909      	cmp	r1, #9
 8005940:	7042      	strb	r2, [r0, #1]
 8005942:	dd2a      	ble.n	800599a <__exponent+0x70>
 8005944:	f10d 0207 	add.w	r2, sp, #7
 8005948:	4617      	mov	r7, r2
 800594a:	260a      	movs	r6, #10
 800594c:	4694      	mov	ip, r2
 800594e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005952:	fb06 1415 	mls	r4, r6, r5, r1
 8005956:	3430      	adds	r4, #48	; 0x30
 8005958:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800595c:	460c      	mov	r4, r1
 800595e:	2c63      	cmp	r4, #99	; 0x63
 8005960:	f102 32ff 	add.w	r2, r2, #4294967295
 8005964:	4629      	mov	r1, r5
 8005966:	dcf1      	bgt.n	800594c <__exponent+0x22>
 8005968:	3130      	adds	r1, #48	; 0x30
 800596a:	f1ac 0402 	sub.w	r4, ip, #2
 800596e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005972:	1c41      	adds	r1, r0, #1
 8005974:	4622      	mov	r2, r4
 8005976:	42ba      	cmp	r2, r7
 8005978:	d30a      	bcc.n	8005990 <__exponent+0x66>
 800597a:	f10d 0209 	add.w	r2, sp, #9
 800597e:	eba2 020c 	sub.w	r2, r2, ip
 8005982:	42bc      	cmp	r4, r7
 8005984:	bf88      	it	hi
 8005986:	2200      	movhi	r2, #0
 8005988:	4413      	add	r3, r2
 800598a:	1a18      	subs	r0, r3, r0
 800598c:	b003      	add	sp, #12
 800598e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005990:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005994:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005998:	e7ed      	b.n	8005976 <__exponent+0x4c>
 800599a:	2330      	movs	r3, #48	; 0x30
 800599c:	3130      	adds	r1, #48	; 0x30
 800599e:	7083      	strb	r3, [r0, #2]
 80059a0:	70c1      	strb	r1, [r0, #3]
 80059a2:	1d03      	adds	r3, r0, #4
 80059a4:	e7f1      	b.n	800598a <__exponent+0x60>
	...

080059a8 <_printf_float>:
 80059a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ac:	ed2d 8b02 	vpush	{d8}
 80059b0:	b08d      	sub	sp, #52	; 0x34
 80059b2:	460c      	mov	r4, r1
 80059b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80059b8:	4616      	mov	r6, r2
 80059ba:	461f      	mov	r7, r3
 80059bc:	4605      	mov	r5, r0
 80059be:	f000 fce7 	bl	8006390 <_localeconv_r>
 80059c2:	f8d0 a000 	ldr.w	sl, [r0]
 80059c6:	4650      	mov	r0, sl
 80059c8:	f7fa fc52 	bl	8000270 <strlen>
 80059cc:	2300      	movs	r3, #0
 80059ce:	930a      	str	r3, [sp, #40]	; 0x28
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	9305      	str	r3, [sp, #20]
 80059d4:	f8d8 3000 	ldr.w	r3, [r8]
 80059d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059dc:	3307      	adds	r3, #7
 80059de:	f023 0307 	bic.w	r3, r3, #7
 80059e2:	f103 0208 	add.w	r2, r3, #8
 80059e6:	f8c8 2000 	str.w	r2, [r8]
 80059ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059f2:	9307      	str	r3, [sp, #28]
 80059f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80059f8:	ee08 0a10 	vmov	s16, r0
 80059fc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005a00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a04:	4b9e      	ldr	r3, [pc, #632]	; (8005c80 <_printf_float+0x2d8>)
 8005a06:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0a:	f7fb f88f 	bl	8000b2c <__aeabi_dcmpun>
 8005a0e:	bb88      	cbnz	r0, 8005a74 <_printf_float+0xcc>
 8005a10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a14:	4b9a      	ldr	r3, [pc, #616]	; (8005c80 <_printf_float+0x2d8>)
 8005a16:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1a:	f7fb f869 	bl	8000af0 <__aeabi_dcmple>
 8005a1e:	bb48      	cbnz	r0, 8005a74 <_printf_float+0xcc>
 8005a20:	2200      	movs	r2, #0
 8005a22:	2300      	movs	r3, #0
 8005a24:	4640      	mov	r0, r8
 8005a26:	4649      	mov	r1, r9
 8005a28:	f7fb f858 	bl	8000adc <__aeabi_dcmplt>
 8005a2c:	b110      	cbz	r0, 8005a34 <_printf_float+0x8c>
 8005a2e:	232d      	movs	r3, #45	; 0x2d
 8005a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a34:	4a93      	ldr	r2, [pc, #588]	; (8005c84 <_printf_float+0x2dc>)
 8005a36:	4b94      	ldr	r3, [pc, #592]	; (8005c88 <_printf_float+0x2e0>)
 8005a38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a3c:	bf94      	ite	ls
 8005a3e:	4690      	movls	r8, r2
 8005a40:	4698      	movhi	r8, r3
 8005a42:	2303      	movs	r3, #3
 8005a44:	6123      	str	r3, [r4, #16]
 8005a46:	9b05      	ldr	r3, [sp, #20]
 8005a48:	f023 0304 	bic.w	r3, r3, #4
 8005a4c:	6023      	str	r3, [r4, #0]
 8005a4e:	f04f 0900 	mov.w	r9, #0
 8005a52:	9700      	str	r7, [sp, #0]
 8005a54:	4633      	mov	r3, r6
 8005a56:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a58:	4621      	mov	r1, r4
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	f000 f9da 	bl	8005e14 <_printf_common>
 8005a60:	3001      	adds	r0, #1
 8005a62:	f040 8090 	bne.w	8005b86 <_printf_float+0x1de>
 8005a66:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6a:	b00d      	add	sp, #52	; 0x34
 8005a6c:	ecbd 8b02 	vpop	{d8}
 8005a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a74:	4642      	mov	r2, r8
 8005a76:	464b      	mov	r3, r9
 8005a78:	4640      	mov	r0, r8
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	f7fb f856 	bl	8000b2c <__aeabi_dcmpun>
 8005a80:	b140      	cbz	r0, 8005a94 <_printf_float+0xec>
 8005a82:	464b      	mov	r3, r9
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	bfbc      	itt	lt
 8005a88:	232d      	movlt	r3, #45	; 0x2d
 8005a8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a8e:	4a7f      	ldr	r2, [pc, #508]	; (8005c8c <_printf_float+0x2e4>)
 8005a90:	4b7f      	ldr	r3, [pc, #508]	; (8005c90 <_printf_float+0x2e8>)
 8005a92:	e7d1      	b.n	8005a38 <_printf_float+0x90>
 8005a94:	6863      	ldr	r3, [r4, #4]
 8005a96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a9a:	9206      	str	r2, [sp, #24]
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	d13f      	bne.n	8005b20 <_printf_float+0x178>
 8005aa0:	2306      	movs	r3, #6
 8005aa2:	6063      	str	r3, [r4, #4]
 8005aa4:	9b05      	ldr	r3, [sp, #20]
 8005aa6:	6861      	ldr	r1, [r4, #4]
 8005aa8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005aac:	2300      	movs	r3, #0
 8005aae:	9303      	str	r3, [sp, #12]
 8005ab0:	ab0a      	add	r3, sp, #40	; 0x28
 8005ab2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ab6:	ab09      	add	r3, sp, #36	; 0x24
 8005ab8:	ec49 8b10 	vmov	d0, r8, r9
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	6022      	str	r2, [r4, #0]
 8005ac0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	f7ff fece 	bl	8005866 <__cvt>
 8005aca:	9b06      	ldr	r3, [sp, #24]
 8005acc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ace:	2b47      	cmp	r3, #71	; 0x47
 8005ad0:	4680      	mov	r8, r0
 8005ad2:	d108      	bne.n	8005ae6 <_printf_float+0x13e>
 8005ad4:	1cc8      	adds	r0, r1, #3
 8005ad6:	db02      	blt.n	8005ade <_printf_float+0x136>
 8005ad8:	6863      	ldr	r3, [r4, #4]
 8005ada:	4299      	cmp	r1, r3
 8005adc:	dd41      	ble.n	8005b62 <_printf_float+0x1ba>
 8005ade:	f1ab 0302 	sub.w	r3, fp, #2
 8005ae2:	fa5f fb83 	uxtb.w	fp, r3
 8005ae6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005aea:	d820      	bhi.n	8005b2e <_printf_float+0x186>
 8005aec:	3901      	subs	r1, #1
 8005aee:	465a      	mov	r2, fp
 8005af0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005af4:	9109      	str	r1, [sp, #36]	; 0x24
 8005af6:	f7ff ff18 	bl	800592a <__exponent>
 8005afa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005afc:	1813      	adds	r3, r2, r0
 8005afe:	2a01      	cmp	r2, #1
 8005b00:	4681      	mov	r9, r0
 8005b02:	6123      	str	r3, [r4, #16]
 8005b04:	dc02      	bgt.n	8005b0c <_printf_float+0x164>
 8005b06:	6822      	ldr	r2, [r4, #0]
 8005b08:	07d2      	lsls	r2, r2, #31
 8005b0a:	d501      	bpl.n	8005b10 <_printf_float+0x168>
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	6123      	str	r3, [r4, #16]
 8005b10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d09c      	beq.n	8005a52 <_printf_float+0xaa>
 8005b18:	232d      	movs	r3, #45	; 0x2d
 8005b1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b1e:	e798      	b.n	8005a52 <_printf_float+0xaa>
 8005b20:	9a06      	ldr	r2, [sp, #24]
 8005b22:	2a47      	cmp	r2, #71	; 0x47
 8005b24:	d1be      	bne.n	8005aa4 <_printf_float+0xfc>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1bc      	bne.n	8005aa4 <_printf_float+0xfc>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e7b9      	b.n	8005aa2 <_printf_float+0xfa>
 8005b2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b32:	d118      	bne.n	8005b66 <_printf_float+0x1be>
 8005b34:	2900      	cmp	r1, #0
 8005b36:	6863      	ldr	r3, [r4, #4]
 8005b38:	dd0b      	ble.n	8005b52 <_printf_float+0x1aa>
 8005b3a:	6121      	str	r1, [r4, #16]
 8005b3c:	b913      	cbnz	r3, 8005b44 <_printf_float+0x19c>
 8005b3e:	6822      	ldr	r2, [r4, #0]
 8005b40:	07d0      	lsls	r0, r2, #31
 8005b42:	d502      	bpl.n	8005b4a <_printf_float+0x1a2>
 8005b44:	3301      	adds	r3, #1
 8005b46:	440b      	add	r3, r1
 8005b48:	6123      	str	r3, [r4, #16]
 8005b4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b4c:	f04f 0900 	mov.w	r9, #0
 8005b50:	e7de      	b.n	8005b10 <_printf_float+0x168>
 8005b52:	b913      	cbnz	r3, 8005b5a <_printf_float+0x1b2>
 8005b54:	6822      	ldr	r2, [r4, #0]
 8005b56:	07d2      	lsls	r2, r2, #31
 8005b58:	d501      	bpl.n	8005b5e <_printf_float+0x1b6>
 8005b5a:	3302      	adds	r3, #2
 8005b5c:	e7f4      	b.n	8005b48 <_printf_float+0x1a0>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e7f2      	b.n	8005b48 <_printf_float+0x1a0>
 8005b62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b68:	4299      	cmp	r1, r3
 8005b6a:	db05      	blt.n	8005b78 <_printf_float+0x1d0>
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	6121      	str	r1, [r4, #16]
 8005b70:	07d8      	lsls	r0, r3, #31
 8005b72:	d5ea      	bpl.n	8005b4a <_printf_float+0x1a2>
 8005b74:	1c4b      	adds	r3, r1, #1
 8005b76:	e7e7      	b.n	8005b48 <_printf_float+0x1a0>
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	bfd4      	ite	le
 8005b7c:	f1c1 0202 	rsble	r2, r1, #2
 8005b80:	2201      	movgt	r2, #1
 8005b82:	4413      	add	r3, r2
 8005b84:	e7e0      	b.n	8005b48 <_printf_float+0x1a0>
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	055a      	lsls	r2, r3, #21
 8005b8a:	d407      	bmi.n	8005b9c <_printf_float+0x1f4>
 8005b8c:	6923      	ldr	r3, [r4, #16]
 8005b8e:	4642      	mov	r2, r8
 8005b90:	4631      	mov	r1, r6
 8005b92:	4628      	mov	r0, r5
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	d12c      	bne.n	8005bf4 <_printf_float+0x24c>
 8005b9a:	e764      	b.n	8005a66 <_printf_float+0xbe>
 8005b9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ba0:	f240 80e0 	bls.w	8005d64 <_printf_float+0x3bc>
 8005ba4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2300      	movs	r3, #0
 8005bac:	f7fa ff8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	d034      	beq.n	8005c1e <_printf_float+0x276>
 8005bb4:	4a37      	ldr	r2, [pc, #220]	; (8005c94 <_printf_float+0x2ec>)
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	4631      	mov	r1, r6
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b8      	blx	r7
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	f43f af51 	beq.w	8005a66 <_printf_float+0xbe>
 8005bc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	db02      	blt.n	8005bd2 <_printf_float+0x22a>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	07d8      	lsls	r0, r3, #31
 8005bd0:	d510      	bpl.n	8005bf4 <_printf_float+0x24c>
 8005bd2:	ee18 3a10 	vmov	r3, s16
 8005bd6:	4652      	mov	r2, sl
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b8      	blx	r7
 8005bde:	3001      	adds	r0, #1
 8005be0:	f43f af41 	beq.w	8005a66 <_printf_float+0xbe>
 8005be4:	f04f 0800 	mov.w	r8, #0
 8005be8:	f104 091a 	add.w	r9, r4, #26
 8005bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	4543      	cmp	r3, r8
 8005bf2:	dc09      	bgt.n	8005c08 <_printf_float+0x260>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	079b      	lsls	r3, r3, #30
 8005bf8:	f100 8107 	bmi.w	8005e0a <_printf_float+0x462>
 8005bfc:	68e0      	ldr	r0, [r4, #12]
 8005bfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c00:	4298      	cmp	r0, r3
 8005c02:	bfb8      	it	lt
 8005c04:	4618      	movlt	r0, r3
 8005c06:	e730      	b.n	8005a6a <_printf_float+0xc2>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	464a      	mov	r2, r9
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	4628      	mov	r0, r5
 8005c10:	47b8      	blx	r7
 8005c12:	3001      	adds	r0, #1
 8005c14:	f43f af27 	beq.w	8005a66 <_printf_float+0xbe>
 8005c18:	f108 0801 	add.w	r8, r8, #1
 8005c1c:	e7e6      	b.n	8005bec <_printf_float+0x244>
 8005c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	dc39      	bgt.n	8005c98 <_printf_float+0x2f0>
 8005c24:	4a1b      	ldr	r2, [pc, #108]	; (8005c94 <_printf_float+0x2ec>)
 8005c26:	2301      	movs	r3, #1
 8005c28:	4631      	mov	r1, r6
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	47b8      	blx	r7
 8005c2e:	3001      	adds	r0, #1
 8005c30:	f43f af19 	beq.w	8005a66 <_printf_float+0xbe>
 8005c34:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	d102      	bne.n	8005c42 <_printf_float+0x29a>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	07d9      	lsls	r1, r3, #31
 8005c40:	d5d8      	bpl.n	8005bf4 <_printf_float+0x24c>
 8005c42:	ee18 3a10 	vmov	r3, s16
 8005c46:	4652      	mov	r2, sl
 8005c48:	4631      	mov	r1, r6
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	47b8      	blx	r7
 8005c4e:	3001      	adds	r0, #1
 8005c50:	f43f af09 	beq.w	8005a66 <_printf_float+0xbe>
 8005c54:	f04f 0900 	mov.w	r9, #0
 8005c58:	f104 0a1a 	add.w	sl, r4, #26
 8005c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c5e:	425b      	negs	r3, r3
 8005c60:	454b      	cmp	r3, r9
 8005c62:	dc01      	bgt.n	8005c68 <_printf_float+0x2c0>
 8005c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c66:	e792      	b.n	8005b8e <_printf_float+0x1e6>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	4652      	mov	r2, sl
 8005c6c:	4631      	mov	r1, r6
 8005c6e:	4628      	mov	r0, r5
 8005c70:	47b8      	blx	r7
 8005c72:	3001      	adds	r0, #1
 8005c74:	f43f aef7 	beq.w	8005a66 <_printf_float+0xbe>
 8005c78:	f109 0901 	add.w	r9, r9, #1
 8005c7c:	e7ee      	b.n	8005c5c <_printf_float+0x2b4>
 8005c7e:	bf00      	nop
 8005c80:	7fefffff 	.word	0x7fefffff
 8005c84:	08008cd8 	.word	0x08008cd8
 8005c88:	08008cdc 	.word	0x08008cdc
 8005c8c:	08008ce0 	.word	0x08008ce0
 8005c90:	08008ce4 	.word	0x08008ce4
 8005c94:	08008ce8 	.word	0x08008ce8
 8005c98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	bfa8      	it	ge
 8005ca0:	461a      	movge	r2, r3
 8005ca2:	2a00      	cmp	r2, #0
 8005ca4:	4691      	mov	r9, r2
 8005ca6:	dc37      	bgt.n	8005d18 <_printf_float+0x370>
 8005ca8:	f04f 0b00 	mov.w	fp, #0
 8005cac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cb0:	f104 021a 	add.w	r2, r4, #26
 8005cb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cb6:	9305      	str	r3, [sp, #20]
 8005cb8:	eba3 0309 	sub.w	r3, r3, r9
 8005cbc:	455b      	cmp	r3, fp
 8005cbe:	dc33      	bgt.n	8005d28 <_printf_float+0x380>
 8005cc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	db3b      	blt.n	8005d40 <_printf_float+0x398>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	07da      	lsls	r2, r3, #31
 8005ccc:	d438      	bmi.n	8005d40 <_printf_float+0x398>
 8005cce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005cd2:	eba2 0903 	sub.w	r9, r2, r3
 8005cd6:	9b05      	ldr	r3, [sp, #20]
 8005cd8:	1ad2      	subs	r2, r2, r3
 8005cda:	4591      	cmp	r9, r2
 8005cdc:	bfa8      	it	ge
 8005cde:	4691      	movge	r9, r2
 8005ce0:	f1b9 0f00 	cmp.w	r9, #0
 8005ce4:	dc35      	bgt.n	8005d52 <_printf_float+0x3aa>
 8005ce6:	f04f 0800 	mov.w	r8, #0
 8005cea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cee:	f104 0a1a 	add.w	sl, r4, #26
 8005cf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cf6:	1a9b      	subs	r3, r3, r2
 8005cf8:	eba3 0309 	sub.w	r3, r3, r9
 8005cfc:	4543      	cmp	r3, r8
 8005cfe:	f77f af79 	ble.w	8005bf4 <_printf_float+0x24c>
 8005d02:	2301      	movs	r3, #1
 8005d04:	4652      	mov	r2, sl
 8005d06:	4631      	mov	r1, r6
 8005d08:	4628      	mov	r0, r5
 8005d0a:	47b8      	blx	r7
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	f43f aeaa 	beq.w	8005a66 <_printf_float+0xbe>
 8005d12:	f108 0801 	add.w	r8, r8, #1
 8005d16:	e7ec      	b.n	8005cf2 <_printf_float+0x34a>
 8005d18:	4613      	mov	r3, r2
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4642      	mov	r2, r8
 8005d1e:	4628      	mov	r0, r5
 8005d20:	47b8      	blx	r7
 8005d22:	3001      	adds	r0, #1
 8005d24:	d1c0      	bne.n	8005ca8 <_printf_float+0x300>
 8005d26:	e69e      	b.n	8005a66 <_printf_float+0xbe>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	9205      	str	r2, [sp, #20]
 8005d30:	47b8      	blx	r7
 8005d32:	3001      	adds	r0, #1
 8005d34:	f43f ae97 	beq.w	8005a66 <_printf_float+0xbe>
 8005d38:	9a05      	ldr	r2, [sp, #20]
 8005d3a:	f10b 0b01 	add.w	fp, fp, #1
 8005d3e:	e7b9      	b.n	8005cb4 <_printf_float+0x30c>
 8005d40:	ee18 3a10 	vmov	r3, s16
 8005d44:	4652      	mov	r2, sl
 8005d46:	4631      	mov	r1, r6
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b8      	blx	r7
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d1be      	bne.n	8005cce <_printf_float+0x326>
 8005d50:	e689      	b.n	8005a66 <_printf_float+0xbe>
 8005d52:	9a05      	ldr	r2, [sp, #20]
 8005d54:	464b      	mov	r3, r9
 8005d56:	4442      	add	r2, r8
 8005d58:	4631      	mov	r1, r6
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	47b8      	blx	r7
 8005d5e:	3001      	adds	r0, #1
 8005d60:	d1c1      	bne.n	8005ce6 <_printf_float+0x33e>
 8005d62:	e680      	b.n	8005a66 <_printf_float+0xbe>
 8005d64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d66:	2a01      	cmp	r2, #1
 8005d68:	dc01      	bgt.n	8005d6e <_printf_float+0x3c6>
 8005d6a:	07db      	lsls	r3, r3, #31
 8005d6c:	d53a      	bpl.n	8005de4 <_printf_float+0x43c>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	4642      	mov	r2, r8
 8005d72:	4631      	mov	r1, r6
 8005d74:	4628      	mov	r0, r5
 8005d76:	47b8      	blx	r7
 8005d78:	3001      	adds	r0, #1
 8005d7a:	f43f ae74 	beq.w	8005a66 <_printf_float+0xbe>
 8005d7e:	ee18 3a10 	vmov	r3, s16
 8005d82:	4652      	mov	r2, sl
 8005d84:	4631      	mov	r1, r6
 8005d86:	4628      	mov	r0, r5
 8005d88:	47b8      	blx	r7
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	f43f ae6b 	beq.w	8005a66 <_printf_float+0xbe>
 8005d90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d94:	2200      	movs	r2, #0
 8005d96:	2300      	movs	r3, #0
 8005d98:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005d9c:	f7fa fe94 	bl	8000ac8 <__aeabi_dcmpeq>
 8005da0:	b9d8      	cbnz	r0, 8005dda <_printf_float+0x432>
 8005da2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005da6:	f108 0201 	add.w	r2, r8, #1
 8005daa:	4631      	mov	r1, r6
 8005dac:	4628      	mov	r0, r5
 8005dae:	47b8      	blx	r7
 8005db0:	3001      	adds	r0, #1
 8005db2:	d10e      	bne.n	8005dd2 <_printf_float+0x42a>
 8005db4:	e657      	b.n	8005a66 <_printf_float+0xbe>
 8005db6:	2301      	movs	r3, #1
 8005db8:	4652      	mov	r2, sl
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	47b8      	blx	r7
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	f43f ae50 	beq.w	8005a66 <_printf_float+0xbe>
 8005dc6:	f108 0801 	add.w	r8, r8, #1
 8005dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	4543      	cmp	r3, r8
 8005dd0:	dcf1      	bgt.n	8005db6 <_printf_float+0x40e>
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005dd8:	e6da      	b.n	8005b90 <_printf_float+0x1e8>
 8005dda:	f04f 0800 	mov.w	r8, #0
 8005dde:	f104 0a1a 	add.w	sl, r4, #26
 8005de2:	e7f2      	b.n	8005dca <_printf_float+0x422>
 8005de4:	2301      	movs	r3, #1
 8005de6:	4642      	mov	r2, r8
 8005de8:	e7df      	b.n	8005daa <_printf_float+0x402>
 8005dea:	2301      	movs	r3, #1
 8005dec:	464a      	mov	r2, r9
 8005dee:	4631      	mov	r1, r6
 8005df0:	4628      	mov	r0, r5
 8005df2:	47b8      	blx	r7
 8005df4:	3001      	adds	r0, #1
 8005df6:	f43f ae36 	beq.w	8005a66 <_printf_float+0xbe>
 8005dfa:	f108 0801 	add.w	r8, r8, #1
 8005dfe:	68e3      	ldr	r3, [r4, #12]
 8005e00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e02:	1a5b      	subs	r3, r3, r1
 8005e04:	4543      	cmp	r3, r8
 8005e06:	dcf0      	bgt.n	8005dea <_printf_float+0x442>
 8005e08:	e6f8      	b.n	8005bfc <_printf_float+0x254>
 8005e0a:	f04f 0800 	mov.w	r8, #0
 8005e0e:	f104 0919 	add.w	r9, r4, #25
 8005e12:	e7f4      	b.n	8005dfe <_printf_float+0x456>

08005e14 <_printf_common>:
 8005e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e18:	4616      	mov	r6, r2
 8005e1a:	4699      	mov	r9, r3
 8005e1c:	688a      	ldr	r2, [r1, #8]
 8005e1e:	690b      	ldr	r3, [r1, #16]
 8005e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e24:	4293      	cmp	r3, r2
 8005e26:	bfb8      	it	lt
 8005e28:	4613      	movlt	r3, r2
 8005e2a:	6033      	str	r3, [r6, #0]
 8005e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e30:	4607      	mov	r7, r0
 8005e32:	460c      	mov	r4, r1
 8005e34:	b10a      	cbz	r2, 8005e3a <_printf_common+0x26>
 8005e36:	3301      	adds	r3, #1
 8005e38:	6033      	str	r3, [r6, #0]
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	0699      	lsls	r1, r3, #26
 8005e3e:	bf42      	ittt	mi
 8005e40:	6833      	ldrmi	r3, [r6, #0]
 8005e42:	3302      	addmi	r3, #2
 8005e44:	6033      	strmi	r3, [r6, #0]
 8005e46:	6825      	ldr	r5, [r4, #0]
 8005e48:	f015 0506 	ands.w	r5, r5, #6
 8005e4c:	d106      	bne.n	8005e5c <_printf_common+0x48>
 8005e4e:	f104 0a19 	add.w	sl, r4, #25
 8005e52:	68e3      	ldr	r3, [r4, #12]
 8005e54:	6832      	ldr	r2, [r6, #0]
 8005e56:	1a9b      	subs	r3, r3, r2
 8005e58:	42ab      	cmp	r3, r5
 8005e5a:	dc26      	bgt.n	8005eaa <_printf_common+0x96>
 8005e5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e60:	1e13      	subs	r3, r2, #0
 8005e62:	6822      	ldr	r2, [r4, #0]
 8005e64:	bf18      	it	ne
 8005e66:	2301      	movne	r3, #1
 8005e68:	0692      	lsls	r2, r2, #26
 8005e6a:	d42b      	bmi.n	8005ec4 <_printf_common+0xb0>
 8005e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e70:	4649      	mov	r1, r9
 8005e72:	4638      	mov	r0, r7
 8005e74:	47c0      	blx	r8
 8005e76:	3001      	adds	r0, #1
 8005e78:	d01e      	beq.n	8005eb8 <_printf_common+0xa4>
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	6922      	ldr	r2, [r4, #16]
 8005e7e:	f003 0306 	and.w	r3, r3, #6
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	bf02      	ittt	eq
 8005e86:	68e5      	ldreq	r5, [r4, #12]
 8005e88:	6833      	ldreq	r3, [r6, #0]
 8005e8a:	1aed      	subeq	r5, r5, r3
 8005e8c:	68a3      	ldr	r3, [r4, #8]
 8005e8e:	bf0c      	ite	eq
 8005e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e94:	2500      	movne	r5, #0
 8005e96:	4293      	cmp	r3, r2
 8005e98:	bfc4      	itt	gt
 8005e9a:	1a9b      	subgt	r3, r3, r2
 8005e9c:	18ed      	addgt	r5, r5, r3
 8005e9e:	2600      	movs	r6, #0
 8005ea0:	341a      	adds	r4, #26
 8005ea2:	42b5      	cmp	r5, r6
 8005ea4:	d11a      	bne.n	8005edc <_printf_common+0xc8>
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	e008      	b.n	8005ebc <_printf_common+0xa8>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	4652      	mov	r2, sl
 8005eae:	4649      	mov	r1, r9
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	47c0      	blx	r8
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d103      	bne.n	8005ec0 <_printf_common+0xac>
 8005eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec0:	3501      	adds	r5, #1
 8005ec2:	e7c6      	b.n	8005e52 <_printf_common+0x3e>
 8005ec4:	18e1      	adds	r1, r4, r3
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	2030      	movs	r0, #48	; 0x30
 8005eca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ece:	4422      	add	r2, r4
 8005ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ed4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ed8:	3302      	adds	r3, #2
 8005eda:	e7c7      	b.n	8005e6c <_printf_common+0x58>
 8005edc:	2301      	movs	r3, #1
 8005ede:	4622      	mov	r2, r4
 8005ee0:	4649      	mov	r1, r9
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	47c0      	blx	r8
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	d0e6      	beq.n	8005eb8 <_printf_common+0xa4>
 8005eea:	3601      	adds	r6, #1
 8005eec:	e7d9      	b.n	8005ea2 <_printf_common+0x8e>
	...

08005ef0 <_printf_i>:
 8005ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef4:	7e0f      	ldrb	r7, [r1, #24]
 8005ef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ef8:	2f78      	cmp	r7, #120	; 0x78
 8005efa:	4691      	mov	r9, r2
 8005efc:	4680      	mov	r8, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	469a      	mov	sl, r3
 8005f02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f06:	d807      	bhi.n	8005f18 <_printf_i+0x28>
 8005f08:	2f62      	cmp	r7, #98	; 0x62
 8005f0a:	d80a      	bhi.n	8005f22 <_printf_i+0x32>
 8005f0c:	2f00      	cmp	r7, #0
 8005f0e:	f000 80d4 	beq.w	80060ba <_printf_i+0x1ca>
 8005f12:	2f58      	cmp	r7, #88	; 0x58
 8005f14:	f000 80c0 	beq.w	8006098 <_printf_i+0x1a8>
 8005f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f20:	e03a      	b.n	8005f98 <_printf_i+0xa8>
 8005f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f26:	2b15      	cmp	r3, #21
 8005f28:	d8f6      	bhi.n	8005f18 <_printf_i+0x28>
 8005f2a:	a101      	add	r1, pc, #4	; (adr r1, 8005f30 <_printf_i+0x40>)
 8005f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f30:	08005f89 	.word	0x08005f89
 8005f34:	08005f9d 	.word	0x08005f9d
 8005f38:	08005f19 	.word	0x08005f19
 8005f3c:	08005f19 	.word	0x08005f19
 8005f40:	08005f19 	.word	0x08005f19
 8005f44:	08005f19 	.word	0x08005f19
 8005f48:	08005f9d 	.word	0x08005f9d
 8005f4c:	08005f19 	.word	0x08005f19
 8005f50:	08005f19 	.word	0x08005f19
 8005f54:	08005f19 	.word	0x08005f19
 8005f58:	08005f19 	.word	0x08005f19
 8005f5c:	080060a1 	.word	0x080060a1
 8005f60:	08005fc9 	.word	0x08005fc9
 8005f64:	0800605b 	.word	0x0800605b
 8005f68:	08005f19 	.word	0x08005f19
 8005f6c:	08005f19 	.word	0x08005f19
 8005f70:	080060c3 	.word	0x080060c3
 8005f74:	08005f19 	.word	0x08005f19
 8005f78:	08005fc9 	.word	0x08005fc9
 8005f7c:	08005f19 	.word	0x08005f19
 8005f80:	08005f19 	.word	0x08005f19
 8005f84:	08006063 	.word	0x08006063
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	1d1a      	adds	r2, r3, #4
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	602a      	str	r2, [r5, #0]
 8005f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e09f      	b.n	80060dc <_printf_i+0x1ec>
 8005f9c:	6820      	ldr	r0, [r4, #0]
 8005f9e:	682b      	ldr	r3, [r5, #0]
 8005fa0:	0607      	lsls	r7, r0, #24
 8005fa2:	f103 0104 	add.w	r1, r3, #4
 8005fa6:	6029      	str	r1, [r5, #0]
 8005fa8:	d501      	bpl.n	8005fae <_printf_i+0xbe>
 8005faa:	681e      	ldr	r6, [r3, #0]
 8005fac:	e003      	b.n	8005fb6 <_printf_i+0xc6>
 8005fae:	0646      	lsls	r6, r0, #25
 8005fb0:	d5fb      	bpl.n	8005faa <_printf_i+0xba>
 8005fb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005fb6:	2e00      	cmp	r6, #0
 8005fb8:	da03      	bge.n	8005fc2 <_printf_i+0xd2>
 8005fba:	232d      	movs	r3, #45	; 0x2d
 8005fbc:	4276      	negs	r6, r6
 8005fbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fc2:	485a      	ldr	r0, [pc, #360]	; (800612c <_printf_i+0x23c>)
 8005fc4:	230a      	movs	r3, #10
 8005fc6:	e012      	b.n	8005fee <_printf_i+0xfe>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	6820      	ldr	r0, [r4, #0]
 8005fcc:	1d19      	adds	r1, r3, #4
 8005fce:	6029      	str	r1, [r5, #0]
 8005fd0:	0605      	lsls	r5, r0, #24
 8005fd2:	d501      	bpl.n	8005fd8 <_printf_i+0xe8>
 8005fd4:	681e      	ldr	r6, [r3, #0]
 8005fd6:	e002      	b.n	8005fde <_printf_i+0xee>
 8005fd8:	0641      	lsls	r1, r0, #25
 8005fda:	d5fb      	bpl.n	8005fd4 <_printf_i+0xe4>
 8005fdc:	881e      	ldrh	r6, [r3, #0]
 8005fde:	4853      	ldr	r0, [pc, #332]	; (800612c <_printf_i+0x23c>)
 8005fe0:	2f6f      	cmp	r7, #111	; 0x6f
 8005fe2:	bf0c      	ite	eq
 8005fe4:	2308      	moveq	r3, #8
 8005fe6:	230a      	movne	r3, #10
 8005fe8:	2100      	movs	r1, #0
 8005fea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fee:	6865      	ldr	r5, [r4, #4]
 8005ff0:	60a5      	str	r5, [r4, #8]
 8005ff2:	2d00      	cmp	r5, #0
 8005ff4:	bfa2      	ittt	ge
 8005ff6:	6821      	ldrge	r1, [r4, #0]
 8005ff8:	f021 0104 	bicge.w	r1, r1, #4
 8005ffc:	6021      	strge	r1, [r4, #0]
 8005ffe:	b90e      	cbnz	r6, 8006004 <_printf_i+0x114>
 8006000:	2d00      	cmp	r5, #0
 8006002:	d04b      	beq.n	800609c <_printf_i+0x1ac>
 8006004:	4615      	mov	r5, r2
 8006006:	fbb6 f1f3 	udiv	r1, r6, r3
 800600a:	fb03 6711 	mls	r7, r3, r1, r6
 800600e:	5dc7      	ldrb	r7, [r0, r7]
 8006010:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006014:	4637      	mov	r7, r6
 8006016:	42bb      	cmp	r3, r7
 8006018:	460e      	mov	r6, r1
 800601a:	d9f4      	bls.n	8006006 <_printf_i+0x116>
 800601c:	2b08      	cmp	r3, #8
 800601e:	d10b      	bne.n	8006038 <_printf_i+0x148>
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	07de      	lsls	r6, r3, #31
 8006024:	d508      	bpl.n	8006038 <_printf_i+0x148>
 8006026:	6923      	ldr	r3, [r4, #16]
 8006028:	6861      	ldr	r1, [r4, #4]
 800602a:	4299      	cmp	r1, r3
 800602c:	bfde      	ittt	le
 800602e:	2330      	movle	r3, #48	; 0x30
 8006030:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006034:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006038:	1b52      	subs	r2, r2, r5
 800603a:	6122      	str	r2, [r4, #16]
 800603c:	f8cd a000 	str.w	sl, [sp]
 8006040:	464b      	mov	r3, r9
 8006042:	aa03      	add	r2, sp, #12
 8006044:	4621      	mov	r1, r4
 8006046:	4640      	mov	r0, r8
 8006048:	f7ff fee4 	bl	8005e14 <_printf_common>
 800604c:	3001      	adds	r0, #1
 800604e:	d14a      	bne.n	80060e6 <_printf_i+0x1f6>
 8006050:	f04f 30ff 	mov.w	r0, #4294967295
 8006054:	b004      	add	sp, #16
 8006056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	f043 0320 	orr.w	r3, r3, #32
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	4833      	ldr	r0, [pc, #204]	; (8006130 <_printf_i+0x240>)
 8006064:	2778      	movs	r7, #120	; 0x78
 8006066:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	6829      	ldr	r1, [r5, #0]
 800606e:	061f      	lsls	r7, r3, #24
 8006070:	f851 6b04 	ldr.w	r6, [r1], #4
 8006074:	d402      	bmi.n	800607c <_printf_i+0x18c>
 8006076:	065f      	lsls	r7, r3, #25
 8006078:	bf48      	it	mi
 800607a:	b2b6      	uxthmi	r6, r6
 800607c:	07df      	lsls	r7, r3, #31
 800607e:	bf48      	it	mi
 8006080:	f043 0320 	orrmi.w	r3, r3, #32
 8006084:	6029      	str	r1, [r5, #0]
 8006086:	bf48      	it	mi
 8006088:	6023      	strmi	r3, [r4, #0]
 800608a:	b91e      	cbnz	r6, 8006094 <_printf_i+0x1a4>
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	f023 0320 	bic.w	r3, r3, #32
 8006092:	6023      	str	r3, [r4, #0]
 8006094:	2310      	movs	r3, #16
 8006096:	e7a7      	b.n	8005fe8 <_printf_i+0xf8>
 8006098:	4824      	ldr	r0, [pc, #144]	; (800612c <_printf_i+0x23c>)
 800609a:	e7e4      	b.n	8006066 <_printf_i+0x176>
 800609c:	4615      	mov	r5, r2
 800609e:	e7bd      	b.n	800601c <_printf_i+0x12c>
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	6826      	ldr	r6, [r4, #0]
 80060a4:	6961      	ldr	r1, [r4, #20]
 80060a6:	1d18      	adds	r0, r3, #4
 80060a8:	6028      	str	r0, [r5, #0]
 80060aa:	0635      	lsls	r5, r6, #24
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	d501      	bpl.n	80060b4 <_printf_i+0x1c4>
 80060b0:	6019      	str	r1, [r3, #0]
 80060b2:	e002      	b.n	80060ba <_printf_i+0x1ca>
 80060b4:	0670      	lsls	r0, r6, #25
 80060b6:	d5fb      	bpl.n	80060b0 <_printf_i+0x1c0>
 80060b8:	8019      	strh	r1, [r3, #0]
 80060ba:	2300      	movs	r3, #0
 80060bc:	6123      	str	r3, [r4, #16]
 80060be:	4615      	mov	r5, r2
 80060c0:	e7bc      	b.n	800603c <_printf_i+0x14c>
 80060c2:	682b      	ldr	r3, [r5, #0]
 80060c4:	1d1a      	adds	r2, r3, #4
 80060c6:	602a      	str	r2, [r5, #0]
 80060c8:	681d      	ldr	r5, [r3, #0]
 80060ca:	6862      	ldr	r2, [r4, #4]
 80060cc:	2100      	movs	r1, #0
 80060ce:	4628      	mov	r0, r5
 80060d0:	f7fa f87e 	bl	80001d0 <memchr>
 80060d4:	b108      	cbz	r0, 80060da <_printf_i+0x1ea>
 80060d6:	1b40      	subs	r0, r0, r5
 80060d8:	6060      	str	r0, [r4, #4]
 80060da:	6863      	ldr	r3, [r4, #4]
 80060dc:	6123      	str	r3, [r4, #16]
 80060de:	2300      	movs	r3, #0
 80060e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060e4:	e7aa      	b.n	800603c <_printf_i+0x14c>
 80060e6:	6923      	ldr	r3, [r4, #16]
 80060e8:	462a      	mov	r2, r5
 80060ea:	4649      	mov	r1, r9
 80060ec:	4640      	mov	r0, r8
 80060ee:	47d0      	blx	sl
 80060f0:	3001      	adds	r0, #1
 80060f2:	d0ad      	beq.n	8006050 <_printf_i+0x160>
 80060f4:	6823      	ldr	r3, [r4, #0]
 80060f6:	079b      	lsls	r3, r3, #30
 80060f8:	d413      	bmi.n	8006122 <_printf_i+0x232>
 80060fa:	68e0      	ldr	r0, [r4, #12]
 80060fc:	9b03      	ldr	r3, [sp, #12]
 80060fe:	4298      	cmp	r0, r3
 8006100:	bfb8      	it	lt
 8006102:	4618      	movlt	r0, r3
 8006104:	e7a6      	b.n	8006054 <_printf_i+0x164>
 8006106:	2301      	movs	r3, #1
 8006108:	4632      	mov	r2, r6
 800610a:	4649      	mov	r1, r9
 800610c:	4640      	mov	r0, r8
 800610e:	47d0      	blx	sl
 8006110:	3001      	adds	r0, #1
 8006112:	d09d      	beq.n	8006050 <_printf_i+0x160>
 8006114:	3501      	adds	r5, #1
 8006116:	68e3      	ldr	r3, [r4, #12]
 8006118:	9903      	ldr	r1, [sp, #12]
 800611a:	1a5b      	subs	r3, r3, r1
 800611c:	42ab      	cmp	r3, r5
 800611e:	dcf2      	bgt.n	8006106 <_printf_i+0x216>
 8006120:	e7eb      	b.n	80060fa <_printf_i+0x20a>
 8006122:	2500      	movs	r5, #0
 8006124:	f104 0619 	add.w	r6, r4, #25
 8006128:	e7f5      	b.n	8006116 <_printf_i+0x226>
 800612a:	bf00      	nop
 800612c:	08008cea 	.word	0x08008cea
 8006130:	08008cfb 	.word	0x08008cfb

08006134 <std>:
 8006134:	2300      	movs	r3, #0
 8006136:	b510      	push	{r4, lr}
 8006138:	4604      	mov	r4, r0
 800613a:	e9c0 3300 	strd	r3, r3, [r0]
 800613e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006142:	6083      	str	r3, [r0, #8]
 8006144:	8181      	strh	r1, [r0, #12]
 8006146:	6643      	str	r3, [r0, #100]	; 0x64
 8006148:	81c2      	strh	r2, [r0, #14]
 800614a:	6183      	str	r3, [r0, #24]
 800614c:	4619      	mov	r1, r3
 800614e:	2208      	movs	r2, #8
 8006150:	305c      	adds	r0, #92	; 0x5c
 8006152:	f000 f914 	bl	800637e <memset>
 8006156:	4b0d      	ldr	r3, [pc, #52]	; (800618c <std+0x58>)
 8006158:	6263      	str	r3, [r4, #36]	; 0x24
 800615a:	4b0d      	ldr	r3, [pc, #52]	; (8006190 <std+0x5c>)
 800615c:	62a3      	str	r3, [r4, #40]	; 0x28
 800615e:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <std+0x60>)
 8006160:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006162:	4b0d      	ldr	r3, [pc, #52]	; (8006198 <std+0x64>)
 8006164:	6323      	str	r3, [r4, #48]	; 0x30
 8006166:	4b0d      	ldr	r3, [pc, #52]	; (800619c <std+0x68>)
 8006168:	6224      	str	r4, [r4, #32]
 800616a:	429c      	cmp	r4, r3
 800616c:	d006      	beq.n	800617c <std+0x48>
 800616e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006172:	4294      	cmp	r4, r2
 8006174:	d002      	beq.n	800617c <std+0x48>
 8006176:	33d0      	adds	r3, #208	; 0xd0
 8006178:	429c      	cmp	r4, r3
 800617a:	d105      	bne.n	8006188 <std+0x54>
 800617c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006184:	f000 b978 	b.w	8006478 <__retarget_lock_init_recursive>
 8006188:	bd10      	pop	{r4, pc}
 800618a:	bf00      	nop
 800618c:	080062f9 	.word	0x080062f9
 8006190:	0800631b 	.word	0x0800631b
 8006194:	08006353 	.word	0x08006353
 8006198:	08006377 	.word	0x08006377
 800619c:	200003d4 	.word	0x200003d4

080061a0 <stdio_exit_handler>:
 80061a0:	4a02      	ldr	r2, [pc, #8]	; (80061ac <stdio_exit_handler+0xc>)
 80061a2:	4903      	ldr	r1, [pc, #12]	; (80061b0 <stdio_exit_handler+0x10>)
 80061a4:	4803      	ldr	r0, [pc, #12]	; (80061b4 <stdio_exit_handler+0x14>)
 80061a6:	f000 b869 	b.w	800627c <_fwalk_sglue>
 80061aa:	bf00      	nop
 80061ac:	2000009c 	.word	0x2000009c
 80061b0:	08007e29 	.word	0x08007e29
 80061b4:	200000a8 	.word	0x200000a8

080061b8 <cleanup_stdio>:
 80061b8:	6841      	ldr	r1, [r0, #4]
 80061ba:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <cleanup_stdio+0x34>)
 80061bc:	4299      	cmp	r1, r3
 80061be:	b510      	push	{r4, lr}
 80061c0:	4604      	mov	r4, r0
 80061c2:	d001      	beq.n	80061c8 <cleanup_stdio+0x10>
 80061c4:	f001 fe30 	bl	8007e28 <_fflush_r>
 80061c8:	68a1      	ldr	r1, [r4, #8]
 80061ca:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <cleanup_stdio+0x38>)
 80061cc:	4299      	cmp	r1, r3
 80061ce:	d002      	beq.n	80061d6 <cleanup_stdio+0x1e>
 80061d0:	4620      	mov	r0, r4
 80061d2:	f001 fe29 	bl	8007e28 <_fflush_r>
 80061d6:	68e1      	ldr	r1, [r4, #12]
 80061d8:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <cleanup_stdio+0x3c>)
 80061da:	4299      	cmp	r1, r3
 80061dc:	d004      	beq.n	80061e8 <cleanup_stdio+0x30>
 80061de:	4620      	mov	r0, r4
 80061e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061e4:	f001 be20 	b.w	8007e28 <_fflush_r>
 80061e8:	bd10      	pop	{r4, pc}
 80061ea:	bf00      	nop
 80061ec:	200003d4 	.word	0x200003d4
 80061f0:	2000043c 	.word	0x2000043c
 80061f4:	200004a4 	.word	0x200004a4

080061f8 <global_stdio_init.part.0>:
 80061f8:	b510      	push	{r4, lr}
 80061fa:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <global_stdio_init.part.0+0x30>)
 80061fc:	4c0b      	ldr	r4, [pc, #44]	; (800622c <global_stdio_init.part.0+0x34>)
 80061fe:	4a0c      	ldr	r2, [pc, #48]	; (8006230 <global_stdio_init.part.0+0x38>)
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	4620      	mov	r0, r4
 8006204:	2200      	movs	r2, #0
 8006206:	2104      	movs	r1, #4
 8006208:	f7ff ff94 	bl	8006134 <std>
 800620c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006210:	2201      	movs	r2, #1
 8006212:	2109      	movs	r1, #9
 8006214:	f7ff ff8e 	bl	8006134 <std>
 8006218:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800621c:	2202      	movs	r2, #2
 800621e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006222:	2112      	movs	r1, #18
 8006224:	f7ff bf86 	b.w	8006134 <std>
 8006228:	2000050c 	.word	0x2000050c
 800622c:	200003d4 	.word	0x200003d4
 8006230:	080061a1 	.word	0x080061a1

08006234 <__sfp_lock_acquire>:
 8006234:	4801      	ldr	r0, [pc, #4]	; (800623c <__sfp_lock_acquire+0x8>)
 8006236:	f000 b920 	b.w	800647a <__retarget_lock_acquire_recursive>
 800623a:	bf00      	nop
 800623c:	20000515 	.word	0x20000515

08006240 <__sfp_lock_release>:
 8006240:	4801      	ldr	r0, [pc, #4]	; (8006248 <__sfp_lock_release+0x8>)
 8006242:	f000 b91b 	b.w	800647c <__retarget_lock_release_recursive>
 8006246:	bf00      	nop
 8006248:	20000515 	.word	0x20000515

0800624c <__sinit>:
 800624c:	b510      	push	{r4, lr}
 800624e:	4604      	mov	r4, r0
 8006250:	f7ff fff0 	bl	8006234 <__sfp_lock_acquire>
 8006254:	6a23      	ldr	r3, [r4, #32]
 8006256:	b11b      	cbz	r3, 8006260 <__sinit+0x14>
 8006258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800625c:	f7ff bff0 	b.w	8006240 <__sfp_lock_release>
 8006260:	4b04      	ldr	r3, [pc, #16]	; (8006274 <__sinit+0x28>)
 8006262:	6223      	str	r3, [r4, #32]
 8006264:	4b04      	ldr	r3, [pc, #16]	; (8006278 <__sinit+0x2c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1f5      	bne.n	8006258 <__sinit+0xc>
 800626c:	f7ff ffc4 	bl	80061f8 <global_stdio_init.part.0>
 8006270:	e7f2      	b.n	8006258 <__sinit+0xc>
 8006272:	bf00      	nop
 8006274:	080061b9 	.word	0x080061b9
 8006278:	2000050c 	.word	0x2000050c

0800627c <_fwalk_sglue>:
 800627c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006280:	4607      	mov	r7, r0
 8006282:	4688      	mov	r8, r1
 8006284:	4614      	mov	r4, r2
 8006286:	2600      	movs	r6, #0
 8006288:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800628c:	f1b9 0901 	subs.w	r9, r9, #1
 8006290:	d505      	bpl.n	800629e <_fwalk_sglue+0x22>
 8006292:	6824      	ldr	r4, [r4, #0]
 8006294:	2c00      	cmp	r4, #0
 8006296:	d1f7      	bne.n	8006288 <_fwalk_sglue+0xc>
 8006298:	4630      	mov	r0, r6
 800629a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800629e:	89ab      	ldrh	r3, [r5, #12]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d907      	bls.n	80062b4 <_fwalk_sglue+0x38>
 80062a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062a8:	3301      	adds	r3, #1
 80062aa:	d003      	beq.n	80062b4 <_fwalk_sglue+0x38>
 80062ac:	4629      	mov	r1, r5
 80062ae:	4638      	mov	r0, r7
 80062b0:	47c0      	blx	r8
 80062b2:	4306      	orrs	r6, r0
 80062b4:	3568      	adds	r5, #104	; 0x68
 80062b6:	e7e9      	b.n	800628c <_fwalk_sglue+0x10>

080062b8 <siprintf>:
 80062b8:	b40e      	push	{r1, r2, r3}
 80062ba:	b500      	push	{lr}
 80062bc:	b09c      	sub	sp, #112	; 0x70
 80062be:	ab1d      	add	r3, sp, #116	; 0x74
 80062c0:	9002      	str	r0, [sp, #8]
 80062c2:	9006      	str	r0, [sp, #24]
 80062c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062c8:	4809      	ldr	r0, [pc, #36]	; (80062f0 <siprintf+0x38>)
 80062ca:	9107      	str	r1, [sp, #28]
 80062cc:	9104      	str	r1, [sp, #16]
 80062ce:	4909      	ldr	r1, [pc, #36]	; (80062f4 <siprintf+0x3c>)
 80062d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80062d4:	9105      	str	r1, [sp, #20]
 80062d6:	6800      	ldr	r0, [r0, #0]
 80062d8:	9301      	str	r3, [sp, #4]
 80062da:	a902      	add	r1, sp, #8
 80062dc:	f001 fc20 	bl	8007b20 <_svfiprintf_r>
 80062e0:	9b02      	ldr	r3, [sp, #8]
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	b01c      	add	sp, #112	; 0x70
 80062e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80062ec:	b003      	add	sp, #12
 80062ee:	4770      	bx	lr
 80062f0:	200000f4 	.word	0x200000f4
 80062f4:	ffff0208 	.word	0xffff0208

080062f8 <__sread>:
 80062f8:	b510      	push	{r4, lr}
 80062fa:	460c      	mov	r4, r1
 80062fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006300:	f000 f86c 	bl	80063dc <_read_r>
 8006304:	2800      	cmp	r0, #0
 8006306:	bfab      	itete	ge
 8006308:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800630a:	89a3      	ldrhlt	r3, [r4, #12]
 800630c:	181b      	addge	r3, r3, r0
 800630e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006312:	bfac      	ite	ge
 8006314:	6563      	strge	r3, [r4, #84]	; 0x54
 8006316:	81a3      	strhlt	r3, [r4, #12]
 8006318:	bd10      	pop	{r4, pc}

0800631a <__swrite>:
 800631a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800631e:	461f      	mov	r7, r3
 8006320:	898b      	ldrh	r3, [r1, #12]
 8006322:	05db      	lsls	r3, r3, #23
 8006324:	4605      	mov	r5, r0
 8006326:	460c      	mov	r4, r1
 8006328:	4616      	mov	r6, r2
 800632a:	d505      	bpl.n	8006338 <__swrite+0x1e>
 800632c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006330:	2302      	movs	r3, #2
 8006332:	2200      	movs	r2, #0
 8006334:	f000 f840 	bl	80063b8 <_lseek_r>
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800633e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006342:	81a3      	strh	r3, [r4, #12]
 8006344:	4632      	mov	r2, r6
 8006346:	463b      	mov	r3, r7
 8006348:	4628      	mov	r0, r5
 800634a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800634e:	f000 b857 	b.w	8006400 <_write_r>

08006352 <__sseek>:
 8006352:	b510      	push	{r4, lr}
 8006354:	460c      	mov	r4, r1
 8006356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800635a:	f000 f82d 	bl	80063b8 <_lseek_r>
 800635e:	1c43      	adds	r3, r0, #1
 8006360:	89a3      	ldrh	r3, [r4, #12]
 8006362:	bf15      	itete	ne
 8006364:	6560      	strne	r0, [r4, #84]	; 0x54
 8006366:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800636a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800636e:	81a3      	strheq	r3, [r4, #12]
 8006370:	bf18      	it	ne
 8006372:	81a3      	strhne	r3, [r4, #12]
 8006374:	bd10      	pop	{r4, pc}

08006376 <__sclose>:
 8006376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800637a:	f000 b80d 	b.w	8006398 <_close_r>

0800637e <memset>:
 800637e:	4402      	add	r2, r0
 8006380:	4603      	mov	r3, r0
 8006382:	4293      	cmp	r3, r2
 8006384:	d100      	bne.n	8006388 <memset+0xa>
 8006386:	4770      	bx	lr
 8006388:	f803 1b01 	strb.w	r1, [r3], #1
 800638c:	e7f9      	b.n	8006382 <memset+0x4>
	...

08006390 <_localeconv_r>:
 8006390:	4800      	ldr	r0, [pc, #0]	; (8006394 <_localeconv_r+0x4>)
 8006392:	4770      	bx	lr
 8006394:	200001e8 	.word	0x200001e8

08006398 <_close_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	4d06      	ldr	r5, [pc, #24]	; (80063b4 <_close_r+0x1c>)
 800639c:	2300      	movs	r3, #0
 800639e:	4604      	mov	r4, r0
 80063a0:	4608      	mov	r0, r1
 80063a2:	602b      	str	r3, [r5, #0]
 80063a4:	f7fb fb67 	bl	8001a76 <_close>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d102      	bne.n	80063b2 <_close_r+0x1a>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	b103      	cbz	r3, 80063b2 <_close_r+0x1a>
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	bd38      	pop	{r3, r4, r5, pc}
 80063b4:	20000510 	.word	0x20000510

080063b8 <_lseek_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4d07      	ldr	r5, [pc, #28]	; (80063d8 <_lseek_r+0x20>)
 80063bc:	4604      	mov	r4, r0
 80063be:	4608      	mov	r0, r1
 80063c0:	4611      	mov	r1, r2
 80063c2:	2200      	movs	r2, #0
 80063c4:	602a      	str	r2, [r5, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	f7fb fb7c 	bl	8001ac4 <_lseek>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_lseek_r+0x1e>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_lseek_r+0x1e>
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	20000510 	.word	0x20000510

080063dc <_read_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	4d07      	ldr	r5, [pc, #28]	; (80063fc <_read_r+0x20>)
 80063e0:	4604      	mov	r4, r0
 80063e2:	4608      	mov	r0, r1
 80063e4:	4611      	mov	r1, r2
 80063e6:	2200      	movs	r2, #0
 80063e8:	602a      	str	r2, [r5, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	f7fb fb0a 	bl	8001a04 <_read>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d102      	bne.n	80063fa <_read_r+0x1e>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	b103      	cbz	r3, 80063fa <_read_r+0x1e>
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	bd38      	pop	{r3, r4, r5, pc}
 80063fc:	20000510 	.word	0x20000510

08006400 <_write_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4d07      	ldr	r5, [pc, #28]	; (8006420 <_write_r+0x20>)
 8006404:	4604      	mov	r4, r0
 8006406:	4608      	mov	r0, r1
 8006408:	4611      	mov	r1, r2
 800640a:	2200      	movs	r2, #0
 800640c:	602a      	str	r2, [r5, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	f7fb fb15 	bl	8001a3e <_write>
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d102      	bne.n	800641e <_write_r+0x1e>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	b103      	cbz	r3, 800641e <_write_r+0x1e>
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	bd38      	pop	{r3, r4, r5, pc}
 8006420:	20000510 	.word	0x20000510

08006424 <__errno>:
 8006424:	4b01      	ldr	r3, [pc, #4]	; (800642c <__errno+0x8>)
 8006426:	6818      	ldr	r0, [r3, #0]
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	200000f4 	.word	0x200000f4

08006430 <__libc_init_array>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	4d0d      	ldr	r5, [pc, #52]	; (8006468 <__libc_init_array+0x38>)
 8006434:	4c0d      	ldr	r4, [pc, #52]	; (800646c <__libc_init_array+0x3c>)
 8006436:	1b64      	subs	r4, r4, r5
 8006438:	10a4      	asrs	r4, r4, #2
 800643a:	2600      	movs	r6, #0
 800643c:	42a6      	cmp	r6, r4
 800643e:	d109      	bne.n	8006454 <__libc_init_array+0x24>
 8006440:	4d0b      	ldr	r5, [pc, #44]	; (8006470 <__libc_init_array+0x40>)
 8006442:	4c0c      	ldr	r4, [pc, #48]	; (8006474 <__libc_init_array+0x44>)
 8006444:	f002 fc0e 	bl	8008c64 <_init>
 8006448:	1b64      	subs	r4, r4, r5
 800644a:	10a4      	asrs	r4, r4, #2
 800644c:	2600      	movs	r6, #0
 800644e:	42a6      	cmp	r6, r4
 8006450:	d105      	bne.n	800645e <__libc_init_array+0x2e>
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	f855 3b04 	ldr.w	r3, [r5], #4
 8006458:	4798      	blx	r3
 800645a:	3601      	adds	r6, #1
 800645c:	e7ee      	b.n	800643c <__libc_init_array+0xc>
 800645e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006462:	4798      	blx	r3
 8006464:	3601      	adds	r6, #1
 8006466:	e7f2      	b.n	800644e <__libc_init_array+0x1e>
 8006468:	080090c8 	.word	0x080090c8
 800646c:	080090c8 	.word	0x080090c8
 8006470:	080090c8 	.word	0x080090c8
 8006474:	080090cc 	.word	0x080090cc

08006478 <__retarget_lock_init_recursive>:
 8006478:	4770      	bx	lr

0800647a <__retarget_lock_acquire_recursive>:
 800647a:	4770      	bx	lr

0800647c <__retarget_lock_release_recursive>:
 800647c:	4770      	bx	lr

0800647e <quorem>:
 800647e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006482:	6903      	ldr	r3, [r0, #16]
 8006484:	690c      	ldr	r4, [r1, #16]
 8006486:	42a3      	cmp	r3, r4
 8006488:	4607      	mov	r7, r0
 800648a:	db7e      	blt.n	800658a <quorem+0x10c>
 800648c:	3c01      	subs	r4, #1
 800648e:	f101 0814 	add.w	r8, r1, #20
 8006492:	f100 0514 	add.w	r5, r0, #20
 8006496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800649a:	9301      	str	r3, [sp, #4]
 800649c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064a4:	3301      	adds	r3, #1
 80064a6:	429a      	cmp	r2, r3
 80064a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80064b4:	d331      	bcc.n	800651a <quorem+0x9c>
 80064b6:	f04f 0e00 	mov.w	lr, #0
 80064ba:	4640      	mov	r0, r8
 80064bc:	46ac      	mov	ip, r5
 80064be:	46f2      	mov	sl, lr
 80064c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80064c4:	b293      	uxth	r3, r2
 80064c6:	fb06 e303 	mla	r3, r6, r3, lr
 80064ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064ce:	0c1a      	lsrs	r2, r3, #16
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	ebaa 0303 	sub.w	r3, sl, r3
 80064d6:	f8dc a000 	ldr.w	sl, [ip]
 80064da:	fa13 f38a 	uxtah	r3, r3, sl
 80064de:	fb06 220e 	mla	r2, r6, lr, r2
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	9b00      	ldr	r3, [sp, #0]
 80064e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064ea:	b292      	uxth	r2, r2
 80064ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064f4:	f8bd 3000 	ldrh.w	r3, [sp]
 80064f8:	4581      	cmp	r9, r0
 80064fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064fe:	f84c 3b04 	str.w	r3, [ip], #4
 8006502:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006506:	d2db      	bcs.n	80064c0 <quorem+0x42>
 8006508:	f855 300b 	ldr.w	r3, [r5, fp]
 800650c:	b92b      	cbnz	r3, 800651a <quorem+0x9c>
 800650e:	9b01      	ldr	r3, [sp, #4]
 8006510:	3b04      	subs	r3, #4
 8006512:	429d      	cmp	r5, r3
 8006514:	461a      	mov	r2, r3
 8006516:	d32c      	bcc.n	8006572 <quorem+0xf4>
 8006518:	613c      	str	r4, [r7, #16]
 800651a:	4638      	mov	r0, r7
 800651c:	f001 f9a6 	bl	800786c <__mcmp>
 8006520:	2800      	cmp	r0, #0
 8006522:	db22      	blt.n	800656a <quorem+0xec>
 8006524:	3601      	adds	r6, #1
 8006526:	4629      	mov	r1, r5
 8006528:	2000      	movs	r0, #0
 800652a:	f858 2b04 	ldr.w	r2, [r8], #4
 800652e:	f8d1 c000 	ldr.w	ip, [r1]
 8006532:	b293      	uxth	r3, r2
 8006534:	1ac3      	subs	r3, r0, r3
 8006536:	0c12      	lsrs	r2, r2, #16
 8006538:	fa13 f38c 	uxtah	r3, r3, ip
 800653c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006540:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006544:	b29b      	uxth	r3, r3
 8006546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800654a:	45c1      	cmp	r9, r8
 800654c:	f841 3b04 	str.w	r3, [r1], #4
 8006550:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006554:	d2e9      	bcs.n	800652a <quorem+0xac>
 8006556:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800655a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800655e:	b922      	cbnz	r2, 800656a <quorem+0xec>
 8006560:	3b04      	subs	r3, #4
 8006562:	429d      	cmp	r5, r3
 8006564:	461a      	mov	r2, r3
 8006566:	d30a      	bcc.n	800657e <quorem+0x100>
 8006568:	613c      	str	r4, [r7, #16]
 800656a:	4630      	mov	r0, r6
 800656c:	b003      	add	sp, #12
 800656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	3b04      	subs	r3, #4
 8006576:	2a00      	cmp	r2, #0
 8006578:	d1ce      	bne.n	8006518 <quorem+0x9a>
 800657a:	3c01      	subs	r4, #1
 800657c:	e7c9      	b.n	8006512 <quorem+0x94>
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	3b04      	subs	r3, #4
 8006582:	2a00      	cmp	r2, #0
 8006584:	d1f0      	bne.n	8006568 <quorem+0xea>
 8006586:	3c01      	subs	r4, #1
 8006588:	e7eb      	b.n	8006562 <quorem+0xe4>
 800658a:	2000      	movs	r0, #0
 800658c:	e7ee      	b.n	800656c <quorem+0xee>
	...

08006590 <_dtoa_r>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	ed2d 8b04 	vpush	{d8-d9}
 8006598:	69c5      	ldr	r5, [r0, #28]
 800659a:	b093      	sub	sp, #76	; 0x4c
 800659c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80065a0:	ec57 6b10 	vmov	r6, r7, d0
 80065a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80065a8:	9107      	str	r1, [sp, #28]
 80065aa:	4604      	mov	r4, r0
 80065ac:	920a      	str	r2, [sp, #40]	; 0x28
 80065ae:	930d      	str	r3, [sp, #52]	; 0x34
 80065b0:	b975      	cbnz	r5, 80065d0 <_dtoa_r+0x40>
 80065b2:	2010      	movs	r0, #16
 80065b4:	f000 fe2a 	bl	800720c <malloc>
 80065b8:	4602      	mov	r2, r0
 80065ba:	61e0      	str	r0, [r4, #28]
 80065bc:	b920      	cbnz	r0, 80065c8 <_dtoa_r+0x38>
 80065be:	4bae      	ldr	r3, [pc, #696]	; (8006878 <_dtoa_r+0x2e8>)
 80065c0:	21ef      	movs	r1, #239	; 0xef
 80065c2:	48ae      	ldr	r0, [pc, #696]	; (800687c <_dtoa_r+0x2ec>)
 80065c4:	f001 fc90 	bl	8007ee8 <__assert_func>
 80065c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065cc:	6005      	str	r5, [r0, #0]
 80065ce:	60c5      	str	r5, [r0, #12]
 80065d0:	69e3      	ldr	r3, [r4, #28]
 80065d2:	6819      	ldr	r1, [r3, #0]
 80065d4:	b151      	cbz	r1, 80065ec <_dtoa_r+0x5c>
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	604a      	str	r2, [r1, #4]
 80065da:	2301      	movs	r3, #1
 80065dc:	4093      	lsls	r3, r2
 80065de:	608b      	str	r3, [r1, #8]
 80065e0:	4620      	mov	r0, r4
 80065e2:	f000 ff07 	bl	80073f4 <_Bfree>
 80065e6:	69e3      	ldr	r3, [r4, #28]
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	1e3b      	subs	r3, r7, #0
 80065ee:	bfbb      	ittet	lt
 80065f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065f4:	9303      	strlt	r3, [sp, #12]
 80065f6:	2300      	movge	r3, #0
 80065f8:	2201      	movlt	r2, #1
 80065fa:	bfac      	ite	ge
 80065fc:	f8c8 3000 	strge.w	r3, [r8]
 8006600:	f8c8 2000 	strlt.w	r2, [r8]
 8006604:	4b9e      	ldr	r3, [pc, #632]	; (8006880 <_dtoa_r+0x2f0>)
 8006606:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800660a:	ea33 0308 	bics.w	r3, r3, r8
 800660e:	d11b      	bne.n	8006648 <_dtoa_r+0xb8>
 8006610:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006612:	f242 730f 	movw	r3, #9999	; 0x270f
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800661c:	4333      	orrs	r3, r6
 800661e:	f000 8593 	beq.w	8007148 <_dtoa_r+0xbb8>
 8006622:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006624:	b963      	cbnz	r3, 8006640 <_dtoa_r+0xb0>
 8006626:	4b97      	ldr	r3, [pc, #604]	; (8006884 <_dtoa_r+0x2f4>)
 8006628:	e027      	b.n	800667a <_dtoa_r+0xea>
 800662a:	4b97      	ldr	r3, [pc, #604]	; (8006888 <_dtoa_r+0x2f8>)
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	3308      	adds	r3, #8
 8006630:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	9800      	ldr	r0, [sp, #0]
 8006636:	b013      	add	sp, #76	; 0x4c
 8006638:	ecbd 8b04 	vpop	{d8-d9}
 800663c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006640:	4b90      	ldr	r3, [pc, #576]	; (8006884 <_dtoa_r+0x2f4>)
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	3303      	adds	r3, #3
 8006646:	e7f3      	b.n	8006630 <_dtoa_r+0xa0>
 8006648:	ed9d 7b02 	vldr	d7, [sp, #8]
 800664c:	2200      	movs	r2, #0
 800664e:	ec51 0b17 	vmov	r0, r1, d7
 8006652:	eeb0 8a47 	vmov.f32	s16, s14
 8006656:	eef0 8a67 	vmov.f32	s17, s15
 800665a:	2300      	movs	r3, #0
 800665c:	f7fa fa34 	bl	8000ac8 <__aeabi_dcmpeq>
 8006660:	4681      	mov	r9, r0
 8006662:	b160      	cbz	r0, 800667e <_dtoa_r+0xee>
 8006664:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006666:	2301      	movs	r3, #1
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8568 	beq.w	8007142 <_dtoa_r+0xbb2>
 8006672:	4b86      	ldr	r3, [pc, #536]	; (800688c <_dtoa_r+0x2fc>)
 8006674:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	3b01      	subs	r3, #1
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	e7da      	b.n	8006634 <_dtoa_r+0xa4>
 800667e:	aa10      	add	r2, sp, #64	; 0x40
 8006680:	a911      	add	r1, sp, #68	; 0x44
 8006682:	4620      	mov	r0, r4
 8006684:	eeb0 0a48 	vmov.f32	s0, s16
 8006688:	eef0 0a68 	vmov.f32	s1, s17
 800668c:	f001 f994 	bl	80079b8 <__d2b>
 8006690:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006694:	4682      	mov	sl, r0
 8006696:	2d00      	cmp	r5, #0
 8006698:	d07f      	beq.n	800679a <_dtoa_r+0x20a>
 800669a:	ee18 3a90 	vmov	r3, s17
 800669e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80066a6:	ec51 0b18 	vmov	r0, r1, d8
 80066aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80066ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80066b6:	4619      	mov	r1, r3
 80066b8:	2200      	movs	r2, #0
 80066ba:	4b75      	ldr	r3, [pc, #468]	; (8006890 <_dtoa_r+0x300>)
 80066bc:	f7f9 fde4 	bl	8000288 <__aeabi_dsub>
 80066c0:	a367      	add	r3, pc, #412	; (adr r3, 8006860 <_dtoa_r+0x2d0>)
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	f7f9 ff97 	bl	80005f8 <__aeabi_dmul>
 80066ca:	a367      	add	r3, pc, #412	; (adr r3, 8006868 <_dtoa_r+0x2d8>)
 80066cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d0:	f7f9 fddc 	bl	800028c <__adddf3>
 80066d4:	4606      	mov	r6, r0
 80066d6:	4628      	mov	r0, r5
 80066d8:	460f      	mov	r7, r1
 80066da:	f7f9 ff23 	bl	8000524 <__aeabi_i2d>
 80066de:	a364      	add	r3, pc, #400	; (adr r3, 8006870 <_dtoa_r+0x2e0>)
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	f7f9 ff88 	bl	80005f8 <__aeabi_dmul>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4630      	mov	r0, r6
 80066ee:	4639      	mov	r1, r7
 80066f0:	f7f9 fdcc 	bl	800028c <__adddf3>
 80066f4:	4606      	mov	r6, r0
 80066f6:	460f      	mov	r7, r1
 80066f8:	f7fa fa2e 	bl	8000b58 <__aeabi_d2iz>
 80066fc:	2200      	movs	r2, #0
 80066fe:	4683      	mov	fp, r0
 8006700:	2300      	movs	r3, #0
 8006702:	4630      	mov	r0, r6
 8006704:	4639      	mov	r1, r7
 8006706:	f7fa f9e9 	bl	8000adc <__aeabi_dcmplt>
 800670a:	b148      	cbz	r0, 8006720 <_dtoa_r+0x190>
 800670c:	4658      	mov	r0, fp
 800670e:	f7f9 ff09 	bl	8000524 <__aeabi_i2d>
 8006712:	4632      	mov	r2, r6
 8006714:	463b      	mov	r3, r7
 8006716:	f7fa f9d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800671a:	b908      	cbnz	r0, 8006720 <_dtoa_r+0x190>
 800671c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006720:	f1bb 0f16 	cmp.w	fp, #22
 8006724:	d857      	bhi.n	80067d6 <_dtoa_r+0x246>
 8006726:	4b5b      	ldr	r3, [pc, #364]	; (8006894 <_dtoa_r+0x304>)
 8006728:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	ec51 0b18 	vmov	r0, r1, d8
 8006734:	f7fa f9d2 	bl	8000adc <__aeabi_dcmplt>
 8006738:	2800      	cmp	r0, #0
 800673a:	d04e      	beq.n	80067da <_dtoa_r+0x24a>
 800673c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006740:	2300      	movs	r3, #0
 8006742:	930c      	str	r3, [sp, #48]	; 0x30
 8006744:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006746:	1b5b      	subs	r3, r3, r5
 8006748:	1e5a      	subs	r2, r3, #1
 800674a:	bf45      	ittet	mi
 800674c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006750:	9305      	strmi	r3, [sp, #20]
 8006752:	2300      	movpl	r3, #0
 8006754:	2300      	movmi	r3, #0
 8006756:	9206      	str	r2, [sp, #24]
 8006758:	bf54      	ite	pl
 800675a:	9305      	strpl	r3, [sp, #20]
 800675c:	9306      	strmi	r3, [sp, #24]
 800675e:	f1bb 0f00 	cmp.w	fp, #0
 8006762:	db3c      	blt.n	80067de <_dtoa_r+0x24e>
 8006764:	9b06      	ldr	r3, [sp, #24]
 8006766:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800676a:	445b      	add	r3, fp
 800676c:	9306      	str	r3, [sp, #24]
 800676e:	2300      	movs	r3, #0
 8006770:	9308      	str	r3, [sp, #32]
 8006772:	9b07      	ldr	r3, [sp, #28]
 8006774:	2b09      	cmp	r3, #9
 8006776:	d868      	bhi.n	800684a <_dtoa_r+0x2ba>
 8006778:	2b05      	cmp	r3, #5
 800677a:	bfc4      	itt	gt
 800677c:	3b04      	subgt	r3, #4
 800677e:	9307      	strgt	r3, [sp, #28]
 8006780:	9b07      	ldr	r3, [sp, #28]
 8006782:	f1a3 0302 	sub.w	r3, r3, #2
 8006786:	bfcc      	ite	gt
 8006788:	2500      	movgt	r5, #0
 800678a:	2501      	movle	r5, #1
 800678c:	2b03      	cmp	r3, #3
 800678e:	f200 8085 	bhi.w	800689c <_dtoa_r+0x30c>
 8006792:	e8df f003 	tbb	[pc, r3]
 8006796:	3b2e      	.short	0x3b2e
 8006798:	5839      	.short	0x5839
 800679a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800679e:	441d      	add	r5, r3
 80067a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	bfc1      	itttt	gt
 80067a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80067b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80067b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80067b8:	bfd6      	itet	le
 80067ba:	f1c3 0320 	rsble	r3, r3, #32
 80067be:	ea48 0003 	orrgt.w	r0, r8, r3
 80067c2:	fa06 f003 	lslle.w	r0, r6, r3
 80067c6:	f7f9 fe9d 	bl	8000504 <__aeabi_ui2d>
 80067ca:	2201      	movs	r2, #1
 80067cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80067d0:	3d01      	subs	r5, #1
 80067d2:	920e      	str	r2, [sp, #56]	; 0x38
 80067d4:	e76f      	b.n	80066b6 <_dtoa_r+0x126>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e7b3      	b.n	8006742 <_dtoa_r+0x1b2>
 80067da:	900c      	str	r0, [sp, #48]	; 0x30
 80067dc:	e7b2      	b.n	8006744 <_dtoa_r+0x1b4>
 80067de:	9b05      	ldr	r3, [sp, #20]
 80067e0:	eba3 030b 	sub.w	r3, r3, fp
 80067e4:	9305      	str	r3, [sp, #20]
 80067e6:	f1cb 0300 	rsb	r3, fp, #0
 80067ea:	9308      	str	r3, [sp, #32]
 80067ec:	2300      	movs	r3, #0
 80067ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80067f0:	e7bf      	b.n	8006772 <_dtoa_r+0x1e2>
 80067f2:	2300      	movs	r3, #0
 80067f4:	9309      	str	r3, [sp, #36]	; 0x24
 80067f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	dc52      	bgt.n	80068a2 <_dtoa_r+0x312>
 80067fc:	2301      	movs	r3, #1
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	9304      	str	r3, [sp, #16]
 8006802:	461a      	mov	r2, r3
 8006804:	920a      	str	r2, [sp, #40]	; 0x28
 8006806:	e00b      	b.n	8006820 <_dtoa_r+0x290>
 8006808:	2301      	movs	r3, #1
 800680a:	e7f3      	b.n	80067f4 <_dtoa_r+0x264>
 800680c:	2300      	movs	r3, #0
 800680e:	9309      	str	r3, [sp, #36]	; 0x24
 8006810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006812:	445b      	add	r3, fp
 8006814:	9301      	str	r3, [sp, #4]
 8006816:	3301      	adds	r3, #1
 8006818:	2b01      	cmp	r3, #1
 800681a:	9304      	str	r3, [sp, #16]
 800681c:	bfb8      	it	lt
 800681e:	2301      	movlt	r3, #1
 8006820:	69e0      	ldr	r0, [r4, #28]
 8006822:	2100      	movs	r1, #0
 8006824:	2204      	movs	r2, #4
 8006826:	f102 0614 	add.w	r6, r2, #20
 800682a:	429e      	cmp	r6, r3
 800682c:	d93d      	bls.n	80068aa <_dtoa_r+0x31a>
 800682e:	6041      	str	r1, [r0, #4]
 8006830:	4620      	mov	r0, r4
 8006832:	f000 fd9f 	bl	8007374 <_Balloc>
 8006836:	9000      	str	r0, [sp, #0]
 8006838:	2800      	cmp	r0, #0
 800683a:	d139      	bne.n	80068b0 <_dtoa_r+0x320>
 800683c:	4b16      	ldr	r3, [pc, #88]	; (8006898 <_dtoa_r+0x308>)
 800683e:	4602      	mov	r2, r0
 8006840:	f240 11af 	movw	r1, #431	; 0x1af
 8006844:	e6bd      	b.n	80065c2 <_dtoa_r+0x32>
 8006846:	2301      	movs	r3, #1
 8006848:	e7e1      	b.n	800680e <_dtoa_r+0x27e>
 800684a:	2501      	movs	r5, #1
 800684c:	2300      	movs	r3, #0
 800684e:	9307      	str	r3, [sp, #28]
 8006850:	9509      	str	r5, [sp, #36]	; 0x24
 8006852:	f04f 33ff 	mov.w	r3, #4294967295
 8006856:	9301      	str	r3, [sp, #4]
 8006858:	9304      	str	r3, [sp, #16]
 800685a:	2200      	movs	r2, #0
 800685c:	2312      	movs	r3, #18
 800685e:	e7d1      	b.n	8006804 <_dtoa_r+0x274>
 8006860:	636f4361 	.word	0x636f4361
 8006864:	3fd287a7 	.word	0x3fd287a7
 8006868:	8b60c8b3 	.word	0x8b60c8b3
 800686c:	3fc68a28 	.word	0x3fc68a28
 8006870:	509f79fb 	.word	0x509f79fb
 8006874:	3fd34413 	.word	0x3fd34413
 8006878:	08008d19 	.word	0x08008d19
 800687c:	08008d30 	.word	0x08008d30
 8006880:	7ff00000 	.word	0x7ff00000
 8006884:	08008d15 	.word	0x08008d15
 8006888:	08008d0c 	.word	0x08008d0c
 800688c:	08008ce9 	.word	0x08008ce9
 8006890:	3ff80000 	.word	0x3ff80000
 8006894:	08008e20 	.word	0x08008e20
 8006898:	08008d88 	.word	0x08008d88
 800689c:	2301      	movs	r3, #1
 800689e:	9309      	str	r3, [sp, #36]	; 0x24
 80068a0:	e7d7      	b.n	8006852 <_dtoa_r+0x2c2>
 80068a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	9304      	str	r3, [sp, #16]
 80068a8:	e7ba      	b.n	8006820 <_dtoa_r+0x290>
 80068aa:	3101      	adds	r1, #1
 80068ac:	0052      	lsls	r2, r2, #1
 80068ae:	e7ba      	b.n	8006826 <_dtoa_r+0x296>
 80068b0:	69e3      	ldr	r3, [r4, #28]
 80068b2:	9a00      	ldr	r2, [sp, #0]
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	9b04      	ldr	r3, [sp, #16]
 80068b8:	2b0e      	cmp	r3, #14
 80068ba:	f200 80a8 	bhi.w	8006a0e <_dtoa_r+0x47e>
 80068be:	2d00      	cmp	r5, #0
 80068c0:	f000 80a5 	beq.w	8006a0e <_dtoa_r+0x47e>
 80068c4:	f1bb 0f00 	cmp.w	fp, #0
 80068c8:	dd38      	ble.n	800693c <_dtoa_r+0x3ac>
 80068ca:	4bc0      	ldr	r3, [pc, #768]	; (8006bcc <_dtoa_r+0x63c>)
 80068cc:	f00b 020f 	and.w	r2, fp, #15
 80068d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80068d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80068dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80068e0:	d019      	beq.n	8006916 <_dtoa_r+0x386>
 80068e2:	4bbb      	ldr	r3, [pc, #748]	; (8006bd0 <_dtoa_r+0x640>)
 80068e4:	ec51 0b18 	vmov	r0, r1, d8
 80068e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068ec:	f7f9 ffae 	bl	800084c <__aeabi_ddiv>
 80068f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068f4:	f008 080f 	and.w	r8, r8, #15
 80068f8:	2503      	movs	r5, #3
 80068fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006bd0 <_dtoa_r+0x640>
 80068fe:	f1b8 0f00 	cmp.w	r8, #0
 8006902:	d10a      	bne.n	800691a <_dtoa_r+0x38a>
 8006904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006908:	4632      	mov	r2, r6
 800690a:	463b      	mov	r3, r7
 800690c:	f7f9 ff9e 	bl	800084c <__aeabi_ddiv>
 8006910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006914:	e02b      	b.n	800696e <_dtoa_r+0x3de>
 8006916:	2502      	movs	r5, #2
 8006918:	e7ef      	b.n	80068fa <_dtoa_r+0x36a>
 800691a:	f018 0f01 	tst.w	r8, #1
 800691e:	d008      	beq.n	8006932 <_dtoa_r+0x3a2>
 8006920:	4630      	mov	r0, r6
 8006922:	4639      	mov	r1, r7
 8006924:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006928:	f7f9 fe66 	bl	80005f8 <__aeabi_dmul>
 800692c:	3501      	adds	r5, #1
 800692e:	4606      	mov	r6, r0
 8006930:	460f      	mov	r7, r1
 8006932:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006936:	f109 0908 	add.w	r9, r9, #8
 800693a:	e7e0      	b.n	80068fe <_dtoa_r+0x36e>
 800693c:	f000 809f 	beq.w	8006a7e <_dtoa_r+0x4ee>
 8006940:	f1cb 0600 	rsb	r6, fp, #0
 8006944:	4ba1      	ldr	r3, [pc, #644]	; (8006bcc <_dtoa_r+0x63c>)
 8006946:	4fa2      	ldr	r7, [pc, #648]	; (8006bd0 <_dtoa_r+0x640>)
 8006948:	f006 020f 	and.w	r2, r6, #15
 800694c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	ec51 0b18 	vmov	r0, r1, d8
 8006958:	f7f9 fe4e 	bl	80005f8 <__aeabi_dmul>
 800695c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006960:	1136      	asrs	r6, r6, #4
 8006962:	2300      	movs	r3, #0
 8006964:	2502      	movs	r5, #2
 8006966:	2e00      	cmp	r6, #0
 8006968:	d17e      	bne.n	8006a68 <_dtoa_r+0x4d8>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1d0      	bne.n	8006910 <_dtoa_r+0x380>
 800696e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006970:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 8084 	beq.w	8006a82 <_dtoa_r+0x4f2>
 800697a:	4b96      	ldr	r3, [pc, #600]	; (8006bd4 <_dtoa_r+0x644>)
 800697c:	2200      	movs	r2, #0
 800697e:	4640      	mov	r0, r8
 8006980:	4649      	mov	r1, r9
 8006982:	f7fa f8ab 	bl	8000adc <__aeabi_dcmplt>
 8006986:	2800      	cmp	r0, #0
 8006988:	d07b      	beq.n	8006a82 <_dtoa_r+0x4f2>
 800698a:	9b04      	ldr	r3, [sp, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d078      	beq.n	8006a82 <_dtoa_r+0x4f2>
 8006990:	9b01      	ldr	r3, [sp, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	dd39      	ble.n	8006a0a <_dtoa_r+0x47a>
 8006996:	4b90      	ldr	r3, [pc, #576]	; (8006bd8 <_dtoa_r+0x648>)
 8006998:	2200      	movs	r2, #0
 800699a:	4640      	mov	r0, r8
 800699c:	4649      	mov	r1, r9
 800699e:	f7f9 fe2b 	bl	80005f8 <__aeabi_dmul>
 80069a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069a6:	9e01      	ldr	r6, [sp, #4]
 80069a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80069ac:	3501      	adds	r5, #1
 80069ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80069b2:	4628      	mov	r0, r5
 80069b4:	f7f9 fdb6 	bl	8000524 <__aeabi_i2d>
 80069b8:	4642      	mov	r2, r8
 80069ba:	464b      	mov	r3, r9
 80069bc:	f7f9 fe1c 	bl	80005f8 <__aeabi_dmul>
 80069c0:	4b86      	ldr	r3, [pc, #536]	; (8006bdc <_dtoa_r+0x64c>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	f7f9 fc62 	bl	800028c <__adddf3>
 80069c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80069cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069d0:	9303      	str	r3, [sp, #12]
 80069d2:	2e00      	cmp	r6, #0
 80069d4:	d158      	bne.n	8006a88 <_dtoa_r+0x4f8>
 80069d6:	4b82      	ldr	r3, [pc, #520]	; (8006be0 <_dtoa_r+0x650>)
 80069d8:	2200      	movs	r2, #0
 80069da:	4640      	mov	r0, r8
 80069dc:	4649      	mov	r1, r9
 80069de:	f7f9 fc53 	bl	8000288 <__aeabi_dsub>
 80069e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069e6:	4680      	mov	r8, r0
 80069e8:	4689      	mov	r9, r1
 80069ea:	f7fa f895 	bl	8000b18 <__aeabi_dcmpgt>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	f040 8296 	bne.w	8006f20 <_dtoa_r+0x990>
 80069f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80069f8:	4640      	mov	r0, r8
 80069fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069fe:	4649      	mov	r1, r9
 8006a00:	f7fa f86c 	bl	8000adc <__aeabi_dcmplt>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	f040 8289 	bne.w	8006f1c <_dtoa_r+0x98c>
 8006a0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006a0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f2c0 814e 	blt.w	8006cb2 <_dtoa_r+0x722>
 8006a16:	f1bb 0f0e 	cmp.w	fp, #14
 8006a1a:	f300 814a 	bgt.w	8006cb2 <_dtoa_r+0x722>
 8006a1e:	4b6b      	ldr	r3, [pc, #428]	; (8006bcc <_dtoa_r+0x63c>)
 8006a20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f280 80dc 	bge.w	8006be8 <_dtoa_r+0x658>
 8006a30:	9b04      	ldr	r3, [sp, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f300 80d8 	bgt.w	8006be8 <_dtoa_r+0x658>
 8006a38:	f040 826f 	bne.w	8006f1a <_dtoa_r+0x98a>
 8006a3c:	4b68      	ldr	r3, [pc, #416]	; (8006be0 <_dtoa_r+0x650>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	4640      	mov	r0, r8
 8006a42:	4649      	mov	r1, r9
 8006a44:	f7f9 fdd8 	bl	80005f8 <__aeabi_dmul>
 8006a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a4c:	f7fa f85a 	bl	8000b04 <__aeabi_dcmpge>
 8006a50:	9e04      	ldr	r6, [sp, #16]
 8006a52:	4637      	mov	r7, r6
 8006a54:	2800      	cmp	r0, #0
 8006a56:	f040 8245 	bne.w	8006ee4 <_dtoa_r+0x954>
 8006a5a:	9d00      	ldr	r5, [sp, #0]
 8006a5c:	2331      	movs	r3, #49	; 0x31
 8006a5e:	f805 3b01 	strb.w	r3, [r5], #1
 8006a62:	f10b 0b01 	add.w	fp, fp, #1
 8006a66:	e241      	b.n	8006eec <_dtoa_r+0x95c>
 8006a68:	07f2      	lsls	r2, r6, #31
 8006a6a:	d505      	bpl.n	8006a78 <_dtoa_r+0x4e8>
 8006a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a70:	f7f9 fdc2 	bl	80005f8 <__aeabi_dmul>
 8006a74:	3501      	adds	r5, #1
 8006a76:	2301      	movs	r3, #1
 8006a78:	1076      	asrs	r6, r6, #1
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	e773      	b.n	8006966 <_dtoa_r+0x3d6>
 8006a7e:	2502      	movs	r5, #2
 8006a80:	e775      	b.n	800696e <_dtoa_r+0x3de>
 8006a82:	9e04      	ldr	r6, [sp, #16]
 8006a84:	465f      	mov	r7, fp
 8006a86:	e792      	b.n	80069ae <_dtoa_r+0x41e>
 8006a88:	9900      	ldr	r1, [sp, #0]
 8006a8a:	4b50      	ldr	r3, [pc, #320]	; (8006bcc <_dtoa_r+0x63c>)
 8006a8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a90:	4431      	add	r1, r6
 8006a92:	9102      	str	r1, [sp, #8]
 8006a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a96:	eeb0 9a47 	vmov.f32	s18, s14
 8006a9a:	eef0 9a67 	vmov.f32	s19, s15
 8006a9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006aa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006aa6:	2900      	cmp	r1, #0
 8006aa8:	d044      	beq.n	8006b34 <_dtoa_r+0x5a4>
 8006aaa:	494e      	ldr	r1, [pc, #312]	; (8006be4 <_dtoa_r+0x654>)
 8006aac:	2000      	movs	r0, #0
 8006aae:	f7f9 fecd 	bl	800084c <__aeabi_ddiv>
 8006ab2:	ec53 2b19 	vmov	r2, r3, d9
 8006ab6:	f7f9 fbe7 	bl	8000288 <__aeabi_dsub>
 8006aba:	9d00      	ldr	r5, [sp, #0]
 8006abc:	ec41 0b19 	vmov	d9, r0, r1
 8006ac0:	4649      	mov	r1, r9
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	f7fa f848 	bl	8000b58 <__aeabi_d2iz>
 8006ac8:	4606      	mov	r6, r0
 8006aca:	f7f9 fd2b 	bl	8000524 <__aeabi_i2d>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	f7f9 fbd7 	bl	8000288 <__aeabi_dsub>
 8006ada:	3630      	adds	r6, #48	; 0x30
 8006adc:	f805 6b01 	strb.w	r6, [r5], #1
 8006ae0:	ec53 2b19 	vmov	r2, r3, d9
 8006ae4:	4680      	mov	r8, r0
 8006ae6:	4689      	mov	r9, r1
 8006ae8:	f7f9 fff8 	bl	8000adc <__aeabi_dcmplt>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d164      	bne.n	8006bba <_dtoa_r+0x62a>
 8006af0:	4642      	mov	r2, r8
 8006af2:	464b      	mov	r3, r9
 8006af4:	4937      	ldr	r1, [pc, #220]	; (8006bd4 <_dtoa_r+0x644>)
 8006af6:	2000      	movs	r0, #0
 8006af8:	f7f9 fbc6 	bl	8000288 <__aeabi_dsub>
 8006afc:	ec53 2b19 	vmov	r2, r3, d9
 8006b00:	f7f9 ffec 	bl	8000adc <__aeabi_dcmplt>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	f040 80b6 	bne.w	8006c76 <_dtoa_r+0x6e6>
 8006b0a:	9b02      	ldr	r3, [sp, #8]
 8006b0c:	429d      	cmp	r5, r3
 8006b0e:	f43f af7c 	beq.w	8006a0a <_dtoa_r+0x47a>
 8006b12:	4b31      	ldr	r3, [pc, #196]	; (8006bd8 <_dtoa_r+0x648>)
 8006b14:	ec51 0b19 	vmov	r0, r1, d9
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f7f9 fd6d 	bl	80005f8 <__aeabi_dmul>
 8006b1e:	4b2e      	ldr	r3, [pc, #184]	; (8006bd8 <_dtoa_r+0x648>)
 8006b20:	ec41 0b19 	vmov	d9, r0, r1
 8006b24:	2200      	movs	r2, #0
 8006b26:	4640      	mov	r0, r8
 8006b28:	4649      	mov	r1, r9
 8006b2a:	f7f9 fd65 	bl	80005f8 <__aeabi_dmul>
 8006b2e:	4680      	mov	r8, r0
 8006b30:	4689      	mov	r9, r1
 8006b32:	e7c5      	b.n	8006ac0 <_dtoa_r+0x530>
 8006b34:	ec51 0b17 	vmov	r0, r1, d7
 8006b38:	f7f9 fd5e 	bl	80005f8 <__aeabi_dmul>
 8006b3c:	9b02      	ldr	r3, [sp, #8]
 8006b3e:	9d00      	ldr	r5, [sp, #0]
 8006b40:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b42:	ec41 0b19 	vmov	d9, r0, r1
 8006b46:	4649      	mov	r1, r9
 8006b48:	4640      	mov	r0, r8
 8006b4a:	f7fa f805 	bl	8000b58 <__aeabi_d2iz>
 8006b4e:	4606      	mov	r6, r0
 8006b50:	f7f9 fce8 	bl	8000524 <__aeabi_i2d>
 8006b54:	3630      	adds	r6, #48	; 0x30
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4640      	mov	r0, r8
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	f7f9 fb93 	bl	8000288 <__aeabi_dsub>
 8006b62:	f805 6b01 	strb.w	r6, [r5], #1
 8006b66:	9b02      	ldr	r3, [sp, #8]
 8006b68:	429d      	cmp	r5, r3
 8006b6a:	4680      	mov	r8, r0
 8006b6c:	4689      	mov	r9, r1
 8006b6e:	f04f 0200 	mov.w	r2, #0
 8006b72:	d124      	bne.n	8006bbe <_dtoa_r+0x62e>
 8006b74:	4b1b      	ldr	r3, [pc, #108]	; (8006be4 <_dtoa_r+0x654>)
 8006b76:	ec51 0b19 	vmov	r0, r1, d9
 8006b7a:	f7f9 fb87 	bl	800028c <__adddf3>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	4640      	mov	r0, r8
 8006b84:	4649      	mov	r1, r9
 8006b86:	f7f9 ffc7 	bl	8000b18 <__aeabi_dcmpgt>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d173      	bne.n	8006c76 <_dtoa_r+0x6e6>
 8006b8e:	ec53 2b19 	vmov	r2, r3, d9
 8006b92:	4914      	ldr	r1, [pc, #80]	; (8006be4 <_dtoa_r+0x654>)
 8006b94:	2000      	movs	r0, #0
 8006b96:	f7f9 fb77 	bl	8000288 <__aeabi_dsub>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4640      	mov	r0, r8
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	f7f9 ff9b 	bl	8000adc <__aeabi_dcmplt>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	f43f af2f 	beq.w	8006a0a <_dtoa_r+0x47a>
 8006bac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006bae:	1e6b      	subs	r3, r5, #1
 8006bb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bb6:	2b30      	cmp	r3, #48	; 0x30
 8006bb8:	d0f8      	beq.n	8006bac <_dtoa_r+0x61c>
 8006bba:	46bb      	mov	fp, r7
 8006bbc:	e04a      	b.n	8006c54 <_dtoa_r+0x6c4>
 8006bbe:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <_dtoa_r+0x648>)
 8006bc0:	f7f9 fd1a 	bl	80005f8 <__aeabi_dmul>
 8006bc4:	4680      	mov	r8, r0
 8006bc6:	4689      	mov	r9, r1
 8006bc8:	e7bd      	b.n	8006b46 <_dtoa_r+0x5b6>
 8006bca:	bf00      	nop
 8006bcc:	08008e20 	.word	0x08008e20
 8006bd0:	08008df8 	.word	0x08008df8
 8006bd4:	3ff00000 	.word	0x3ff00000
 8006bd8:	40240000 	.word	0x40240000
 8006bdc:	401c0000 	.word	0x401c0000
 8006be0:	40140000 	.word	0x40140000
 8006be4:	3fe00000 	.word	0x3fe00000
 8006be8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006bec:	9d00      	ldr	r5, [sp, #0]
 8006bee:	4642      	mov	r2, r8
 8006bf0:	464b      	mov	r3, r9
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	4639      	mov	r1, r7
 8006bf6:	f7f9 fe29 	bl	800084c <__aeabi_ddiv>
 8006bfa:	f7f9 ffad 	bl	8000b58 <__aeabi_d2iz>
 8006bfe:	9001      	str	r0, [sp, #4]
 8006c00:	f7f9 fc90 	bl	8000524 <__aeabi_i2d>
 8006c04:	4642      	mov	r2, r8
 8006c06:	464b      	mov	r3, r9
 8006c08:	f7f9 fcf6 	bl	80005f8 <__aeabi_dmul>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4630      	mov	r0, r6
 8006c12:	4639      	mov	r1, r7
 8006c14:	f7f9 fb38 	bl	8000288 <__aeabi_dsub>
 8006c18:	9e01      	ldr	r6, [sp, #4]
 8006c1a:	9f04      	ldr	r7, [sp, #16]
 8006c1c:	3630      	adds	r6, #48	; 0x30
 8006c1e:	f805 6b01 	strb.w	r6, [r5], #1
 8006c22:	9e00      	ldr	r6, [sp, #0]
 8006c24:	1bae      	subs	r6, r5, r6
 8006c26:	42b7      	cmp	r7, r6
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	d134      	bne.n	8006c98 <_dtoa_r+0x708>
 8006c2e:	f7f9 fb2d 	bl	800028c <__adddf3>
 8006c32:	4642      	mov	r2, r8
 8006c34:	464b      	mov	r3, r9
 8006c36:	4606      	mov	r6, r0
 8006c38:	460f      	mov	r7, r1
 8006c3a:	f7f9 ff6d 	bl	8000b18 <__aeabi_dcmpgt>
 8006c3e:	b9c8      	cbnz	r0, 8006c74 <_dtoa_r+0x6e4>
 8006c40:	4642      	mov	r2, r8
 8006c42:	464b      	mov	r3, r9
 8006c44:	4630      	mov	r0, r6
 8006c46:	4639      	mov	r1, r7
 8006c48:	f7f9 ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c4c:	b110      	cbz	r0, 8006c54 <_dtoa_r+0x6c4>
 8006c4e:	9b01      	ldr	r3, [sp, #4]
 8006c50:	07db      	lsls	r3, r3, #31
 8006c52:	d40f      	bmi.n	8006c74 <_dtoa_r+0x6e4>
 8006c54:	4651      	mov	r1, sl
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 fbcc 	bl	80073f4 <_Bfree>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c60:	702b      	strb	r3, [r5, #0]
 8006c62:	f10b 0301 	add.w	r3, fp, #1
 8006c66:	6013      	str	r3, [r2, #0]
 8006c68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f43f ace2 	beq.w	8006634 <_dtoa_r+0xa4>
 8006c70:	601d      	str	r5, [r3, #0]
 8006c72:	e4df      	b.n	8006634 <_dtoa_r+0xa4>
 8006c74:	465f      	mov	r7, fp
 8006c76:	462b      	mov	r3, r5
 8006c78:	461d      	mov	r5, r3
 8006c7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c7e:	2a39      	cmp	r2, #57	; 0x39
 8006c80:	d106      	bne.n	8006c90 <_dtoa_r+0x700>
 8006c82:	9a00      	ldr	r2, [sp, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d1f7      	bne.n	8006c78 <_dtoa_r+0x6e8>
 8006c88:	9900      	ldr	r1, [sp, #0]
 8006c8a:	2230      	movs	r2, #48	; 0x30
 8006c8c:	3701      	adds	r7, #1
 8006c8e:	700a      	strb	r2, [r1, #0]
 8006c90:	781a      	ldrb	r2, [r3, #0]
 8006c92:	3201      	adds	r2, #1
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	e790      	b.n	8006bba <_dtoa_r+0x62a>
 8006c98:	4ba3      	ldr	r3, [pc, #652]	; (8006f28 <_dtoa_r+0x998>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f7f9 fcac 	bl	80005f8 <__aeabi_dmul>
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	460f      	mov	r7, r1
 8006ca8:	f7f9 ff0e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	d09e      	beq.n	8006bee <_dtoa_r+0x65e>
 8006cb0:	e7d0      	b.n	8006c54 <_dtoa_r+0x6c4>
 8006cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cb4:	2a00      	cmp	r2, #0
 8006cb6:	f000 80ca 	beq.w	8006e4e <_dtoa_r+0x8be>
 8006cba:	9a07      	ldr	r2, [sp, #28]
 8006cbc:	2a01      	cmp	r2, #1
 8006cbe:	f300 80ad 	bgt.w	8006e1c <_dtoa_r+0x88c>
 8006cc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cc4:	2a00      	cmp	r2, #0
 8006cc6:	f000 80a5 	beq.w	8006e14 <_dtoa_r+0x884>
 8006cca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cce:	9e08      	ldr	r6, [sp, #32]
 8006cd0:	9d05      	ldr	r5, [sp, #20]
 8006cd2:	9a05      	ldr	r2, [sp, #20]
 8006cd4:	441a      	add	r2, r3
 8006cd6:	9205      	str	r2, [sp, #20]
 8006cd8:	9a06      	ldr	r2, [sp, #24]
 8006cda:	2101      	movs	r1, #1
 8006cdc:	441a      	add	r2, r3
 8006cde:	4620      	mov	r0, r4
 8006ce0:	9206      	str	r2, [sp, #24]
 8006ce2:	f000 fc3d 	bl	8007560 <__i2b>
 8006ce6:	4607      	mov	r7, r0
 8006ce8:	b165      	cbz	r5, 8006d04 <_dtoa_r+0x774>
 8006cea:	9b06      	ldr	r3, [sp, #24]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dd09      	ble.n	8006d04 <_dtoa_r+0x774>
 8006cf0:	42ab      	cmp	r3, r5
 8006cf2:	9a05      	ldr	r2, [sp, #20]
 8006cf4:	bfa8      	it	ge
 8006cf6:	462b      	movge	r3, r5
 8006cf8:	1ad2      	subs	r2, r2, r3
 8006cfa:	9205      	str	r2, [sp, #20]
 8006cfc:	9a06      	ldr	r2, [sp, #24]
 8006cfe:	1aed      	subs	r5, r5, r3
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	9306      	str	r3, [sp, #24]
 8006d04:	9b08      	ldr	r3, [sp, #32]
 8006d06:	b1f3      	cbz	r3, 8006d46 <_dtoa_r+0x7b6>
 8006d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 80a3 	beq.w	8006e56 <_dtoa_r+0x8c6>
 8006d10:	2e00      	cmp	r6, #0
 8006d12:	dd10      	ble.n	8006d36 <_dtoa_r+0x7a6>
 8006d14:	4639      	mov	r1, r7
 8006d16:	4632      	mov	r2, r6
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f000 fce1 	bl	80076e0 <__pow5mult>
 8006d1e:	4652      	mov	r2, sl
 8006d20:	4601      	mov	r1, r0
 8006d22:	4607      	mov	r7, r0
 8006d24:	4620      	mov	r0, r4
 8006d26:	f000 fc31 	bl	800758c <__multiply>
 8006d2a:	4651      	mov	r1, sl
 8006d2c:	4680      	mov	r8, r0
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f000 fb60 	bl	80073f4 <_Bfree>
 8006d34:	46c2      	mov	sl, r8
 8006d36:	9b08      	ldr	r3, [sp, #32]
 8006d38:	1b9a      	subs	r2, r3, r6
 8006d3a:	d004      	beq.n	8006d46 <_dtoa_r+0x7b6>
 8006d3c:	4651      	mov	r1, sl
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f000 fcce 	bl	80076e0 <__pow5mult>
 8006d44:	4682      	mov	sl, r0
 8006d46:	2101      	movs	r1, #1
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 fc09 	bl	8007560 <__i2b>
 8006d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	4606      	mov	r6, r0
 8006d54:	f340 8081 	ble.w	8006e5a <_dtoa_r+0x8ca>
 8006d58:	461a      	mov	r2, r3
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f000 fcbf 	bl	80076e0 <__pow5mult>
 8006d62:	9b07      	ldr	r3, [sp, #28]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	4606      	mov	r6, r0
 8006d68:	dd7a      	ble.n	8006e60 <_dtoa_r+0x8d0>
 8006d6a:	f04f 0800 	mov.w	r8, #0
 8006d6e:	6933      	ldr	r3, [r6, #16]
 8006d70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d74:	6918      	ldr	r0, [r3, #16]
 8006d76:	f000 fba5 	bl	80074c4 <__hi0bits>
 8006d7a:	f1c0 0020 	rsb	r0, r0, #32
 8006d7e:	9b06      	ldr	r3, [sp, #24]
 8006d80:	4418      	add	r0, r3
 8006d82:	f010 001f 	ands.w	r0, r0, #31
 8006d86:	f000 8094 	beq.w	8006eb2 <_dtoa_r+0x922>
 8006d8a:	f1c0 0320 	rsb	r3, r0, #32
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	f340 8085 	ble.w	8006e9e <_dtoa_r+0x90e>
 8006d94:	9b05      	ldr	r3, [sp, #20]
 8006d96:	f1c0 001c 	rsb	r0, r0, #28
 8006d9a:	4403      	add	r3, r0
 8006d9c:	9305      	str	r3, [sp, #20]
 8006d9e:	9b06      	ldr	r3, [sp, #24]
 8006da0:	4403      	add	r3, r0
 8006da2:	4405      	add	r5, r0
 8006da4:	9306      	str	r3, [sp, #24]
 8006da6:	9b05      	ldr	r3, [sp, #20]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	dd05      	ble.n	8006db8 <_dtoa_r+0x828>
 8006dac:	4651      	mov	r1, sl
 8006dae:	461a      	mov	r2, r3
 8006db0:	4620      	mov	r0, r4
 8006db2:	f000 fcef 	bl	8007794 <__lshift>
 8006db6:	4682      	mov	sl, r0
 8006db8:	9b06      	ldr	r3, [sp, #24]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	dd05      	ble.n	8006dca <_dtoa_r+0x83a>
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 fce6 	bl	8007794 <__lshift>
 8006dc8:	4606      	mov	r6, r0
 8006dca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d072      	beq.n	8006eb6 <_dtoa_r+0x926>
 8006dd0:	4631      	mov	r1, r6
 8006dd2:	4650      	mov	r0, sl
 8006dd4:	f000 fd4a 	bl	800786c <__mcmp>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	da6c      	bge.n	8006eb6 <_dtoa_r+0x926>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4651      	mov	r1, sl
 8006de0:	220a      	movs	r2, #10
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 fb28 	bl	8007438 <__multadd>
 8006de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dee:	4682      	mov	sl, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 81b0 	beq.w	8007156 <_dtoa_r+0xbc6>
 8006df6:	2300      	movs	r3, #0
 8006df8:	4639      	mov	r1, r7
 8006dfa:	220a      	movs	r2, #10
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f000 fb1b 	bl	8007438 <__multadd>
 8006e02:	9b01      	ldr	r3, [sp, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	4607      	mov	r7, r0
 8006e08:	f300 8096 	bgt.w	8006f38 <_dtoa_r+0x9a8>
 8006e0c:	9b07      	ldr	r3, [sp, #28]
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	dc59      	bgt.n	8006ec6 <_dtoa_r+0x936>
 8006e12:	e091      	b.n	8006f38 <_dtoa_r+0x9a8>
 8006e14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e1a:	e758      	b.n	8006cce <_dtoa_r+0x73e>
 8006e1c:	9b04      	ldr	r3, [sp, #16]
 8006e1e:	1e5e      	subs	r6, r3, #1
 8006e20:	9b08      	ldr	r3, [sp, #32]
 8006e22:	42b3      	cmp	r3, r6
 8006e24:	bfbf      	itttt	lt
 8006e26:	9b08      	ldrlt	r3, [sp, #32]
 8006e28:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006e2a:	9608      	strlt	r6, [sp, #32]
 8006e2c:	1af3      	sublt	r3, r6, r3
 8006e2e:	bfb4      	ite	lt
 8006e30:	18d2      	addlt	r2, r2, r3
 8006e32:	1b9e      	subge	r6, r3, r6
 8006e34:	9b04      	ldr	r3, [sp, #16]
 8006e36:	bfbc      	itt	lt
 8006e38:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006e3a:	2600      	movlt	r6, #0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bfb7      	itett	lt
 8006e40:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006e44:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006e48:	1a9d      	sublt	r5, r3, r2
 8006e4a:	2300      	movlt	r3, #0
 8006e4c:	e741      	b.n	8006cd2 <_dtoa_r+0x742>
 8006e4e:	9e08      	ldr	r6, [sp, #32]
 8006e50:	9d05      	ldr	r5, [sp, #20]
 8006e52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006e54:	e748      	b.n	8006ce8 <_dtoa_r+0x758>
 8006e56:	9a08      	ldr	r2, [sp, #32]
 8006e58:	e770      	b.n	8006d3c <_dtoa_r+0x7ac>
 8006e5a:	9b07      	ldr	r3, [sp, #28]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	dc19      	bgt.n	8006e94 <_dtoa_r+0x904>
 8006e60:	9b02      	ldr	r3, [sp, #8]
 8006e62:	b9bb      	cbnz	r3, 8006e94 <_dtoa_r+0x904>
 8006e64:	9b03      	ldr	r3, [sp, #12]
 8006e66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e6a:	b99b      	cbnz	r3, 8006e94 <_dtoa_r+0x904>
 8006e6c:	9b03      	ldr	r3, [sp, #12]
 8006e6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e72:	0d1b      	lsrs	r3, r3, #20
 8006e74:	051b      	lsls	r3, r3, #20
 8006e76:	b183      	cbz	r3, 8006e9a <_dtoa_r+0x90a>
 8006e78:	9b05      	ldr	r3, [sp, #20]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	9305      	str	r3, [sp, #20]
 8006e7e:	9b06      	ldr	r3, [sp, #24]
 8006e80:	3301      	adds	r3, #1
 8006e82:	9306      	str	r3, [sp, #24]
 8006e84:	f04f 0801 	mov.w	r8, #1
 8006e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f47f af6f 	bne.w	8006d6e <_dtoa_r+0x7de>
 8006e90:	2001      	movs	r0, #1
 8006e92:	e774      	b.n	8006d7e <_dtoa_r+0x7ee>
 8006e94:	f04f 0800 	mov.w	r8, #0
 8006e98:	e7f6      	b.n	8006e88 <_dtoa_r+0x8f8>
 8006e9a:	4698      	mov	r8, r3
 8006e9c:	e7f4      	b.n	8006e88 <_dtoa_r+0x8f8>
 8006e9e:	d082      	beq.n	8006da6 <_dtoa_r+0x816>
 8006ea0:	9a05      	ldr	r2, [sp, #20]
 8006ea2:	331c      	adds	r3, #28
 8006ea4:	441a      	add	r2, r3
 8006ea6:	9205      	str	r2, [sp, #20]
 8006ea8:	9a06      	ldr	r2, [sp, #24]
 8006eaa:	441a      	add	r2, r3
 8006eac:	441d      	add	r5, r3
 8006eae:	9206      	str	r2, [sp, #24]
 8006eb0:	e779      	b.n	8006da6 <_dtoa_r+0x816>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	e7f4      	b.n	8006ea0 <_dtoa_r+0x910>
 8006eb6:	9b04      	ldr	r3, [sp, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	dc37      	bgt.n	8006f2c <_dtoa_r+0x99c>
 8006ebc:	9b07      	ldr	r3, [sp, #28]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	dd34      	ble.n	8006f2c <_dtoa_r+0x99c>
 8006ec2:	9b04      	ldr	r3, [sp, #16]
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	9b01      	ldr	r3, [sp, #4]
 8006ec8:	b963      	cbnz	r3, 8006ee4 <_dtoa_r+0x954>
 8006eca:	4631      	mov	r1, r6
 8006ecc:	2205      	movs	r2, #5
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f000 fab2 	bl	8007438 <__multadd>
 8006ed4:	4601      	mov	r1, r0
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	4650      	mov	r0, sl
 8006eda:	f000 fcc7 	bl	800786c <__mcmp>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	f73f adbb 	bgt.w	8006a5a <_dtoa_r+0x4ca>
 8006ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ee6:	9d00      	ldr	r5, [sp, #0]
 8006ee8:	ea6f 0b03 	mvn.w	fp, r3
 8006eec:	f04f 0800 	mov.w	r8, #0
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f000 fa7e 	bl	80073f4 <_Bfree>
 8006ef8:	2f00      	cmp	r7, #0
 8006efa:	f43f aeab 	beq.w	8006c54 <_dtoa_r+0x6c4>
 8006efe:	f1b8 0f00 	cmp.w	r8, #0
 8006f02:	d005      	beq.n	8006f10 <_dtoa_r+0x980>
 8006f04:	45b8      	cmp	r8, r7
 8006f06:	d003      	beq.n	8006f10 <_dtoa_r+0x980>
 8006f08:	4641      	mov	r1, r8
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f000 fa72 	bl	80073f4 <_Bfree>
 8006f10:	4639      	mov	r1, r7
 8006f12:	4620      	mov	r0, r4
 8006f14:	f000 fa6e 	bl	80073f4 <_Bfree>
 8006f18:	e69c      	b.n	8006c54 <_dtoa_r+0x6c4>
 8006f1a:	2600      	movs	r6, #0
 8006f1c:	4637      	mov	r7, r6
 8006f1e:	e7e1      	b.n	8006ee4 <_dtoa_r+0x954>
 8006f20:	46bb      	mov	fp, r7
 8006f22:	4637      	mov	r7, r6
 8006f24:	e599      	b.n	8006a5a <_dtoa_r+0x4ca>
 8006f26:	bf00      	nop
 8006f28:	40240000 	.word	0x40240000
 8006f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 80c8 	beq.w	80070c4 <_dtoa_r+0xb34>
 8006f34:	9b04      	ldr	r3, [sp, #16]
 8006f36:	9301      	str	r3, [sp, #4]
 8006f38:	2d00      	cmp	r5, #0
 8006f3a:	dd05      	ble.n	8006f48 <_dtoa_r+0x9b8>
 8006f3c:	4639      	mov	r1, r7
 8006f3e:	462a      	mov	r2, r5
 8006f40:	4620      	mov	r0, r4
 8006f42:	f000 fc27 	bl	8007794 <__lshift>
 8006f46:	4607      	mov	r7, r0
 8006f48:	f1b8 0f00 	cmp.w	r8, #0
 8006f4c:	d05b      	beq.n	8007006 <_dtoa_r+0xa76>
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	4620      	mov	r0, r4
 8006f52:	f000 fa0f 	bl	8007374 <_Balloc>
 8006f56:	4605      	mov	r5, r0
 8006f58:	b928      	cbnz	r0, 8006f66 <_dtoa_r+0x9d6>
 8006f5a:	4b83      	ldr	r3, [pc, #524]	; (8007168 <_dtoa_r+0xbd8>)
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006f62:	f7ff bb2e 	b.w	80065c2 <_dtoa_r+0x32>
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	3202      	adds	r2, #2
 8006f6a:	0092      	lsls	r2, r2, #2
 8006f6c:	f107 010c 	add.w	r1, r7, #12
 8006f70:	300c      	adds	r0, #12
 8006f72:	f000 ffab 	bl	8007ecc <memcpy>
 8006f76:	2201      	movs	r2, #1
 8006f78:	4629      	mov	r1, r5
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 fc0a 	bl	8007794 <__lshift>
 8006f80:	9b00      	ldr	r3, [sp, #0]
 8006f82:	3301      	adds	r3, #1
 8006f84:	9304      	str	r3, [sp, #16]
 8006f86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	9308      	str	r3, [sp, #32]
 8006f8e:	9b02      	ldr	r3, [sp, #8]
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	46b8      	mov	r8, r7
 8006f96:	9306      	str	r3, [sp, #24]
 8006f98:	4607      	mov	r7, r0
 8006f9a:	9b04      	ldr	r3, [sp, #16]
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	4650      	mov	r0, sl
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	f7ff fa6b 	bl	800647e <quorem>
 8006fa8:	4641      	mov	r1, r8
 8006faa:	9002      	str	r0, [sp, #8]
 8006fac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006fb0:	4650      	mov	r0, sl
 8006fb2:	f000 fc5b 	bl	800786c <__mcmp>
 8006fb6:	463a      	mov	r2, r7
 8006fb8:	9005      	str	r0, [sp, #20]
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f000 fc71 	bl	80078a4 <__mdiff>
 8006fc2:	68c2      	ldr	r2, [r0, #12]
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	bb02      	cbnz	r2, 800700a <_dtoa_r+0xa7a>
 8006fc8:	4601      	mov	r1, r0
 8006fca:	4650      	mov	r0, sl
 8006fcc:	f000 fc4e 	bl	800786c <__mcmp>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	9209      	str	r2, [sp, #36]	; 0x24
 8006fd8:	f000 fa0c 	bl	80073f4 <_Bfree>
 8006fdc:	9b07      	ldr	r3, [sp, #28]
 8006fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fe0:	9d04      	ldr	r5, [sp, #16]
 8006fe2:	ea43 0102 	orr.w	r1, r3, r2
 8006fe6:	9b06      	ldr	r3, [sp, #24]
 8006fe8:	4319      	orrs	r1, r3
 8006fea:	d110      	bne.n	800700e <_dtoa_r+0xa7e>
 8006fec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ff0:	d029      	beq.n	8007046 <_dtoa_r+0xab6>
 8006ff2:	9b05      	ldr	r3, [sp, #20]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	dd02      	ble.n	8006ffe <_dtoa_r+0xa6e>
 8006ff8:	9b02      	ldr	r3, [sp, #8]
 8006ffa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006ffe:	9b01      	ldr	r3, [sp, #4]
 8007000:	f883 9000 	strb.w	r9, [r3]
 8007004:	e774      	b.n	8006ef0 <_dtoa_r+0x960>
 8007006:	4638      	mov	r0, r7
 8007008:	e7ba      	b.n	8006f80 <_dtoa_r+0x9f0>
 800700a:	2201      	movs	r2, #1
 800700c:	e7e1      	b.n	8006fd2 <_dtoa_r+0xa42>
 800700e:	9b05      	ldr	r3, [sp, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	db04      	blt.n	800701e <_dtoa_r+0xa8e>
 8007014:	9907      	ldr	r1, [sp, #28]
 8007016:	430b      	orrs	r3, r1
 8007018:	9906      	ldr	r1, [sp, #24]
 800701a:	430b      	orrs	r3, r1
 800701c:	d120      	bne.n	8007060 <_dtoa_r+0xad0>
 800701e:	2a00      	cmp	r2, #0
 8007020:	dded      	ble.n	8006ffe <_dtoa_r+0xa6e>
 8007022:	4651      	mov	r1, sl
 8007024:	2201      	movs	r2, #1
 8007026:	4620      	mov	r0, r4
 8007028:	f000 fbb4 	bl	8007794 <__lshift>
 800702c:	4631      	mov	r1, r6
 800702e:	4682      	mov	sl, r0
 8007030:	f000 fc1c 	bl	800786c <__mcmp>
 8007034:	2800      	cmp	r0, #0
 8007036:	dc03      	bgt.n	8007040 <_dtoa_r+0xab0>
 8007038:	d1e1      	bne.n	8006ffe <_dtoa_r+0xa6e>
 800703a:	f019 0f01 	tst.w	r9, #1
 800703e:	d0de      	beq.n	8006ffe <_dtoa_r+0xa6e>
 8007040:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007044:	d1d8      	bne.n	8006ff8 <_dtoa_r+0xa68>
 8007046:	9a01      	ldr	r2, [sp, #4]
 8007048:	2339      	movs	r3, #57	; 0x39
 800704a:	7013      	strb	r3, [r2, #0]
 800704c:	462b      	mov	r3, r5
 800704e:	461d      	mov	r5, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007056:	2a39      	cmp	r2, #57	; 0x39
 8007058:	d06c      	beq.n	8007134 <_dtoa_r+0xba4>
 800705a:	3201      	adds	r2, #1
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	e747      	b.n	8006ef0 <_dtoa_r+0x960>
 8007060:	2a00      	cmp	r2, #0
 8007062:	dd07      	ble.n	8007074 <_dtoa_r+0xae4>
 8007064:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007068:	d0ed      	beq.n	8007046 <_dtoa_r+0xab6>
 800706a:	9a01      	ldr	r2, [sp, #4]
 800706c:	f109 0301 	add.w	r3, r9, #1
 8007070:	7013      	strb	r3, [r2, #0]
 8007072:	e73d      	b.n	8006ef0 <_dtoa_r+0x960>
 8007074:	9b04      	ldr	r3, [sp, #16]
 8007076:	9a08      	ldr	r2, [sp, #32]
 8007078:	f803 9c01 	strb.w	r9, [r3, #-1]
 800707c:	4293      	cmp	r3, r2
 800707e:	d043      	beq.n	8007108 <_dtoa_r+0xb78>
 8007080:	4651      	mov	r1, sl
 8007082:	2300      	movs	r3, #0
 8007084:	220a      	movs	r2, #10
 8007086:	4620      	mov	r0, r4
 8007088:	f000 f9d6 	bl	8007438 <__multadd>
 800708c:	45b8      	cmp	r8, r7
 800708e:	4682      	mov	sl, r0
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	f04f 020a 	mov.w	r2, #10
 8007098:	4641      	mov	r1, r8
 800709a:	4620      	mov	r0, r4
 800709c:	d107      	bne.n	80070ae <_dtoa_r+0xb1e>
 800709e:	f000 f9cb 	bl	8007438 <__multadd>
 80070a2:	4680      	mov	r8, r0
 80070a4:	4607      	mov	r7, r0
 80070a6:	9b04      	ldr	r3, [sp, #16]
 80070a8:	3301      	adds	r3, #1
 80070aa:	9304      	str	r3, [sp, #16]
 80070ac:	e775      	b.n	8006f9a <_dtoa_r+0xa0a>
 80070ae:	f000 f9c3 	bl	8007438 <__multadd>
 80070b2:	4639      	mov	r1, r7
 80070b4:	4680      	mov	r8, r0
 80070b6:	2300      	movs	r3, #0
 80070b8:	220a      	movs	r2, #10
 80070ba:	4620      	mov	r0, r4
 80070bc:	f000 f9bc 	bl	8007438 <__multadd>
 80070c0:	4607      	mov	r7, r0
 80070c2:	e7f0      	b.n	80070a6 <_dtoa_r+0xb16>
 80070c4:	9b04      	ldr	r3, [sp, #16]
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	9d00      	ldr	r5, [sp, #0]
 80070ca:	4631      	mov	r1, r6
 80070cc:	4650      	mov	r0, sl
 80070ce:	f7ff f9d6 	bl	800647e <quorem>
 80070d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80070d6:	9b00      	ldr	r3, [sp, #0]
 80070d8:	f805 9b01 	strb.w	r9, [r5], #1
 80070dc:	1aea      	subs	r2, r5, r3
 80070de:	9b01      	ldr	r3, [sp, #4]
 80070e0:	4293      	cmp	r3, r2
 80070e2:	dd07      	ble.n	80070f4 <_dtoa_r+0xb64>
 80070e4:	4651      	mov	r1, sl
 80070e6:	2300      	movs	r3, #0
 80070e8:	220a      	movs	r2, #10
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 f9a4 	bl	8007438 <__multadd>
 80070f0:	4682      	mov	sl, r0
 80070f2:	e7ea      	b.n	80070ca <_dtoa_r+0xb3a>
 80070f4:	9b01      	ldr	r3, [sp, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bfc8      	it	gt
 80070fa:	461d      	movgt	r5, r3
 80070fc:	9b00      	ldr	r3, [sp, #0]
 80070fe:	bfd8      	it	le
 8007100:	2501      	movle	r5, #1
 8007102:	441d      	add	r5, r3
 8007104:	f04f 0800 	mov.w	r8, #0
 8007108:	4651      	mov	r1, sl
 800710a:	2201      	movs	r2, #1
 800710c:	4620      	mov	r0, r4
 800710e:	f000 fb41 	bl	8007794 <__lshift>
 8007112:	4631      	mov	r1, r6
 8007114:	4682      	mov	sl, r0
 8007116:	f000 fba9 	bl	800786c <__mcmp>
 800711a:	2800      	cmp	r0, #0
 800711c:	dc96      	bgt.n	800704c <_dtoa_r+0xabc>
 800711e:	d102      	bne.n	8007126 <_dtoa_r+0xb96>
 8007120:	f019 0f01 	tst.w	r9, #1
 8007124:	d192      	bne.n	800704c <_dtoa_r+0xabc>
 8007126:	462b      	mov	r3, r5
 8007128:	461d      	mov	r5, r3
 800712a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800712e:	2a30      	cmp	r2, #48	; 0x30
 8007130:	d0fa      	beq.n	8007128 <_dtoa_r+0xb98>
 8007132:	e6dd      	b.n	8006ef0 <_dtoa_r+0x960>
 8007134:	9a00      	ldr	r2, [sp, #0]
 8007136:	429a      	cmp	r2, r3
 8007138:	d189      	bne.n	800704e <_dtoa_r+0xabe>
 800713a:	f10b 0b01 	add.w	fp, fp, #1
 800713e:	2331      	movs	r3, #49	; 0x31
 8007140:	e796      	b.n	8007070 <_dtoa_r+0xae0>
 8007142:	4b0a      	ldr	r3, [pc, #40]	; (800716c <_dtoa_r+0xbdc>)
 8007144:	f7ff ba99 	b.w	800667a <_dtoa_r+0xea>
 8007148:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800714a:	2b00      	cmp	r3, #0
 800714c:	f47f aa6d 	bne.w	800662a <_dtoa_r+0x9a>
 8007150:	4b07      	ldr	r3, [pc, #28]	; (8007170 <_dtoa_r+0xbe0>)
 8007152:	f7ff ba92 	b.w	800667a <_dtoa_r+0xea>
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	dcb5      	bgt.n	80070c8 <_dtoa_r+0xb38>
 800715c:	9b07      	ldr	r3, [sp, #28]
 800715e:	2b02      	cmp	r3, #2
 8007160:	f73f aeb1 	bgt.w	8006ec6 <_dtoa_r+0x936>
 8007164:	e7b0      	b.n	80070c8 <_dtoa_r+0xb38>
 8007166:	bf00      	nop
 8007168:	08008d88 	.word	0x08008d88
 800716c:	08008ce8 	.word	0x08008ce8
 8007170:	08008d0c 	.word	0x08008d0c

08007174 <_free_r>:
 8007174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007176:	2900      	cmp	r1, #0
 8007178:	d044      	beq.n	8007204 <_free_r+0x90>
 800717a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800717e:	9001      	str	r0, [sp, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	f1a1 0404 	sub.w	r4, r1, #4
 8007186:	bfb8      	it	lt
 8007188:	18e4      	addlt	r4, r4, r3
 800718a:	f000 f8e7 	bl	800735c <__malloc_lock>
 800718e:	4a1e      	ldr	r2, [pc, #120]	; (8007208 <_free_r+0x94>)
 8007190:	9801      	ldr	r0, [sp, #4]
 8007192:	6813      	ldr	r3, [r2, #0]
 8007194:	b933      	cbnz	r3, 80071a4 <_free_r+0x30>
 8007196:	6063      	str	r3, [r4, #4]
 8007198:	6014      	str	r4, [r2, #0]
 800719a:	b003      	add	sp, #12
 800719c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071a0:	f000 b8e2 	b.w	8007368 <__malloc_unlock>
 80071a4:	42a3      	cmp	r3, r4
 80071a6:	d908      	bls.n	80071ba <_free_r+0x46>
 80071a8:	6825      	ldr	r5, [r4, #0]
 80071aa:	1961      	adds	r1, r4, r5
 80071ac:	428b      	cmp	r3, r1
 80071ae:	bf01      	itttt	eq
 80071b0:	6819      	ldreq	r1, [r3, #0]
 80071b2:	685b      	ldreq	r3, [r3, #4]
 80071b4:	1949      	addeq	r1, r1, r5
 80071b6:	6021      	streq	r1, [r4, #0]
 80071b8:	e7ed      	b.n	8007196 <_free_r+0x22>
 80071ba:	461a      	mov	r2, r3
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	b10b      	cbz	r3, 80071c4 <_free_r+0x50>
 80071c0:	42a3      	cmp	r3, r4
 80071c2:	d9fa      	bls.n	80071ba <_free_r+0x46>
 80071c4:	6811      	ldr	r1, [r2, #0]
 80071c6:	1855      	adds	r5, r2, r1
 80071c8:	42a5      	cmp	r5, r4
 80071ca:	d10b      	bne.n	80071e4 <_free_r+0x70>
 80071cc:	6824      	ldr	r4, [r4, #0]
 80071ce:	4421      	add	r1, r4
 80071d0:	1854      	adds	r4, r2, r1
 80071d2:	42a3      	cmp	r3, r4
 80071d4:	6011      	str	r1, [r2, #0]
 80071d6:	d1e0      	bne.n	800719a <_free_r+0x26>
 80071d8:	681c      	ldr	r4, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	6053      	str	r3, [r2, #4]
 80071de:	440c      	add	r4, r1
 80071e0:	6014      	str	r4, [r2, #0]
 80071e2:	e7da      	b.n	800719a <_free_r+0x26>
 80071e4:	d902      	bls.n	80071ec <_free_r+0x78>
 80071e6:	230c      	movs	r3, #12
 80071e8:	6003      	str	r3, [r0, #0]
 80071ea:	e7d6      	b.n	800719a <_free_r+0x26>
 80071ec:	6825      	ldr	r5, [r4, #0]
 80071ee:	1961      	adds	r1, r4, r5
 80071f0:	428b      	cmp	r3, r1
 80071f2:	bf04      	itt	eq
 80071f4:	6819      	ldreq	r1, [r3, #0]
 80071f6:	685b      	ldreq	r3, [r3, #4]
 80071f8:	6063      	str	r3, [r4, #4]
 80071fa:	bf04      	itt	eq
 80071fc:	1949      	addeq	r1, r1, r5
 80071fe:	6021      	streq	r1, [r4, #0]
 8007200:	6054      	str	r4, [r2, #4]
 8007202:	e7ca      	b.n	800719a <_free_r+0x26>
 8007204:	b003      	add	sp, #12
 8007206:	bd30      	pop	{r4, r5, pc}
 8007208:	20000518 	.word	0x20000518

0800720c <malloc>:
 800720c:	4b02      	ldr	r3, [pc, #8]	; (8007218 <malloc+0xc>)
 800720e:	4601      	mov	r1, r0
 8007210:	6818      	ldr	r0, [r3, #0]
 8007212:	f000 b823 	b.w	800725c <_malloc_r>
 8007216:	bf00      	nop
 8007218:	200000f4 	.word	0x200000f4

0800721c <sbrk_aligned>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	4e0e      	ldr	r6, [pc, #56]	; (8007258 <sbrk_aligned+0x3c>)
 8007220:	460c      	mov	r4, r1
 8007222:	6831      	ldr	r1, [r6, #0]
 8007224:	4605      	mov	r5, r0
 8007226:	b911      	cbnz	r1, 800722e <sbrk_aligned+0x12>
 8007228:	f000 fe40 	bl	8007eac <_sbrk_r>
 800722c:	6030      	str	r0, [r6, #0]
 800722e:	4621      	mov	r1, r4
 8007230:	4628      	mov	r0, r5
 8007232:	f000 fe3b 	bl	8007eac <_sbrk_r>
 8007236:	1c43      	adds	r3, r0, #1
 8007238:	d00a      	beq.n	8007250 <sbrk_aligned+0x34>
 800723a:	1cc4      	adds	r4, r0, #3
 800723c:	f024 0403 	bic.w	r4, r4, #3
 8007240:	42a0      	cmp	r0, r4
 8007242:	d007      	beq.n	8007254 <sbrk_aligned+0x38>
 8007244:	1a21      	subs	r1, r4, r0
 8007246:	4628      	mov	r0, r5
 8007248:	f000 fe30 	bl	8007eac <_sbrk_r>
 800724c:	3001      	adds	r0, #1
 800724e:	d101      	bne.n	8007254 <sbrk_aligned+0x38>
 8007250:	f04f 34ff 	mov.w	r4, #4294967295
 8007254:	4620      	mov	r0, r4
 8007256:	bd70      	pop	{r4, r5, r6, pc}
 8007258:	2000051c 	.word	0x2000051c

0800725c <_malloc_r>:
 800725c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007260:	1ccd      	adds	r5, r1, #3
 8007262:	f025 0503 	bic.w	r5, r5, #3
 8007266:	3508      	adds	r5, #8
 8007268:	2d0c      	cmp	r5, #12
 800726a:	bf38      	it	cc
 800726c:	250c      	movcc	r5, #12
 800726e:	2d00      	cmp	r5, #0
 8007270:	4607      	mov	r7, r0
 8007272:	db01      	blt.n	8007278 <_malloc_r+0x1c>
 8007274:	42a9      	cmp	r1, r5
 8007276:	d905      	bls.n	8007284 <_malloc_r+0x28>
 8007278:	230c      	movs	r3, #12
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	2600      	movs	r6, #0
 800727e:	4630      	mov	r0, r6
 8007280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007284:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007358 <_malloc_r+0xfc>
 8007288:	f000 f868 	bl	800735c <__malloc_lock>
 800728c:	f8d8 3000 	ldr.w	r3, [r8]
 8007290:	461c      	mov	r4, r3
 8007292:	bb5c      	cbnz	r4, 80072ec <_malloc_r+0x90>
 8007294:	4629      	mov	r1, r5
 8007296:	4638      	mov	r0, r7
 8007298:	f7ff ffc0 	bl	800721c <sbrk_aligned>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	4604      	mov	r4, r0
 80072a0:	d155      	bne.n	800734e <_malloc_r+0xf2>
 80072a2:	f8d8 4000 	ldr.w	r4, [r8]
 80072a6:	4626      	mov	r6, r4
 80072a8:	2e00      	cmp	r6, #0
 80072aa:	d145      	bne.n	8007338 <_malloc_r+0xdc>
 80072ac:	2c00      	cmp	r4, #0
 80072ae:	d048      	beq.n	8007342 <_malloc_r+0xe6>
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	4631      	mov	r1, r6
 80072b4:	4638      	mov	r0, r7
 80072b6:	eb04 0903 	add.w	r9, r4, r3
 80072ba:	f000 fdf7 	bl	8007eac <_sbrk_r>
 80072be:	4581      	cmp	r9, r0
 80072c0:	d13f      	bne.n	8007342 <_malloc_r+0xe6>
 80072c2:	6821      	ldr	r1, [r4, #0]
 80072c4:	1a6d      	subs	r5, r5, r1
 80072c6:	4629      	mov	r1, r5
 80072c8:	4638      	mov	r0, r7
 80072ca:	f7ff ffa7 	bl	800721c <sbrk_aligned>
 80072ce:	3001      	adds	r0, #1
 80072d0:	d037      	beq.n	8007342 <_malloc_r+0xe6>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	442b      	add	r3, r5
 80072d6:	6023      	str	r3, [r4, #0]
 80072d8:	f8d8 3000 	ldr.w	r3, [r8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d038      	beq.n	8007352 <_malloc_r+0xf6>
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	42a2      	cmp	r2, r4
 80072e4:	d12b      	bne.n	800733e <_malloc_r+0xe2>
 80072e6:	2200      	movs	r2, #0
 80072e8:	605a      	str	r2, [r3, #4]
 80072ea:	e00f      	b.n	800730c <_malloc_r+0xb0>
 80072ec:	6822      	ldr	r2, [r4, #0]
 80072ee:	1b52      	subs	r2, r2, r5
 80072f0:	d41f      	bmi.n	8007332 <_malloc_r+0xd6>
 80072f2:	2a0b      	cmp	r2, #11
 80072f4:	d917      	bls.n	8007326 <_malloc_r+0xca>
 80072f6:	1961      	adds	r1, r4, r5
 80072f8:	42a3      	cmp	r3, r4
 80072fa:	6025      	str	r5, [r4, #0]
 80072fc:	bf18      	it	ne
 80072fe:	6059      	strne	r1, [r3, #4]
 8007300:	6863      	ldr	r3, [r4, #4]
 8007302:	bf08      	it	eq
 8007304:	f8c8 1000 	streq.w	r1, [r8]
 8007308:	5162      	str	r2, [r4, r5]
 800730a:	604b      	str	r3, [r1, #4]
 800730c:	4638      	mov	r0, r7
 800730e:	f104 060b 	add.w	r6, r4, #11
 8007312:	f000 f829 	bl	8007368 <__malloc_unlock>
 8007316:	f026 0607 	bic.w	r6, r6, #7
 800731a:	1d23      	adds	r3, r4, #4
 800731c:	1af2      	subs	r2, r6, r3
 800731e:	d0ae      	beq.n	800727e <_malloc_r+0x22>
 8007320:	1b9b      	subs	r3, r3, r6
 8007322:	50a3      	str	r3, [r4, r2]
 8007324:	e7ab      	b.n	800727e <_malloc_r+0x22>
 8007326:	42a3      	cmp	r3, r4
 8007328:	6862      	ldr	r2, [r4, #4]
 800732a:	d1dd      	bne.n	80072e8 <_malloc_r+0x8c>
 800732c:	f8c8 2000 	str.w	r2, [r8]
 8007330:	e7ec      	b.n	800730c <_malloc_r+0xb0>
 8007332:	4623      	mov	r3, r4
 8007334:	6864      	ldr	r4, [r4, #4]
 8007336:	e7ac      	b.n	8007292 <_malloc_r+0x36>
 8007338:	4634      	mov	r4, r6
 800733a:	6876      	ldr	r6, [r6, #4]
 800733c:	e7b4      	b.n	80072a8 <_malloc_r+0x4c>
 800733e:	4613      	mov	r3, r2
 8007340:	e7cc      	b.n	80072dc <_malloc_r+0x80>
 8007342:	230c      	movs	r3, #12
 8007344:	603b      	str	r3, [r7, #0]
 8007346:	4638      	mov	r0, r7
 8007348:	f000 f80e 	bl	8007368 <__malloc_unlock>
 800734c:	e797      	b.n	800727e <_malloc_r+0x22>
 800734e:	6025      	str	r5, [r4, #0]
 8007350:	e7dc      	b.n	800730c <_malloc_r+0xb0>
 8007352:	605b      	str	r3, [r3, #4]
 8007354:	deff      	udf	#255	; 0xff
 8007356:	bf00      	nop
 8007358:	20000518 	.word	0x20000518

0800735c <__malloc_lock>:
 800735c:	4801      	ldr	r0, [pc, #4]	; (8007364 <__malloc_lock+0x8>)
 800735e:	f7ff b88c 	b.w	800647a <__retarget_lock_acquire_recursive>
 8007362:	bf00      	nop
 8007364:	20000514 	.word	0x20000514

08007368 <__malloc_unlock>:
 8007368:	4801      	ldr	r0, [pc, #4]	; (8007370 <__malloc_unlock+0x8>)
 800736a:	f7ff b887 	b.w	800647c <__retarget_lock_release_recursive>
 800736e:	bf00      	nop
 8007370:	20000514 	.word	0x20000514

08007374 <_Balloc>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	69c6      	ldr	r6, [r0, #28]
 8007378:	4604      	mov	r4, r0
 800737a:	460d      	mov	r5, r1
 800737c:	b976      	cbnz	r6, 800739c <_Balloc+0x28>
 800737e:	2010      	movs	r0, #16
 8007380:	f7ff ff44 	bl	800720c <malloc>
 8007384:	4602      	mov	r2, r0
 8007386:	61e0      	str	r0, [r4, #28]
 8007388:	b920      	cbnz	r0, 8007394 <_Balloc+0x20>
 800738a:	4b18      	ldr	r3, [pc, #96]	; (80073ec <_Balloc+0x78>)
 800738c:	4818      	ldr	r0, [pc, #96]	; (80073f0 <_Balloc+0x7c>)
 800738e:	216b      	movs	r1, #107	; 0x6b
 8007390:	f000 fdaa 	bl	8007ee8 <__assert_func>
 8007394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007398:	6006      	str	r6, [r0, #0]
 800739a:	60c6      	str	r6, [r0, #12]
 800739c:	69e6      	ldr	r6, [r4, #28]
 800739e:	68f3      	ldr	r3, [r6, #12]
 80073a0:	b183      	cbz	r3, 80073c4 <_Balloc+0x50>
 80073a2:	69e3      	ldr	r3, [r4, #28]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073aa:	b9b8      	cbnz	r0, 80073dc <_Balloc+0x68>
 80073ac:	2101      	movs	r1, #1
 80073ae:	fa01 f605 	lsl.w	r6, r1, r5
 80073b2:	1d72      	adds	r2, r6, #5
 80073b4:	0092      	lsls	r2, r2, #2
 80073b6:	4620      	mov	r0, r4
 80073b8:	f000 fdb4 	bl	8007f24 <_calloc_r>
 80073bc:	b160      	cbz	r0, 80073d8 <_Balloc+0x64>
 80073be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073c2:	e00e      	b.n	80073e2 <_Balloc+0x6e>
 80073c4:	2221      	movs	r2, #33	; 0x21
 80073c6:	2104      	movs	r1, #4
 80073c8:	4620      	mov	r0, r4
 80073ca:	f000 fdab 	bl	8007f24 <_calloc_r>
 80073ce:	69e3      	ldr	r3, [r4, #28]
 80073d0:	60f0      	str	r0, [r6, #12]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e4      	bne.n	80073a2 <_Balloc+0x2e>
 80073d8:	2000      	movs	r0, #0
 80073da:	bd70      	pop	{r4, r5, r6, pc}
 80073dc:	6802      	ldr	r2, [r0, #0]
 80073de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073e2:	2300      	movs	r3, #0
 80073e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073e8:	e7f7      	b.n	80073da <_Balloc+0x66>
 80073ea:	bf00      	nop
 80073ec:	08008d19 	.word	0x08008d19
 80073f0:	08008d99 	.word	0x08008d99

080073f4 <_Bfree>:
 80073f4:	b570      	push	{r4, r5, r6, lr}
 80073f6:	69c6      	ldr	r6, [r0, #28]
 80073f8:	4605      	mov	r5, r0
 80073fa:	460c      	mov	r4, r1
 80073fc:	b976      	cbnz	r6, 800741c <_Bfree+0x28>
 80073fe:	2010      	movs	r0, #16
 8007400:	f7ff ff04 	bl	800720c <malloc>
 8007404:	4602      	mov	r2, r0
 8007406:	61e8      	str	r0, [r5, #28]
 8007408:	b920      	cbnz	r0, 8007414 <_Bfree+0x20>
 800740a:	4b09      	ldr	r3, [pc, #36]	; (8007430 <_Bfree+0x3c>)
 800740c:	4809      	ldr	r0, [pc, #36]	; (8007434 <_Bfree+0x40>)
 800740e:	218f      	movs	r1, #143	; 0x8f
 8007410:	f000 fd6a 	bl	8007ee8 <__assert_func>
 8007414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007418:	6006      	str	r6, [r0, #0]
 800741a:	60c6      	str	r6, [r0, #12]
 800741c:	b13c      	cbz	r4, 800742e <_Bfree+0x3a>
 800741e:	69eb      	ldr	r3, [r5, #28]
 8007420:	6862      	ldr	r2, [r4, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007428:	6021      	str	r1, [r4, #0]
 800742a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800742e:	bd70      	pop	{r4, r5, r6, pc}
 8007430:	08008d19 	.word	0x08008d19
 8007434:	08008d99 	.word	0x08008d99

08007438 <__multadd>:
 8007438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800743c:	690d      	ldr	r5, [r1, #16]
 800743e:	4607      	mov	r7, r0
 8007440:	460c      	mov	r4, r1
 8007442:	461e      	mov	r6, r3
 8007444:	f101 0c14 	add.w	ip, r1, #20
 8007448:	2000      	movs	r0, #0
 800744a:	f8dc 3000 	ldr.w	r3, [ip]
 800744e:	b299      	uxth	r1, r3
 8007450:	fb02 6101 	mla	r1, r2, r1, r6
 8007454:	0c1e      	lsrs	r6, r3, #16
 8007456:	0c0b      	lsrs	r3, r1, #16
 8007458:	fb02 3306 	mla	r3, r2, r6, r3
 800745c:	b289      	uxth	r1, r1
 800745e:	3001      	adds	r0, #1
 8007460:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007464:	4285      	cmp	r5, r0
 8007466:	f84c 1b04 	str.w	r1, [ip], #4
 800746a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800746e:	dcec      	bgt.n	800744a <__multadd+0x12>
 8007470:	b30e      	cbz	r6, 80074b6 <__multadd+0x7e>
 8007472:	68a3      	ldr	r3, [r4, #8]
 8007474:	42ab      	cmp	r3, r5
 8007476:	dc19      	bgt.n	80074ac <__multadd+0x74>
 8007478:	6861      	ldr	r1, [r4, #4]
 800747a:	4638      	mov	r0, r7
 800747c:	3101      	adds	r1, #1
 800747e:	f7ff ff79 	bl	8007374 <_Balloc>
 8007482:	4680      	mov	r8, r0
 8007484:	b928      	cbnz	r0, 8007492 <__multadd+0x5a>
 8007486:	4602      	mov	r2, r0
 8007488:	4b0c      	ldr	r3, [pc, #48]	; (80074bc <__multadd+0x84>)
 800748a:	480d      	ldr	r0, [pc, #52]	; (80074c0 <__multadd+0x88>)
 800748c:	21ba      	movs	r1, #186	; 0xba
 800748e:	f000 fd2b 	bl	8007ee8 <__assert_func>
 8007492:	6922      	ldr	r2, [r4, #16]
 8007494:	3202      	adds	r2, #2
 8007496:	f104 010c 	add.w	r1, r4, #12
 800749a:	0092      	lsls	r2, r2, #2
 800749c:	300c      	adds	r0, #12
 800749e:	f000 fd15 	bl	8007ecc <memcpy>
 80074a2:	4621      	mov	r1, r4
 80074a4:	4638      	mov	r0, r7
 80074a6:	f7ff ffa5 	bl	80073f4 <_Bfree>
 80074aa:	4644      	mov	r4, r8
 80074ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074b0:	3501      	adds	r5, #1
 80074b2:	615e      	str	r6, [r3, #20]
 80074b4:	6125      	str	r5, [r4, #16]
 80074b6:	4620      	mov	r0, r4
 80074b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074bc:	08008d88 	.word	0x08008d88
 80074c0:	08008d99 	.word	0x08008d99

080074c4 <__hi0bits>:
 80074c4:	0c03      	lsrs	r3, r0, #16
 80074c6:	041b      	lsls	r3, r3, #16
 80074c8:	b9d3      	cbnz	r3, 8007500 <__hi0bits+0x3c>
 80074ca:	0400      	lsls	r0, r0, #16
 80074cc:	2310      	movs	r3, #16
 80074ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80074d2:	bf04      	itt	eq
 80074d4:	0200      	lsleq	r0, r0, #8
 80074d6:	3308      	addeq	r3, #8
 80074d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80074dc:	bf04      	itt	eq
 80074de:	0100      	lsleq	r0, r0, #4
 80074e0:	3304      	addeq	r3, #4
 80074e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80074e6:	bf04      	itt	eq
 80074e8:	0080      	lsleq	r0, r0, #2
 80074ea:	3302      	addeq	r3, #2
 80074ec:	2800      	cmp	r0, #0
 80074ee:	db05      	blt.n	80074fc <__hi0bits+0x38>
 80074f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80074f4:	f103 0301 	add.w	r3, r3, #1
 80074f8:	bf08      	it	eq
 80074fa:	2320      	moveq	r3, #32
 80074fc:	4618      	mov	r0, r3
 80074fe:	4770      	bx	lr
 8007500:	2300      	movs	r3, #0
 8007502:	e7e4      	b.n	80074ce <__hi0bits+0xa>

08007504 <__lo0bits>:
 8007504:	6803      	ldr	r3, [r0, #0]
 8007506:	f013 0207 	ands.w	r2, r3, #7
 800750a:	d00c      	beq.n	8007526 <__lo0bits+0x22>
 800750c:	07d9      	lsls	r1, r3, #31
 800750e:	d422      	bmi.n	8007556 <__lo0bits+0x52>
 8007510:	079a      	lsls	r2, r3, #30
 8007512:	bf49      	itett	mi
 8007514:	085b      	lsrmi	r3, r3, #1
 8007516:	089b      	lsrpl	r3, r3, #2
 8007518:	6003      	strmi	r3, [r0, #0]
 800751a:	2201      	movmi	r2, #1
 800751c:	bf5c      	itt	pl
 800751e:	6003      	strpl	r3, [r0, #0]
 8007520:	2202      	movpl	r2, #2
 8007522:	4610      	mov	r0, r2
 8007524:	4770      	bx	lr
 8007526:	b299      	uxth	r1, r3
 8007528:	b909      	cbnz	r1, 800752e <__lo0bits+0x2a>
 800752a:	0c1b      	lsrs	r3, r3, #16
 800752c:	2210      	movs	r2, #16
 800752e:	b2d9      	uxtb	r1, r3
 8007530:	b909      	cbnz	r1, 8007536 <__lo0bits+0x32>
 8007532:	3208      	adds	r2, #8
 8007534:	0a1b      	lsrs	r3, r3, #8
 8007536:	0719      	lsls	r1, r3, #28
 8007538:	bf04      	itt	eq
 800753a:	091b      	lsreq	r3, r3, #4
 800753c:	3204      	addeq	r2, #4
 800753e:	0799      	lsls	r1, r3, #30
 8007540:	bf04      	itt	eq
 8007542:	089b      	lsreq	r3, r3, #2
 8007544:	3202      	addeq	r2, #2
 8007546:	07d9      	lsls	r1, r3, #31
 8007548:	d403      	bmi.n	8007552 <__lo0bits+0x4e>
 800754a:	085b      	lsrs	r3, r3, #1
 800754c:	f102 0201 	add.w	r2, r2, #1
 8007550:	d003      	beq.n	800755a <__lo0bits+0x56>
 8007552:	6003      	str	r3, [r0, #0]
 8007554:	e7e5      	b.n	8007522 <__lo0bits+0x1e>
 8007556:	2200      	movs	r2, #0
 8007558:	e7e3      	b.n	8007522 <__lo0bits+0x1e>
 800755a:	2220      	movs	r2, #32
 800755c:	e7e1      	b.n	8007522 <__lo0bits+0x1e>
	...

08007560 <__i2b>:
 8007560:	b510      	push	{r4, lr}
 8007562:	460c      	mov	r4, r1
 8007564:	2101      	movs	r1, #1
 8007566:	f7ff ff05 	bl	8007374 <_Balloc>
 800756a:	4602      	mov	r2, r0
 800756c:	b928      	cbnz	r0, 800757a <__i2b+0x1a>
 800756e:	4b05      	ldr	r3, [pc, #20]	; (8007584 <__i2b+0x24>)
 8007570:	4805      	ldr	r0, [pc, #20]	; (8007588 <__i2b+0x28>)
 8007572:	f240 1145 	movw	r1, #325	; 0x145
 8007576:	f000 fcb7 	bl	8007ee8 <__assert_func>
 800757a:	2301      	movs	r3, #1
 800757c:	6144      	str	r4, [r0, #20]
 800757e:	6103      	str	r3, [r0, #16]
 8007580:	bd10      	pop	{r4, pc}
 8007582:	bf00      	nop
 8007584:	08008d88 	.word	0x08008d88
 8007588:	08008d99 	.word	0x08008d99

0800758c <__multiply>:
 800758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007590:	4691      	mov	r9, r2
 8007592:	690a      	ldr	r2, [r1, #16]
 8007594:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007598:	429a      	cmp	r2, r3
 800759a:	bfb8      	it	lt
 800759c:	460b      	movlt	r3, r1
 800759e:	460c      	mov	r4, r1
 80075a0:	bfbc      	itt	lt
 80075a2:	464c      	movlt	r4, r9
 80075a4:	4699      	movlt	r9, r3
 80075a6:	6927      	ldr	r7, [r4, #16]
 80075a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80075ac:	68a3      	ldr	r3, [r4, #8]
 80075ae:	6861      	ldr	r1, [r4, #4]
 80075b0:	eb07 060a 	add.w	r6, r7, sl
 80075b4:	42b3      	cmp	r3, r6
 80075b6:	b085      	sub	sp, #20
 80075b8:	bfb8      	it	lt
 80075ba:	3101      	addlt	r1, #1
 80075bc:	f7ff feda 	bl	8007374 <_Balloc>
 80075c0:	b930      	cbnz	r0, 80075d0 <__multiply+0x44>
 80075c2:	4602      	mov	r2, r0
 80075c4:	4b44      	ldr	r3, [pc, #272]	; (80076d8 <__multiply+0x14c>)
 80075c6:	4845      	ldr	r0, [pc, #276]	; (80076dc <__multiply+0x150>)
 80075c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80075cc:	f000 fc8c 	bl	8007ee8 <__assert_func>
 80075d0:	f100 0514 	add.w	r5, r0, #20
 80075d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80075d8:	462b      	mov	r3, r5
 80075da:	2200      	movs	r2, #0
 80075dc:	4543      	cmp	r3, r8
 80075de:	d321      	bcc.n	8007624 <__multiply+0x98>
 80075e0:	f104 0314 	add.w	r3, r4, #20
 80075e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80075e8:	f109 0314 	add.w	r3, r9, #20
 80075ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80075f0:	9202      	str	r2, [sp, #8]
 80075f2:	1b3a      	subs	r2, r7, r4
 80075f4:	3a15      	subs	r2, #21
 80075f6:	f022 0203 	bic.w	r2, r2, #3
 80075fa:	3204      	adds	r2, #4
 80075fc:	f104 0115 	add.w	r1, r4, #21
 8007600:	428f      	cmp	r7, r1
 8007602:	bf38      	it	cc
 8007604:	2204      	movcc	r2, #4
 8007606:	9201      	str	r2, [sp, #4]
 8007608:	9a02      	ldr	r2, [sp, #8]
 800760a:	9303      	str	r3, [sp, #12]
 800760c:	429a      	cmp	r2, r3
 800760e:	d80c      	bhi.n	800762a <__multiply+0x9e>
 8007610:	2e00      	cmp	r6, #0
 8007612:	dd03      	ble.n	800761c <__multiply+0x90>
 8007614:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007618:	2b00      	cmp	r3, #0
 800761a:	d05b      	beq.n	80076d4 <__multiply+0x148>
 800761c:	6106      	str	r6, [r0, #16]
 800761e:	b005      	add	sp, #20
 8007620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007624:	f843 2b04 	str.w	r2, [r3], #4
 8007628:	e7d8      	b.n	80075dc <__multiply+0x50>
 800762a:	f8b3 a000 	ldrh.w	sl, [r3]
 800762e:	f1ba 0f00 	cmp.w	sl, #0
 8007632:	d024      	beq.n	800767e <__multiply+0xf2>
 8007634:	f104 0e14 	add.w	lr, r4, #20
 8007638:	46a9      	mov	r9, r5
 800763a:	f04f 0c00 	mov.w	ip, #0
 800763e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007642:	f8d9 1000 	ldr.w	r1, [r9]
 8007646:	fa1f fb82 	uxth.w	fp, r2
 800764a:	b289      	uxth	r1, r1
 800764c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007650:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007654:	f8d9 2000 	ldr.w	r2, [r9]
 8007658:	4461      	add	r1, ip
 800765a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800765e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007662:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007666:	b289      	uxth	r1, r1
 8007668:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800766c:	4577      	cmp	r7, lr
 800766e:	f849 1b04 	str.w	r1, [r9], #4
 8007672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007676:	d8e2      	bhi.n	800763e <__multiply+0xb2>
 8007678:	9a01      	ldr	r2, [sp, #4]
 800767a:	f845 c002 	str.w	ip, [r5, r2]
 800767e:	9a03      	ldr	r2, [sp, #12]
 8007680:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007684:	3304      	adds	r3, #4
 8007686:	f1b9 0f00 	cmp.w	r9, #0
 800768a:	d021      	beq.n	80076d0 <__multiply+0x144>
 800768c:	6829      	ldr	r1, [r5, #0]
 800768e:	f104 0c14 	add.w	ip, r4, #20
 8007692:	46ae      	mov	lr, r5
 8007694:	f04f 0a00 	mov.w	sl, #0
 8007698:	f8bc b000 	ldrh.w	fp, [ip]
 800769c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80076a0:	fb09 220b 	mla	r2, r9, fp, r2
 80076a4:	4452      	add	r2, sl
 80076a6:	b289      	uxth	r1, r1
 80076a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80076ac:	f84e 1b04 	str.w	r1, [lr], #4
 80076b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80076b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80076b8:	f8be 1000 	ldrh.w	r1, [lr]
 80076bc:	fb09 110a 	mla	r1, r9, sl, r1
 80076c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80076c4:	4567      	cmp	r7, ip
 80076c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80076ca:	d8e5      	bhi.n	8007698 <__multiply+0x10c>
 80076cc:	9a01      	ldr	r2, [sp, #4]
 80076ce:	50a9      	str	r1, [r5, r2]
 80076d0:	3504      	adds	r5, #4
 80076d2:	e799      	b.n	8007608 <__multiply+0x7c>
 80076d4:	3e01      	subs	r6, #1
 80076d6:	e79b      	b.n	8007610 <__multiply+0x84>
 80076d8:	08008d88 	.word	0x08008d88
 80076dc:	08008d99 	.word	0x08008d99

080076e0 <__pow5mult>:
 80076e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076e4:	4615      	mov	r5, r2
 80076e6:	f012 0203 	ands.w	r2, r2, #3
 80076ea:	4606      	mov	r6, r0
 80076ec:	460f      	mov	r7, r1
 80076ee:	d007      	beq.n	8007700 <__pow5mult+0x20>
 80076f0:	4c25      	ldr	r4, [pc, #148]	; (8007788 <__pow5mult+0xa8>)
 80076f2:	3a01      	subs	r2, #1
 80076f4:	2300      	movs	r3, #0
 80076f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076fa:	f7ff fe9d 	bl	8007438 <__multadd>
 80076fe:	4607      	mov	r7, r0
 8007700:	10ad      	asrs	r5, r5, #2
 8007702:	d03d      	beq.n	8007780 <__pow5mult+0xa0>
 8007704:	69f4      	ldr	r4, [r6, #28]
 8007706:	b97c      	cbnz	r4, 8007728 <__pow5mult+0x48>
 8007708:	2010      	movs	r0, #16
 800770a:	f7ff fd7f 	bl	800720c <malloc>
 800770e:	4602      	mov	r2, r0
 8007710:	61f0      	str	r0, [r6, #28]
 8007712:	b928      	cbnz	r0, 8007720 <__pow5mult+0x40>
 8007714:	4b1d      	ldr	r3, [pc, #116]	; (800778c <__pow5mult+0xac>)
 8007716:	481e      	ldr	r0, [pc, #120]	; (8007790 <__pow5mult+0xb0>)
 8007718:	f240 11b3 	movw	r1, #435	; 0x1b3
 800771c:	f000 fbe4 	bl	8007ee8 <__assert_func>
 8007720:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007724:	6004      	str	r4, [r0, #0]
 8007726:	60c4      	str	r4, [r0, #12]
 8007728:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800772c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007730:	b94c      	cbnz	r4, 8007746 <__pow5mult+0x66>
 8007732:	f240 2171 	movw	r1, #625	; 0x271
 8007736:	4630      	mov	r0, r6
 8007738:	f7ff ff12 	bl	8007560 <__i2b>
 800773c:	2300      	movs	r3, #0
 800773e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007742:	4604      	mov	r4, r0
 8007744:	6003      	str	r3, [r0, #0]
 8007746:	f04f 0900 	mov.w	r9, #0
 800774a:	07eb      	lsls	r3, r5, #31
 800774c:	d50a      	bpl.n	8007764 <__pow5mult+0x84>
 800774e:	4639      	mov	r1, r7
 8007750:	4622      	mov	r2, r4
 8007752:	4630      	mov	r0, r6
 8007754:	f7ff ff1a 	bl	800758c <__multiply>
 8007758:	4639      	mov	r1, r7
 800775a:	4680      	mov	r8, r0
 800775c:	4630      	mov	r0, r6
 800775e:	f7ff fe49 	bl	80073f4 <_Bfree>
 8007762:	4647      	mov	r7, r8
 8007764:	106d      	asrs	r5, r5, #1
 8007766:	d00b      	beq.n	8007780 <__pow5mult+0xa0>
 8007768:	6820      	ldr	r0, [r4, #0]
 800776a:	b938      	cbnz	r0, 800777c <__pow5mult+0x9c>
 800776c:	4622      	mov	r2, r4
 800776e:	4621      	mov	r1, r4
 8007770:	4630      	mov	r0, r6
 8007772:	f7ff ff0b 	bl	800758c <__multiply>
 8007776:	6020      	str	r0, [r4, #0]
 8007778:	f8c0 9000 	str.w	r9, [r0]
 800777c:	4604      	mov	r4, r0
 800777e:	e7e4      	b.n	800774a <__pow5mult+0x6a>
 8007780:	4638      	mov	r0, r7
 8007782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007786:	bf00      	nop
 8007788:	08008ee8 	.word	0x08008ee8
 800778c:	08008d19 	.word	0x08008d19
 8007790:	08008d99 	.word	0x08008d99

08007794 <__lshift>:
 8007794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007798:	460c      	mov	r4, r1
 800779a:	6849      	ldr	r1, [r1, #4]
 800779c:	6923      	ldr	r3, [r4, #16]
 800779e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077a2:	68a3      	ldr	r3, [r4, #8]
 80077a4:	4607      	mov	r7, r0
 80077a6:	4691      	mov	r9, r2
 80077a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077ac:	f108 0601 	add.w	r6, r8, #1
 80077b0:	42b3      	cmp	r3, r6
 80077b2:	db0b      	blt.n	80077cc <__lshift+0x38>
 80077b4:	4638      	mov	r0, r7
 80077b6:	f7ff fddd 	bl	8007374 <_Balloc>
 80077ba:	4605      	mov	r5, r0
 80077bc:	b948      	cbnz	r0, 80077d2 <__lshift+0x3e>
 80077be:	4602      	mov	r2, r0
 80077c0:	4b28      	ldr	r3, [pc, #160]	; (8007864 <__lshift+0xd0>)
 80077c2:	4829      	ldr	r0, [pc, #164]	; (8007868 <__lshift+0xd4>)
 80077c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80077c8:	f000 fb8e 	bl	8007ee8 <__assert_func>
 80077cc:	3101      	adds	r1, #1
 80077ce:	005b      	lsls	r3, r3, #1
 80077d0:	e7ee      	b.n	80077b0 <__lshift+0x1c>
 80077d2:	2300      	movs	r3, #0
 80077d4:	f100 0114 	add.w	r1, r0, #20
 80077d8:	f100 0210 	add.w	r2, r0, #16
 80077dc:	4618      	mov	r0, r3
 80077de:	4553      	cmp	r3, sl
 80077e0:	db33      	blt.n	800784a <__lshift+0xb6>
 80077e2:	6920      	ldr	r0, [r4, #16]
 80077e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077e8:	f104 0314 	add.w	r3, r4, #20
 80077ec:	f019 091f 	ands.w	r9, r9, #31
 80077f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80077f8:	d02b      	beq.n	8007852 <__lshift+0xbe>
 80077fa:	f1c9 0e20 	rsb	lr, r9, #32
 80077fe:	468a      	mov	sl, r1
 8007800:	2200      	movs	r2, #0
 8007802:	6818      	ldr	r0, [r3, #0]
 8007804:	fa00 f009 	lsl.w	r0, r0, r9
 8007808:	4310      	orrs	r0, r2
 800780a:	f84a 0b04 	str.w	r0, [sl], #4
 800780e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007812:	459c      	cmp	ip, r3
 8007814:	fa22 f20e 	lsr.w	r2, r2, lr
 8007818:	d8f3      	bhi.n	8007802 <__lshift+0x6e>
 800781a:	ebac 0304 	sub.w	r3, ip, r4
 800781e:	3b15      	subs	r3, #21
 8007820:	f023 0303 	bic.w	r3, r3, #3
 8007824:	3304      	adds	r3, #4
 8007826:	f104 0015 	add.w	r0, r4, #21
 800782a:	4584      	cmp	ip, r0
 800782c:	bf38      	it	cc
 800782e:	2304      	movcc	r3, #4
 8007830:	50ca      	str	r2, [r1, r3]
 8007832:	b10a      	cbz	r2, 8007838 <__lshift+0xa4>
 8007834:	f108 0602 	add.w	r6, r8, #2
 8007838:	3e01      	subs	r6, #1
 800783a:	4638      	mov	r0, r7
 800783c:	612e      	str	r6, [r5, #16]
 800783e:	4621      	mov	r1, r4
 8007840:	f7ff fdd8 	bl	80073f4 <_Bfree>
 8007844:	4628      	mov	r0, r5
 8007846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784a:	f842 0f04 	str.w	r0, [r2, #4]!
 800784e:	3301      	adds	r3, #1
 8007850:	e7c5      	b.n	80077de <__lshift+0x4a>
 8007852:	3904      	subs	r1, #4
 8007854:	f853 2b04 	ldr.w	r2, [r3], #4
 8007858:	f841 2f04 	str.w	r2, [r1, #4]!
 800785c:	459c      	cmp	ip, r3
 800785e:	d8f9      	bhi.n	8007854 <__lshift+0xc0>
 8007860:	e7ea      	b.n	8007838 <__lshift+0xa4>
 8007862:	bf00      	nop
 8007864:	08008d88 	.word	0x08008d88
 8007868:	08008d99 	.word	0x08008d99

0800786c <__mcmp>:
 800786c:	b530      	push	{r4, r5, lr}
 800786e:	6902      	ldr	r2, [r0, #16]
 8007870:	690c      	ldr	r4, [r1, #16]
 8007872:	1b12      	subs	r2, r2, r4
 8007874:	d10e      	bne.n	8007894 <__mcmp+0x28>
 8007876:	f100 0314 	add.w	r3, r0, #20
 800787a:	3114      	adds	r1, #20
 800787c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007880:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007884:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007888:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800788c:	42a5      	cmp	r5, r4
 800788e:	d003      	beq.n	8007898 <__mcmp+0x2c>
 8007890:	d305      	bcc.n	800789e <__mcmp+0x32>
 8007892:	2201      	movs	r2, #1
 8007894:	4610      	mov	r0, r2
 8007896:	bd30      	pop	{r4, r5, pc}
 8007898:	4283      	cmp	r3, r0
 800789a:	d3f3      	bcc.n	8007884 <__mcmp+0x18>
 800789c:	e7fa      	b.n	8007894 <__mcmp+0x28>
 800789e:	f04f 32ff 	mov.w	r2, #4294967295
 80078a2:	e7f7      	b.n	8007894 <__mcmp+0x28>

080078a4 <__mdiff>:
 80078a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a8:	460c      	mov	r4, r1
 80078aa:	4606      	mov	r6, r0
 80078ac:	4611      	mov	r1, r2
 80078ae:	4620      	mov	r0, r4
 80078b0:	4690      	mov	r8, r2
 80078b2:	f7ff ffdb 	bl	800786c <__mcmp>
 80078b6:	1e05      	subs	r5, r0, #0
 80078b8:	d110      	bne.n	80078dc <__mdiff+0x38>
 80078ba:	4629      	mov	r1, r5
 80078bc:	4630      	mov	r0, r6
 80078be:	f7ff fd59 	bl	8007374 <_Balloc>
 80078c2:	b930      	cbnz	r0, 80078d2 <__mdiff+0x2e>
 80078c4:	4b3a      	ldr	r3, [pc, #232]	; (80079b0 <__mdiff+0x10c>)
 80078c6:	4602      	mov	r2, r0
 80078c8:	f240 2137 	movw	r1, #567	; 0x237
 80078cc:	4839      	ldr	r0, [pc, #228]	; (80079b4 <__mdiff+0x110>)
 80078ce:	f000 fb0b 	bl	8007ee8 <__assert_func>
 80078d2:	2301      	movs	r3, #1
 80078d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078dc:	bfa4      	itt	ge
 80078de:	4643      	movge	r3, r8
 80078e0:	46a0      	movge	r8, r4
 80078e2:	4630      	mov	r0, r6
 80078e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80078e8:	bfa6      	itte	ge
 80078ea:	461c      	movge	r4, r3
 80078ec:	2500      	movge	r5, #0
 80078ee:	2501      	movlt	r5, #1
 80078f0:	f7ff fd40 	bl	8007374 <_Balloc>
 80078f4:	b920      	cbnz	r0, 8007900 <__mdiff+0x5c>
 80078f6:	4b2e      	ldr	r3, [pc, #184]	; (80079b0 <__mdiff+0x10c>)
 80078f8:	4602      	mov	r2, r0
 80078fa:	f240 2145 	movw	r1, #581	; 0x245
 80078fe:	e7e5      	b.n	80078cc <__mdiff+0x28>
 8007900:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007904:	6926      	ldr	r6, [r4, #16]
 8007906:	60c5      	str	r5, [r0, #12]
 8007908:	f104 0914 	add.w	r9, r4, #20
 800790c:	f108 0514 	add.w	r5, r8, #20
 8007910:	f100 0e14 	add.w	lr, r0, #20
 8007914:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007918:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800791c:	f108 0210 	add.w	r2, r8, #16
 8007920:	46f2      	mov	sl, lr
 8007922:	2100      	movs	r1, #0
 8007924:	f859 3b04 	ldr.w	r3, [r9], #4
 8007928:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800792c:	fa11 f88b 	uxtah	r8, r1, fp
 8007930:	b299      	uxth	r1, r3
 8007932:	0c1b      	lsrs	r3, r3, #16
 8007934:	eba8 0801 	sub.w	r8, r8, r1
 8007938:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800793c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007940:	fa1f f888 	uxth.w	r8, r8
 8007944:	1419      	asrs	r1, r3, #16
 8007946:	454e      	cmp	r6, r9
 8007948:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800794c:	f84a 3b04 	str.w	r3, [sl], #4
 8007950:	d8e8      	bhi.n	8007924 <__mdiff+0x80>
 8007952:	1b33      	subs	r3, r6, r4
 8007954:	3b15      	subs	r3, #21
 8007956:	f023 0303 	bic.w	r3, r3, #3
 800795a:	3304      	adds	r3, #4
 800795c:	3415      	adds	r4, #21
 800795e:	42a6      	cmp	r6, r4
 8007960:	bf38      	it	cc
 8007962:	2304      	movcc	r3, #4
 8007964:	441d      	add	r5, r3
 8007966:	4473      	add	r3, lr
 8007968:	469e      	mov	lr, r3
 800796a:	462e      	mov	r6, r5
 800796c:	4566      	cmp	r6, ip
 800796e:	d30e      	bcc.n	800798e <__mdiff+0xea>
 8007970:	f10c 0203 	add.w	r2, ip, #3
 8007974:	1b52      	subs	r2, r2, r5
 8007976:	f022 0203 	bic.w	r2, r2, #3
 800797a:	3d03      	subs	r5, #3
 800797c:	45ac      	cmp	ip, r5
 800797e:	bf38      	it	cc
 8007980:	2200      	movcc	r2, #0
 8007982:	4413      	add	r3, r2
 8007984:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007988:	b17a      	cbz	r2, 80079aa <__mdiff+0x106>
 800798a:	6107      	str	r7, [r0, #16]
 800798c:	e7a4      	b.n	80078d8 <__mdiff+0x34>
 800798e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007992:	fa11 f288 	uxtah	r2, r1, r8
 8007996:	1414      	asrs	r4, r2, #16
 8007998:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800799c:	b292      	uxth	r2, r2
 800799e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80079a2:	f84e 2b04 	str.w	r2, [lr], #4
 80079a6:	1421      	asrs	r1, r4, #16
 80079a8:	e7e0      	b.n	800796c <__mdiff+0xc8>
 80079aa:	3f01      	subs	r7, #1
 80079ac:	e7ea      	b.n	8007984 <__mdiff+0xe0>
 80079ae:	bf00      	nop
 80079b0:	08008d88 	.word	0x08008d88
 80079b4:	08008d99 	.word	0x08008d99

080079b8 <__d2b>:
 80079b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079bc:	460f      	mov	r7, r1
 80079be:	2101      	movs	r1, #1
 80079c0:	ec59 8b10 	vmov	r8, r9, d0
 80079c4:	4616      	mov	r6, r2
 80079c6:	f7ff fcd5 	bl	8007374 <_Balloc>
 80079ca:	4604      	mov	r4, r0
 80079cc:	b930      	cbnz	r0, 80079dc <__d2b+0x24>
 80079ce:	4602      	mov	r2, r0
 80079d0:	4b24      	ldr	r3, [pc, #144]	; (8007a64 <__d2b+0xac>)
 80079d2:	4825      	ldr	r0, [pc, #148]	; (8007a68 <__d2b+0xb0>)
 80079d4:	f240 310f 	movw	r1, #783	; 0x30f
 80079d8:	f000 fa86 	bl	8007ee8 <__assert_func>
 80079dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80079e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079e4:	bb2d      	cbnz	r5, 8007a32 <__d2b+0x7a>
 80079e6:	9301      	str	r3, [sp, #4]
 80079e8:	f1b8 0300 	subs.w	r3, r8, #0
 80079ec:	d026      	beq.n	8007a3c <__d2b+0x84>
 80079ee:	4668      	mov	r0, sp
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	f7ff fd87 	bl	8007504 <__lo0bits>
 80079f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80079fa:	b1e8      	cbz	r0, 8007a38 <__d2b+0x80>
 80079fc:	f1c0 0320 	rsb	r3, r0, #32
 8007a00:	fa02 f303 	lsl.w	r3, r2, r3
 8007a04:	430b      	orrs	r3, r1
 8007a06:	40c2      	lsrs	r2, r0
 8007a08:	6163      	str	r3, [r4, #20]
 8007a0a:	9201      	str	r2, [sp, #4]
 8007a0c:	9b01      	ldr	r3, [sp, #4]
 8007a0e:	61a3      	str	r3, [r4, #24]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	bf14      	ite	ne
 8007a14:	2202      	movne	r2, #2
 8007a16:	2201      	moveq	r2, #1
 8007a18:	6122      	str	r2, [r4, #16]
 8007a1a:	b1bd      	cbz	r5, 8007a4c <__d2b+0x94>
 8007a1c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a20:	4405      	add	r5, r0
 8007a22:	603d      	str	r5, [r7, #0]
 8007a24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a28:	6030      	str	r0, [r6, #0]
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	b003      	add	sp, #12
 8007a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a36:	e7d6      	b.n	80079e6 <__d2b+0x2e>
 8007a38:	6161      	str	r1, [r4, #20]
 8007a3a:	e7e7      	b.n	8007a0c <__d2b+0x54>
 8007a3c:	a801      	add	r0, sp, #4
 8007a3e:	f7ff fd61 	bl	8007504 <__lo0bits>
 8007a42:	9b01      	ldr	r3, [sp, #4]
 8007a44:	6163      	str	r3, [r4, #20]
 8007a46:	3020      	adds	r0, #32
 8007a48:	2201      	movs	r2, #1
 8007a4a:	e7e5      	b.n	8007a18 <__d2b+0x60>
 8007a4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a54:	6038      	str	r0, [r7, #0]
 8007a56:	6918      	ldr	r0, [r3, #16]
 8007a58:	f7ff fd34 	bl	80074c4 <__hi0bits>
 8007a5c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a60:	e7e2      	b.n	8007a28 <__d2b+0x70>
 8007a62:	bf00      	nop
 8007a64:	08008d88 	.word	0x08008d88
 8007a68:	08008d99 	.word	0x08008d99

08007a6c <__ssputs_r>:
 8007a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a70:	688e      	ldr	r6, [r1, #8]
 8007a72:	461f      	mov	r7, r3
 8007a74:	42be      	cmp	r6, r7
 8007a76:	680b      	ldr	r3, [r1, #0]
 8007a78:	4682      	mov	sl, r0
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	4690      	mov	r8, r2
 8007a7e:	d82c      	bhi.n	8007ada <__ssputs_r+0x6e>
 8007a80:	898a      	ldrh	r2, [r1, #12]
 8007a82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a86:	d026      	beq.n	8007ad6 <__ssputs_r+0x6a>
 8007a88:	6965      	ldr	r5, [r4, #20]
 8007a8a:	6909      	ldr	r1, [r1, #16]
 8007a8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a90:	eba3 0901 	sub.w	r9, r3, r1
 8007a94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a98:	1c7b      	adds	r3, r7, #1
 8007a9a:	444b      	add	r3, r9
 8007a9c:	106d      	asrs	r5, r5, #1
 8007a9e:	429d      	cmp	r5, r3
 8007aa0:	bf38      	it	cc
 8007aa2:	461d      	movcc	r5, r3
 8007aa4:	0553      	lsls	r3, r2, #21
 8007aa6:	d527      	bpl.n	8007af8 <__ssputs_r+0x8c>
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	f7ff fbd7 	bl	800725c <_malloc_r>
 8007aae:	4606      	mov	r6, r0
 8007ab0:	b360      	cbz	r0, 8007b0c <__ssputs_r+0xa0>
 8007ab2:	6921      	ldr	r1, [r4, #16]
 8007ab4:	464a      	mov	r2, r9
 8007ab6:	f000 fa09 	bl	8007ecc <memcpy>
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ac4:	81a3      	strh	r3, [r4, #12]
 8007ac6:	6126      	str	r6, [r4, #16]
 8007ac8:	6165      	str	r5, [r4, #20]
 8007aca:	444e      	add	r6, r9
 8007acc:	eba5 0509 	sub.w	r5, r5, r9
 8007ad0:	6026      	str	r6, [r4, #0]
 8007ad2:	60a5      	str	r5, [r4, #8]
 8007ad4:	463e      	mov	r6, r7
 8007ad6:	42be      	cmp	r6, r7
 8007ad8:	d900      	bls.n	8007adc <__ssputs_r+0x70>
 8007ada:	463e      	mov	r6, r7
 8007adc:	6820      	ldr	r0, [r4, #0]
 8007ade:	4632      	mov	r2, r6
 8007ae0:	4641      	mov	r1, r8
 8007ae2:	f000 f9c9 	bl	8007e78 <memmove>
 8007ae6:	68a3      	ldr	r3, [r4, #8]
 8007ae8:	1b9b      	subs	r3, r3, r6
 8007aea:	60a3      	str	r3, [r4, #8]
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	4433      	add	r3, r6
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	2000      	movs	r0, #0
 8007af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af8:	462a      	mov	r2, r5
 8007afa:	f000 fa3b 	bl	8007f74 <_realloc_r>
 8007afe:	4606      	mov	r6, r0
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d1e0      	bne.n	8007ac6 <__ssputs_r+0x5a>
 8007b04:	6921      	ldr	r1, [r4, #16]
 8007b06:	4650      	mov	r0, sl
 8007b08:	f7ff fb34 	bl	8007174 <_free_r>
 8007b0c:	230c      	movs	r3, #12
 8007b0e:	f8ca 3000 	str.w	r3, [sl]
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b18:	81a3      	strh	r3, [r4, #12]
 8007b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1e:	e7e9      	b.n	8007af4 <__ssputs_r+0x88>

08007b20 <_svfiprintf_r>:
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	4698      	mov	r8, r3
 8007b26:	898b      	ldrh	r3, [r1, #12]
 8007b28:	061b      	lsls	r3, r3, #24
 8007b2a:	b09d      	sub	sp, #116	; 0x74
 8007b2c:	4607      	mov	r7, r0
 8007b2e:	460d      	mov	r5, r1
 8007b30:	4614      	mov	r4, r2
 8007b32:	d50e      	bpl.n	8007b52 <_svfiprintf_r+0x32>
 8007b34:	690b      	ldr	r3, [r1, #16]
 8007b36:	b963      	cbnz	r3, 8007b52 <_svfiprintf_r+0x32>
 8007b38:	2140      	movs	r1, #64	; 0x40
 8007b3a:	f7ff fb8f 	bl	800725c <_malloc_r>
 8007b3e:	6028      	str	r0, [r5, #0]
 8007b40:	6128      	str	r0, [r5, #16]
 8007b42:	b920      	cbnz	r0, 8007b4e <_svfiprintf_r+0x2e>
 8007b44:	230c      	movs	r3, #12
 8007b46:	603b      	str	r3, [r7, #0]
 8007b48:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4c:	e0d0      	b.n	8007cf0 <_svfiprintf_r+0x1d0>
 8007b4e:	2340      	movs	r3, #64	; 0x40
 8007b50:	616b      	str	r3, [r5, #20]
 8007b52:	2300      	movs	r3, #0
 8007b54:	9309      	str	r3, [sp, #36]	; 0x24
 8007b56:	2320      	movs	r3, #32
 8007b58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b60:	2330      	movs	r3, #48	; 0x30
 8007b62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d08 <_svfiprintf_r+0x1e8>
 8007b66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b6a:	f04f 0901 	mov.w	r9, #1
 8007b6e:	4623      	mov	r3, r4
 8007b70:	469a      	mov	sl, r3
 8007b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b76:	b10a      	cbz	r2, 8007b7c <_svfiprintf_r+0x5c>
 8007b78:	2a25      	cmp	r2, #37	; 0x25
 8007b7a:	d1f9      	bne.n	8007b70 <_svfiprintf_r+0x50>
 8007b7c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b80:	d00b      	beq.n	8007b9a <_svfiprintf_r+0x7a>
 8007b82:	465b      	mov	r3, fp
 8007b84:	4622      	mov	r2, r4
 8007b86:	4629      	mov	r1, r5
 8007b88:	4638      	mov	r0, r7
 8007b8a:	f7ff ff6f 	bl	8007a6c <__ssputs_r>
 8007b8e:	3001      	adds	r0, #1
 8007b90:	f000 80a9 	beq.w	8007ce6 <_svfiprintf_r+0x1c6>
 8007b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b96:	445a      	add	r2, fp
 8007b98:	9209      	str	r2, [sp, #36]	; 0x24
 8007b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 80a1 	beq.w	8007ce6 <_svfiprintf_r+0x1c6>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8007baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bae:	f10a 0a01 	add.w	sl, sl, #1
 8007bb2:	9304      	str	r3, [sp, #16]
 8007bb4:	9307      	str	r3, [sp, #28]
 8007bb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bba:	931a      	str	r3, [sp, #104]	; 0x68
 8007bbc:	4654      	mov	r4, sl
 8007bbe:	2205      	movs	r2, #5
 8007bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc4:	4850      	ldr	r0, [pc, #320]	; (8007d08 <_svfiprintf_r+0x1e8>)
 8007bc6:	f7f8 fb03 	bl	80001d0 <memchr>
 8007bca:	9a04      	ldr	r2, [sp, #16]
 8007bcc:	b9d8      	cbnz	r0, 8007c06 <_svfiprintf_r+0xe6>
 8007bce:	06d0      	lsls	r0, r2, #27
 8007bd0:	bf44      	itt	mi
 8007bd2:	2320      	movmi	r3, #32
 8007bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bd8:	0711      	lsls	r1, r2, #28
 8007bda:	bf44      	itt	mi
 8007bdc:	232b      	movmi	r3, #43	; 0x2b
 8007bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007be2:	f89a 3000 	ldrb.w	r3, [sl]
 8007be6:	2b2a      	cmp	r3, #42	; 0x2a
 8007be8:	d015      	beq.n	8007c16 <_svfiprintf_r+0xf6>
 8007bea:	9a07      	ldr	r2, [sp, #28]
 8007bec:	4654      	mov	r4, sl
 8007bee:	2000      	movs	r0, #0
 8007bf0:	f04f 0c0a 	mov.w	ip, #10
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bfa:	3b30      	subs	r3, #48	; 0x30
 8007bfc:	2b09      	cmp	r3, #9
 8007bfe:	d94d      	bls.n	8007c9c <_svfiprintf_r+0x17c>
 8007c00:	b1b0      	cbz	r0, 8007c30 <_svfiprintf_r+0x110>
 8007c02:	9207      	str	r2, [sp, #28]
 8007c04:	e014      	b.n	8007c30 <_svfiprintf_r+0x110>
 8007c06:	eba0 0308 	sub.w	r3, r0, r8
 8007c0a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	9304      	str	r3, [sp, #16]
 8007c12:	46a2      	mov	sl, r4
 8007c14:	e7d2      	b.n	8007bbc <_svfiprintf_r+0x9c>
 8007c16:	9b03      	ldr	r3, [sp, #12]
 8007c18:	1d19      	adds	r1, r3, #4
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	9103      	str	r1, [sp, #12]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	bfbb      	ittet	lt
 8007c22:	425b      	neglt	r3, r3
 8007c24:	f042 0202 	orrlt.w	r2, r2, #2
 8007c28:	9307      	strge	r3, [sp, #28]
 8007c2a:	9307      	strlt	r3, [sp, #28]
 8007c2c:	bfb8      	it	lt
 8007c2e:	9204      	strlt	r2, [sp, #16]
 8007c30:	7823      	ldrb	r3, [r4, #0]
 8007c32:	2b2e      	cmp	r3, #46	; 0x2e
 8007c34:	d10c      	bne.n	8007c50 <_svfiprintf_r+0x130>
 8007c36:	7863      	ldrb	r3, [r4, #1]
 8007c38:	2b2a      	cmp	r3, #42	; 0x2a
 8007c3a:	d134      	bne.n	8007ca6 <_svfiprintf_r+0x186>
 8007c3c:	9b03      	ldr	r3, [sp, #12]
 8007c3e:	1d1a      	adds	r2, r3, #4
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	9203      	str	r2, [sp, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	bfb8      	it	lt
 8007c48:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c4c:	3402      	adds	r4, #2
 8007c4e:	9305      	str	r3, [sp, #20]
 8007c50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007d18 <_svfiprintf_r+0x1f8>
 8007c54:	7821      	ldrb	r1, [r4, #0]
 8007c56:	2203      	movs	r2, #3
 8007c58:	4650      	mov	r0, sl
 8007c5a:	f7f8 fab9 	bl	80001d0 <memchr>
 8007c5e:	b138      	cbz	r0, 8007c70 <_svfiprintf_r+0x150>
 8007c60:	9b04      	ldr	r3, [sp, #16]
 8007c62:	eba0 000a 	sub.w	r0, r0, sl
 8007c66:	2240      	movs	r2, #64	; 0x40
 8007c68:	4082      	lsls	r2, r0
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	3401      	adds	r4, #1
 8007c6e:	9304      	str	r3, [sp, #16]
 8007c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c74:	4825      	ldr	r0, [pc, #148]	; (8007d0c <_svfiprintf_r+0x1ec>)
 8007c76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c7a:	2206      	movs	r2, #6
 8007c7c:	f7f8 faa8 	bl	80001d0 <memchr>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d038      	beq.n	8007cf6 <_svfiprintf_r+0x1d6>
 8007c84:	4b22      	ldr	r3, [pc, #136]	; (8007d10 <_svfiprintf_r+0x1f0>)
 8007c86:	bb1b      	cbnz	r3, 8007cd0 <_svfiprintf_r+0x1b0>
 8007c88:	9b03      	ldr	r3, [sp, #12]
 8007c8a:	3307      	adds	r3, #7
 8007c8c:	f023 0307 	bic.w	r3, r3, #7
 8007c90:	3308      	adds	r3, #8
 8007c92:	9303      	str	r3, [sp, #12]
 8007c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c96:	4433      	add	r3, r6
 8007c98:	9309      	str	r3, [sp, #36]	; 0x24
 8007c9a:	e768      	b.n	8007b6e <_svfiprintf_r+0x4e>
 8007c9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ca0:	460c      	mov	r4, r1
 8007ca2:	2001      	movs	r0, #1
 8007ca4:	e7a6      	b.n	8007bf4 <_svfiprintf_r+0xd4>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	3401      	adds	r4, #1
 8007caa:	9305      	str	r3, [sp, #20]
 8007cac:	4619      	mov	r1, r3
 8007cae:	f04f 0c0a 	mov.w	ip, #10
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cb8:	3a30      	subs	r2, #48	; 0x30
 8007cba:	2a09      	cmp	r2, #9
 8007cbc:	d903      	bls.n	8007cc6 <_svfiprintf_r+0x1a6>
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0c6      	beq.n	8007c50 <_svfiprintf_r+0x130>
 8007cc2:	9105      	str	r1, [sp, #20]
 8007cc4:	e7c4      	b.n	8007c50 <_svfiprintf_r+0x130>
 8007cc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cca:	4604      	mov	r4, r0
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e7f0      	b.n	8007cb2 <_svfiprintf_r+0x192>
 8007cd0:	ab03      	add	r3, sp, #12
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	462a      	mov	r2, r5
 8007cd6:	4b0f      	ldr	r3, [pc, #60]	; (8007d14 <_svfiprintf_r+0x1f4>)
 8007cd8:	a904      	add	r1, sp, #16
 8007cda:	4638      	mov	r0, r7
 8007cdc:	f7fd fe64 	bl	80059a8 <_printf_float>
 8007ce0:	1c42      	adds	r2, r0, #1
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	d1d6      	bne.n	8007c94 <_svfiprintf_r+0x174>
 8007ce6:	89ab      	ldrh	r3, [r5, #12]
 8007ce8:	065b      	lsls	r3, r3, #25
 8007cea:	f53f af2d 	bmi.w	8007b48 <_svfiprintf_r+0x28>
 8007cee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cf0:	b01d      	add	sp, #116	; 0x74
 8007cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf6:	ab03      	add	r3, sp, #12
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	462a      	mov	r2, r5
 8007cfc:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <_svfiprintf_r+0x1f4>)
 8007cfe:	a904      	add	r1, sp, #16
 8007d00:	4638      	mov	r0, r7
 8007d02:	f7fe f8f5 	bl	8005ef0 <_printf_i>
 8007d06:	e7eb      	b.n	8007ce0 <_svfiprintf_r+0x1c0>
 8007d08:	08008ef4 	.word	0x08008ef4
 8007d0c:	08008efe 	.word	0x08008efe
 8007d10:	080059a9 	.word	0x080059a9
 8007d14:	08007a6d 	.word	0x08007a6d
 8007d18:	08008efa 	.word	0x08008efa

08007d1c <__sflush_r>:
 8007d1c:	898a      	ldrh	r2, [r1, #12]
 8007d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d22:	4605      	mov	r5, r0
 8007d24:	0710      	lsls	r0, r2, #28
 8007d26:	460c      	mov	r4, r1
 8007d28:	d458      	bmi.n	8007ddc <__sflush_r+0xc0>
 8007d2a:	684b      	ldr	r3, [r1, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	dc05      	bgt.n	8007d3c <__sflush_r+0x20>
 8007d30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	dc02      	bgt.n	8007d3c <__sflush_r+0x20>
 8007d36:	2000      	movs	r0, #0
 8007d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d3e:	2e00      	cmp	r6, #0
 8007d40:	d0f9      	beq.n	8007d36 <__sflush_r+0x1a>
 8007d42:	2300      	movs	r3, #0
 8007d44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d48:	682f      	ldr	r7, [r5, #0]
 8007d4a:	6a21      	ldr	r1, [r4, #32]
 8007d4c:	602b      	str	r3, [r5, #0]
 8007d4e:	d032      	beq.n	8007db6 <__sflush_r+0x9a>
 8007d50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	075a      	lsls	r2, r3, #29
 8007d56:	d505      	bpl.n	8007d64 <__sflush_r+0x48>
 8007d58:	6863      	ldr	r3, [r4, #4]
 8007d5a:	1ac0      	subs	r0, r0, r3
 8007d5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d5e:	b10b      	cbz	r3, 8007d64 <__sflush_r+0x48>
 8007d60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d62:	1ac0      	subs	r0, r0, r3
 8007d64:	2300      	movs	r3, #0
 8007d66:	4602      	mov	r2, r0
 8007d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d6a:	6a21      	ldr	r1, [r4, #32]
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b0      	blx	r6
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	d106      	bne.n	8007d84 <__sflush_r+0x68>
 8007d76:	6829      	ldr	r1, [r5, #0]
 8007d78:	291d      	cmp	r1, #29
 8007d7a:	d82b      	bhi.n	8007dd4 <__sflush_r+0xb8>
 8007d7c:	4a29      	ldr	r2, [pc, #164]	; (8007e24 <__sflush_r+0x108>)
 8007d7e:	410a      	asrs	r2, r1
 8007d80:	07d6      	lsls	r6, r2, #31
 8007d82:	d427      	bmi.n	8007dd4 <__sflush_r+0xb8>
 8007d84:	2200      	movs	r2, #0
 8007d86:	6062      	str	r2, [r4, #4]
 8007d88:	04d9      	lsls	r1, r3, #19
 8007d8a:	6922      	ldr	r2, [r4, #16]
 8007d8c:	6022      	str	r2, [r4, #0]
 8007d8e:	d504      	bpl.n	8007d9a <__sflush_r+0x7e>
 8007d90:	1c42      	adds	r2, r0, #1
 8007d92:	d101      	bne.n	8007d98 <__sflush_r+0x7c>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b903      	cbnz	r3, 8007d9a <__sflush_r+0x7e>
 8007d98:	6560      	str	r0, [r4, #84]	; 0x54
 8007d9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d9c:	602f      	str	r7, [r5, #0]
 8007d9e:	2900      	cmp	r1, #0
 8007da0:	d0c9      	beq.n	8007d36 <__sflush_r+0x1a>
 8007da2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007da6:	4299      	cmp	r1, r3
 8007da8:	d002      	beq.n	8007db0 <__sflush_r+0x94>
 8007daa:	4628      	mov	r0, r5
 8007dac:	f7ff f9e2 	bl	8007174 <_free_r>
 8007db0:	2000      	movs	r0, #0
 8007db2:	6360      	str	r0, [r4, #52]	; 0x34
 8007db4:	e7c0      	b.n	8007d38 <__sflush_r+0x1c>
 8007db6:	2301      	movs	r3, #1
 8007db8:	4628      	mov	r0, r5
 8007dba:	47b0      	blx	r6
 8007dbc:	1c41      	adds	r1, r0, #1
 8007dbe:	d1c8      	bne.n	8007d52 <__sflush_r+0x36>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d0c5      	beq.n	8007d52 <__sflush_r+0x36>
 8007dc6:	2b1d      	cmp	r3, #29
 8007dc8:	d001      	beq.n	8007dce <__sflush_r+0xb2>
 8007dca:	2b16      	cmp	r3, #22
 8007dcc:	d101      	bne.n	8007dd2 <__sflush_r+0xb6>
 8007dce:	602f      	str	r7, [r5, #0]
 8007dd0:	e7b1      	b.n	8007d36 <__sflush_r+0x1a>
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dd8:	81a3      	strh	r3, [r4, #12]
 8007dda:	e7ad      	b.n	8007d38 <__sflush_r+0x1c>
 8007ddc:	690f      	ldr	r7, [r1, #16]
 8007dde:	2f00      	cmp	r7, #0
 8007de0:	d0a9      	beq.n	8007d36 <__sflush_r+0x1a>
 8007de2:	0793      	lsls	r3, r2, #30
 8007de4:	680e      	ldr	r6, [r1, #0]
 8007de6:	bf08      	it	eq
 8007de8:	694b      	ldreq	r3, [r1, #20]
 8007dea:	600f      	str	r7, [r1, #0]
 8007dec:	bf18      	it	ne
 8007dee:	2300      	movne	r3, #0
 8007df0:	eba6 0807 	sub.w	r8, r6, r7
 8007df4:	608b      	str	r3, [r1, #8]
 8007df6:	f1b8 0f00 	cmp.w	r8, #0
 8007dfa:	dd9c      	ble.n	8007d36 <__sflush_r+0x1a>
 8007dfc:	6a21      	ldr	r1, [r4, #32]
 8007dfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e00:	4643      	mov	r3, r8
 8007e02:	463a      	mov	r2, r7
 8007e04:	4628      	mov	r0, r5
 8007e06:	47b0      	blx	r6
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	dc06      	bgt.n	8007e1a <__sflush_r+0xfe>
 8007e0c:	89a3      	ldrh	r3, [r4, #12]
 8007e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e12:	81a3      	strh	r3, [r4, #12]
 8007e14:	f04f 30ff 	mov.w	r0, #4294967295
 8007e18:	e78e      	b.n	8007d38 <__sflush_r+0x1c>
 8007e1a:	4407      	add	r7, r0
 8007e1c:	eba8 0800 	sub.w	r8, r8, r0
 8007e20:	e7e9      	b.n	8007df6 <__sflush_r+0xda>
 8007e22:	bf00      	nop
 8007e24:	dfbffffe 	.word	0xdfbffffe

08007e28 <_fflush_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	690b      	ldr	r3, [r1, #16]
 8007e2c:	4605      	mov	r5, r0
 8007e2e:	460c      	mov	r4, r1
 8007e30:	b913      	cbnz	r3, 8007e38 <_fflush_r+0x10>
 8007e32:	2500      	movs	r5, #0
 8007e34:	4628      	mov	r0, r5
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
 8007e38:	b118      	cbz	r0, 8007e42 <_fflush_r+0x1a>
 8007e3a:	6a03      	ldr	r3, [r0, #32]
 8007e3c:	b90b      	cbnz	r3, 8007e42 <_fflush_r+0x1a>
 8007e3e:	f7fe fa05 	bl	800624c <__sinit>
 8007e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0f3      	beq.n	8007e32 <_fflush_r+0xa>
 8007e4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e4c:	07d0      	lsls	r0, r2, #31
 8007e4e:	d404      	bmi.n	8007e5a <_fflush_r+0x32>
 8007e50:	0599      	lsls	r1, r3, #22
 8007e52:	d402      	bmi.n	8007e5a <_fflush_r+0x32>
 8007e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e56:	f7fe fb10 	bl	800647a <__retarget_lock_acquire_recursive>
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	f7ff ff5d 	bl	8007d1c <__sflush_r>
 8007e62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e64:	07da      	lsls	r2, r3, #31
 8007e66:	4605      	mov	r5, r0
 8007e68:	d4e4      	bmi.n	8007e34 <_fflush_r+0xc>
 8007e6a:	89a3      	ldrh	r3, [r4, #12]
 8007e6c:	059b      	lsls	r3, r3, #22
 8007e6e:	d4e1      	bmi.n	8007e34 <_fflush_r+0xc>
 8007e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e72:	f7fe fb03 	bl	800647c <__retarget_lock_release_recursive>
 8007e76:	e7dd      	b.n	8007e34 <_fflush_r+0xc>

08007e78 <memmove>:
 8007e78:	4288      	cmp	r0, r1
 8007e7a:	b510      	push	{r4, lr}
 8007e7c:	eb01 0402 	add.w	r4, r1, r2
 8007e80:	d902      	bls.n	8007e88 <memmove+0x10>
 8007e82:	4284      	cmp	r4, r0
 8007e84:	4623      	mov	r3, r4
 8007e86:	d807      	bhi.n	8007e98 <memmove+0x20>
 8007e88:	1e43      	subs	r3, r0, #1
 8007e8a:	42a1      	cmp	r1, r4
 8007e8c:	d008      	beq.n	8007ea0 <memmove+0x28>
 8007e8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e96:	e7f8      	b.n	8007e8a <memmove+0x12>
 8007e98:	4402      	add	r2, r0
 8007e9a:	4601      	mov	r1, r0
 8007e9c:	428a      	cmp	r2, r1
 8007e9e:	d100      	bne.n	8007ea2 <memmove+0x2a>
 8007ea0:	bd10      	pop	{r4, pc}
 8007ea2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ea6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007eaa:	e7f7      	b.n	8007e9c <memmove+0x24>

08007eac <_sbrk_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	4d06      	ldr	r5, [pc, #24]	; (8007ec8 <_sbrk_r+0x1c>)
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	4608      	mov	r0, r1
 8007eb6:	602b      	str	r3, [r5, #0]
 8007eb8:	f7f9 fe12 	bl	8001ae0 <_sbrk>
 8007ebc:	1c43      	adds	r3, r0, #1
 8007ebe:	d102      	bne.n	8007ec6 <_sbrk_r+0x1a>
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	b103      	cbz	r3, 8007ec6 <_sbrk_r+0x1a>
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}
 8007ec8:	20000510 	.word	0x20000510

08007ecc <memcpy>:
 8007ecc:	440a      	add	r2, r1
 8007ece:	4291      	cmp	r1, r2
 8007ed0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ed4:	d100      	bne.n	8007ed8 <memcpy+0xc>
 8007ed6:	4770      	bx	lr
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ee2:	4291      	cmp	r1, r2
 8007ee4:	d1f9      	bne.n	8007eda <memcpy+0xe>
 8007ee6:	bd10      	pop	{r4, pc}

08007ee8 <__assert_func>:
 8007ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007eea:	4614      	mov	r4, r2
 8007eec:	461a      	mov	r2, r3
 8007eee:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <__assert_func+0x2c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	68d8      	ldr	r0, [r3, #12]
 8007ef6:	b14c      	cbz	r4, 8007f0c <__assert_func+0x24>
 8007ef8:	4b07      	ldr	r3, [pc, #28]	; (8007f18 <__assert_func+0x30>)
 8007efa:	9100      	str	r1, [sp, #0]
 8007efc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f00:	4906      	ldr	r1, [pc, #24]	; (8007f1c <__assert_func+0x34>)
 8007f02:	462b      	mov	r3, r5
 8007f04:	f000 f872 	bl	8007fec <fiprintf>
 8007f08:	f000 f882 	bl	8008010 <abort>
 8007f0c:	4b04      	ldr	r3, [pc, #16]	; (8007f20 <__assert_func+0x38>)
 8007f0e:	461c      	mov	r4, r3
 8007f10:	e7f3      	b.n	8007efa <__assert_func+0x12>
 8007f12:	bf00      	nop
 8007f14:	200000f4 	.word	0x200000f4
 8007f18:	08008f0f 	.word	0x08008f0f
 8007f1c:	08008f1c 	.word	0x08008f1c
 8007f20:	08008f4a 	.word	0x08008f4a

08007f24 <_calloc_r>:
 8007f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f26:	fba1 2402 	umull	r2, r4, r1, r2
 8007f2a:	b94c      	cbnz	r4, 8007f40 <_calloc_r+0x1c>
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	9201      	str	r2, [sp, #4]
 8007f30:	f7ff f994 	bl	800725c <_malloc_r>
 8007f34:	9a01      	ldr	r2, [sp, #4]
 8007f36:	4605      	mov	r5, r0
 8007f38:	b930      	cbnz	r0, 8007f48 <_calloc_r+0x24>
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	b003      	add	sp, #12
 8007f3e:	bd30      	pop	{r4, r5, pc}
 8007f40:	220c      	movs	r2, #12
 8007f42:	6002      	str	r2, [r0, #0]
 8007f44:	2500      	movs	r5, #0
 8007f46:	e7f8      	b.n	8007f3a <_calloc_r+0x16>
 8007f48:	4621      	mov	r1, r4
 8007f4a:	f7fe fa18 	bl	800637e <memset>
 8007f4e:	e7f4      	b.n	8007f3a <_calloc_r+0x16>

08007f50 <__ascii_mbtowc>:
 8007f50:	b082      	sub	sp, #8
 8007f52:	b901      	cbnz	r1, 8007f56 <__ascii_mbtowc+0x6>
 8007f54:	a901      	add	r1, sp, #4
 8007f56:	b142      	cbz	r2, 8007f6a <__ascii_mbtowc+0x1a>
 8007f58:	b14b      	cbz	r3, 8007f6e <__ascii_mbtowc+0x1e>
 8007f5a:	7813      	ldrb	r3, [r2, #0]
 8007f5c:	600b      	str	r3, [r1, #0]
 8007f5e:	7812      	ldrb	r2, [r2, #0]
 8007f60:	1e10      	subs	r0, r2, #0
 8007f62:	bf18      	it	ne
 8007f64:	2001      	movne	r0, #1
 8007f66:	b002      	add	sp, #8
 8007f68:	4770      	bx	lr
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	e7fb      	b.n	8007f66 <__ascii_mbtowc+0x16>
 8007f6e:	f06f 0001 	mvn.w	r0, #1
 8007f72:	e7f8      	b.n	8007f66 <__ascii_mbtowc+0x16>

08007f74 <_realloc_r>:
 8007f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f78:	4680      	mov	r8, r0
 8007f7a:	4614      	mov	r4, r2
 8007f7c:	460e      	mov	r6, r1
 8007f7e:	b921      	cbnz	r1, 8007f8a <_realloc_r+0x16>
 8007f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f84:	4611      	mov	r1, r2
 8007f86:	f7ff b969 	b.w	800725c <_malloc_r>
 8007f8a:	b92a      	cbnz	r2, 8007f98 <_realloc_r+0x24>
 8007f8c:	f7ff f8f2 	bl	8007174 <_free_r>
 8007f90:	4625      	mov	r5, r4
 8007f92:	4628      	mov	r0, r5
 8007f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f98:	f000 f841 	bl	800801e <_malloc_usable_size_r>
 8007f9c:	4284      	cmp	r4, r0
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	d802      	bhi.n	8007fa8 <_realloc_r+0x34>
 8007fa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007fa6:	d812      	bhi.n	8007fce <_realloc_r+0x5a>
 8007fa8:	4621      	mov	r1, r4
 8007faa:	4640      	mov	r0, r8
 8007fac:	f7ff f956 	bl	800725c <_malloc_r>
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d0ed      	beq.n	8007f92 <_realloc_r+0x1e>
 8007fb6:	42bc      	cmp	r4, r7
 8007fb8:	4622      	mov	r2, r4
 8007fba:	4631      	mov	r1, r6
 8007fbc:	bf28      	it	cs
 8007fbe:	463a      	movcs	r2, r7
 8007fc0:	f7ff ff84 	bl	8007ecc <memcpy>
 8007fc4:	4631      	mov	r1, r6
 8007fc6:	4640      	mov	r0, r8
 8007fc8:	f7ff f8d4 	bl	8007174 <_free_r>
 8007fcc:	e7e1      	b.n	8007f92 <_realloc_r+0x1e>
 8007fce:	4635      	mov	r5, r6
 8007fd0:	e7df      	b.n	8007f92 <_realloc_r+0x1e>

08007fd2 <__ascii_wctomb>:
 8007fd2:	b149      	cbz	r1, 8007fe8 <__ascii_wctomb+0x16>
 8007fd4:	2aff      	cmp	r2, #255	; 0xff
 8007fd6:	bf85      	ittet	hi
 8007fd8:	238a      	movhi	r3, #138	; 0x8a
 8007fda:	6003      	strhi	r3, [r0, #0]
 8007fdc:	700a      	strbls	r2, [r1, #0]
 8007fde:	f04f 30ff 	movhi.w	r0, #4294967295
 8007fe2:	bf98      	it	ls
 8007fe4:	2001      	movls	r0, #1
 8007fe6:	4770      	bx	lr
 8007fe8:	4608      	mov	r0, r1
 8007fea:	4770      	bx	lr

08007fec <fiprintf>:
 8007fec:	b40e      	push	{r1, r2, r3}
 8007fee:	b503      	push	{r0, r1, lr}
 8007ff0:	4601      	mov	r1, r0
 8007ff2:	ab03      	add	r3, sp, #12
 8007ff4:	4805      	ldr	r0, [pc, #20]	; (800800c <fiprintf+0x20>)
 8007ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ffa:	6800      	ldr	r0, [r0, #0]
 8007ffc:	9301      	str	r3, [sp, #4]
 8007ffe:	f000 f83f 	bl	8008080 <_vfiprintf_r>
 8008002:	b002      	add	sp, #8
 8008004:	f85d eb04 	ldr.w	lr, [sp], #4
 8008008:	b003      	add	sp, #12
 800800a:	4770      	bx	lr
 800800c:	200000f4 	.word	0x200000f4

08008010 <abort>:
 8008010:	b508      	push	{r3, lr}
 8008012:	2006      	movs	r0, #6
 8008014:	f000 fa0c 	bl	8008430 <raise>
 8008018:	2001      	movs	r0, #1
 800801a:	f7f9 fce9 	bl	80019f0 <_exit>

0800801e <_malloc_usable_size_r>:
 800801e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008022:	1f18      	subs	r0, r3, #4
 8008024:	2b00      	cmp	r3, #0
 8008026:	bfbc      	itt	lt
 8008028:	580b      	ldrlt	r3, [r1, r0]
 800802a:	18c0      	addlt	r0, r0, r3
 800802c:	4770      	bx	lr

0800802e <__sfputc_r>:
 800802e:	6893      	ldr	r3, [r2, #8]
 8008030:	3b01      	subs	r3, #1
 8008032:	2b00      	cmp	r3, #0
 8008034:	b410      	push	{r4}
 8008036:	6093      	str	r3, [r2, #8]
 8008038:	da08      	bge.n	800804c <__sfputc_r+0x1e>
 800803a:	6994      	ldr	r4, [r2, #24]
 800803c:	42a3      	cmp	r3, r4
 800803e:	db01      	blt.n	8008044 <__sfputc_r+0x16>
 8008040:	290a      	cmp	r1, #10
 8008042:	d103      	bne.n	800804c <__sfputc_r+0x1e>
 8008044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008048:	f000 b934 	b.w	80082b4 <__swbuf_r>
 800804c:	6813      	ldr	r3, [r2, #0]
 800804e:	1c58      	adds	r0, r3, #1
 8008050:	6010      	str	r0, [r2, #0]
 8008052:	7019      	strb	r1, [r3, #0]
 8008054:	4608      	mov	r0, r1
 8008056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800805a:	4770      	bx	lr

0800805c <__sfputs_r>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	4606      	mov	r6, r0
 8008060:	460f      	mov	r7, r1
 8008062:	4614      	mov	r4, r2
 8008064:	18d5      	adds	r5, r2, r3
 8008066:	42ac      	cmp	r4, r5
 8008068:	d101      	bne.n	800806e <__sfputs_r+0x12>
 800806a:	2000      	movs	r0, #0
 800806c:	e007      	b.n	800807e <__sfputs_r+0x22>
 800806e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008072:	463a      	mov	r2, r7
 8008074:	4630      	mov	r0, r6
 8008076:	f7ff ffda 	bl	800802e <__sfputc_r>
 800807a:	1c43      	adds	r3, r0, #1
 800807c:	d1f3      	bne.n	8008066 <__sfputs_r+0xa>
 800807e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008080 <_vfiprintf_r>:
 8008080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008084:	460d      	mov	r5, r1
 8008086:	b09d      	sub	sp, #116	; 0x74
 8008088:	4614      	mov	r4, r2
 800808a:	4698      	mov	r8, r3
 800808c:	4606      	mov	r6, r0
 800808e:	b118      	cbz	r0, 8008098 <_vfiprintf_r+0x18>
 8008090:	6a03      	ldr	r3, [r0, #32]
 8008092:	b90b      	cbnz	r3, 8008098 <_vfiprintf_r+0x18>
 8008094:	f7fe f8da 	bl	800624c <__sinit>
 8008098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800809a:	07d9      	lsls	r1, r3, #31
 800809c:	d405      	bmi.n	80080aa <_vfiprintf_r+0x2a>
 800809e:	89ab      	ldrh	r3, [r5, #12]
 80080a0:	059a      	lsls	r2, r3, #22
 80080a2:	d402      	bmi.n	80080aa <_vfiprintf_r+0x2a>
 80080a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080a6:	f7fe f9e8 	bl	800647a <__retarget_lock_acquire_recursive>
 80080aa:	89ab      	ldrh	r3, [r5, #12]
 80080ac:	071b      	lsls	r3, r3, #28
 80080ae:	d501      	bpl.n	80080b4 <_vfiprintf_r+0x34>
 80080b0:	692b      	ldr	r3, [r5, #16]
 80080b2:	b99b      	cbnz	r3, 80080dc <_vfiprintf_r+0x5c>
 80080b4:	4629      	mov	r1, r5
 80080b6:	4630      	mov	r0, r6
 80080b8:	f000 f93a 	bl	8008330 <__swsetup_r>
 80080bc:	b170      	cbz	r0, 80080dc <_vfiprintf_r+0x5c>
 80080be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080c0:	07dc      	lsls	r4, r3, #31
 80080c2:	d504      	bpl.n	80080ce <_vfiprintf_r+0x4e>
 80080c4:	f04f 30ff 	mov.w	r0, #4294967295
 80080c8:	b01d      	add	sp, #116	; 0x74
 80080ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ce:	89ab      	ldrh	r3, [r5, #12]
 80080d0:	0598      	lsls	r0, r3, #22
 80080d2:	d4f7      	bmi.n	80080c4 <_vfiprintf_r+0x44>
 80080d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080d6:	f7fe f9d1 	bl	800647c <__retarget_lock_release_recursive>
 80080da:	e7f3      	b.n	80080c4 <_vfiprintf_r+0x44>
 80080dc:	2300      	movs	r3, #0
 80080de:	9309      	str	r3, [sp, #36]	; 0x24
 80080e0:	2320      	movs	r3, #32
 80080e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80080ea:	2330      	movs	r3, #48	; 0x30
 80080ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80082a0 <_vfiprintf_r+0x220>
 80080f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080f4:	f04f 0901 	mov.w	r9, #1
 80080f8:	4623      	mov	r3, r4
 80080fa:	469a      	mov	sl, r3
 80080fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008100:	b10a      	cbz	r2, 8008106 <_vfiprintf_r+0x86>
 8008102:	2a25      	cmp	r2, #37	; 0x25
 8008104:	d1f9      	bne.n	80080fa <_vfiprintf_r+0x7a>
 8008106:	ebba 0b04 	subs.w	fp, sl, r4
 800810a:	d00b      	beq.n	8008124 <_vfiprintf_r+0xa4>
 800810c:	465b      	mov	r3, fp
 800810e:	4622      	mov	r2, r4
 8008110:	4629      	mov	r1, r5
 8008112:	4630      	mov	r0, r6
 8008114:	f7ff ffa2 	bl	800805c <__sfputs_r>
 8008118:	3001      	adds	r0, #1
 800811a:	f000 80a9 	beq.w	8008270 <_vfiprintf_r+0x1f0>
 800811e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008120:	445a      	add	r2, fp
 8008122:	9209      	str	r2, [sp, #36]	; 0x24
 8008124:	f89a 3000 	ldrb.w	r3, [sl]
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 80a1 	beq.w	8008270 <_vfiprintf_r+0x1f0>
 800812e:	2300      	movs	r3, #0
 8008130:	f04f 32ff 	mov.w	r2, #4294967295
 8008134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008138:	f10a 0a01 	add.w	sl, sl, #1
 800813c:	9304      	str	r3, [sp, #16]
 800813e:	9307      	str	r3, [sp, #28]
 8008140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008144:	931a      	str	r3, [sp, #104]	; 0x68
 8008146:	4654      	mov	r4, sl
 8008148:	2205      	movs	r2, #5
 800814a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800814e:	4854      	ldr	r0, [pc, #336]	; (80082a0 <_vfiprintf_r+0x220>)
 8008150:	f7f8 f83e 	bl	80001d0 <memchr>
 8008154:	9a04      	ldr	r2, [sp, #16]
 8008156:	b9d8      	cbnz	r0, 8008190 <_vfiprintf_r+0x110>
 8008158:	06d1      	lsls	r1, r2, #27
 800815a:	bf44      	itt	mi
 800815c:	2320      	movmi	r3, #32
 800815e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008162:	0713      	lsls	r3, r2, #28
 8008164:	bf44      	itt	mi
 8008166:	232b      	movmi	r3, #43	; 0x2b
 8008168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800816c:	f89a 3000 	ldrb.w	r3, [sl]
 8008170:	2b2a      	cmp	r3, #42	; 0x2a
 8008172:	d015      	beq.n	80081a0 <_vfiprintf_r+0x120>
 8008174:	9a07      	ldr	r2, [sp, #28]
 8008176:	4654      	mov	r4, sl
 8008178:	2000      	movs	r0, #0
 800817a:	f04f 0c0a 	mov.w	ip, #10
 800817e:	4621      	mov	r1, r4
 8008180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008184:	3b30      	subs	r3, #48	; 0x30
 8008186:	2b09      	cmp	r3, #9
 8008188:	d94d      	bls.n	8008226 <_vfiprintf_r+0x1a6>
 800818a:	b1b0      	cbz	r0, 80081ba <_vfiprintf_r+0x13a>
 800818c:	9207      	str	r2, [sp, #28]
 800818e:	e014      	b.n	80081ba <_vfiprintf_r+0x13a>
 8008190:	eba0 0308 	sub.w	r3, r0, r8
 8008194:	fa09 f303 	lsl.w	r3, r9, r3
 8008198:	4313      	orrs	r3, r2
 800819a:	9304      	str	r3, [sp, #16]
 800819c:	46a2      	mov	sl, r4
 800819e:	e7d2      	b.n	8008146 <_vfiprintf_r+0xc6>
 80081a0:	9b03      	ldr	r3, [sp, #12]
 80081a2:	1d19      	adds	r1, r3, #4
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	9103      	str	r1, [sp, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	bfbb      	ittet	lt
 80081ac:	425b      	neglt	r3, r3
 80081ae:	f042 0202 	orrlt.w	r2, r2, #2
 80081b2:	9307      	strge	r3, [sp, #28]
 80081b4:	9307      	strlt	r3, [sp, #28]
 80081b6:	bfb8      	it	lt
 80081b8:	9204      	strlt	r2, [sp, #16]
 80081ba:	7823      	ldrb	r3, [r4, #0]
 80081bc:	2b2e      	cmp	r3, #46	; 0x2e
 80081be:	d10c      	bne.n	80081da <_vfiprintf_r+0x15a>
 80081c0:	7863      	ldrb	r3, [r4, #1]
 80081c2:	2b2a      	cmp	r3, #42	; 0x2a
 80081c4:	d134      	bne.n	8008230 <_vfiprintf_r+0x1b0>
 80081c6:	9b03      	ldr	r3, [sp, #12]
 80081c8:	1d1a      	adds	r2, r3, #4
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	9203      	str	r2, [sp, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	bfb8      	it	lt
 80081d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80081d6:	3402      	adds	r4, #2
 80081d8:	9305      	str	r3, [sp, #20]
 80081da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80082b0 <_vfiprintf_r+0x230>
 80081de:	7821      	ldrb	r1, [r4, #0]
 80081e0:	2203      	movs	r2, #3
 80081e2:	4650      	mov	r0, sl
 80081e4:	f7f7 fff4 	bl	80001d0 <memchr>
 80081e8:	b138      	cbz	r0, 80081fa <_vfiprintf_r+0x17a>
 80081ea:	9b04      	ldr	r3, [sp, #16]
 80081ec:	eba0 000a 	sub.w	r0, r0, sl
 80081f0:	2240      	movs	r2, #64	; 0x40
 80081f2:	4082      	lsls	r2, r0
 80081f4:	4313      	orrs	r3, r2
 80081f6:	3401      	adds	r4, #1
 80081f8:	9304      	str	r3, [sp, #16]
 80081fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081fe:	4829      	ldr	r0, [pc, #164]	; (80082a4 <_vfiprintf_r+0x224>)
 8008200:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008204:	2206      	movs	r2, #6
 8008206:	f7f7 ffe3 	bl	80001d0 <memchr>
 800820a:	2800      	cmp	r0, #0
 800820c:	d03f      	beq.n	800828e <_vfiprintf_r+0x20e>
 800820e:	4b26      	ldr	r3, [pc, #152]	; (80082a8 <_vfiprintf_r+0x228>)
 8008210:	bb1b      	cbnz	r3, 800825a <_vfiprintf_r+0x1da>
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	3307      	adds	r3, #7
 8008216:	f023 0307 	bic.w	r3, r3, #7
 800821a:	3308      	adds	r3, #8
 800821c:	9303      	str	r3, [sp, #12]
 800821e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008220:	443b      	add	r3, r7
 8008222:	9309      	str	r3, [sp, #36]	; 0x24
 8008224:	e768      	b.n	80080f8 <_vfiprintf_r+0x78>
 8008226:	fb0c 3202 	mla	r2, ip, r2, r3
 800822a:	460c      	mov	r4, r1
 800822c:	2001      	movs	r0, #1
 800822e:	e7a6      	b.n	800817e <_vfiprintf_r+0xfe>
 8008230:	2300      	movs	r3, #0
 8008232:	3401      	adds	r4, #1
 8008234:	9305      	str	r3, [sp, #20]
 8008236:	4619      	mov	r1, r3
 8008238:	f04f 0c0a 	mov.w	ip, #10
 800823c:	4620      	mov	r0, r4
 800823e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008242:	3a30      	subs	r2, #48	; 0x30
 8008244:	2a09      	cmp	r2, #9
 8008246:	d903      	bls.n	8008250 <_vfiprintf_r+0x1d0>
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0c6      	beq.n	80081da <_vfiprintf_r+0x15a>
 800824c:	9105      	str	r1, [sp, #20]
 800824e:	e7c4      	b.n	80081da <_vfiprintf_r+0x15a>
 8008250:	fb0c 2101 	mla	r1, ip, r1, r2
 8008254:	4604      	mov	r4, r0
 8008256:	2301      	movs	r3, #1
 8008258:	e7f0      	b.n	800823c <_vfiprintf_r+0x1bc>
 800825a:	ab03      	add	r3, sp, #12
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	462a      	mov	r2, r5
 8008260:	4b12      	ldr	r3, [pc, #72]	; (80082ac <_vfiprintf_r+0x22c>)
 8008262:	a904      	add	r1, sp, #16
 8008264:	4630      	mov	r0, r6
 8008266:	f7fd fb9f 	bl	80059a8 <_printf_float>
 800826a:	4607      	mov	r7, r0
 800826c:	1c78      	adds	r0, r7, #1
 800826e:	d1d6      	bne.n	800821e <_vfiprintf_r+0x19e>
 8008270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008272:	07d9      	lsls	r1, r3, #31
 8008274:	d405      	bmi.n	8008282 <_vfiprintf_r+0x202>
 8008276:	89ab      	ldrh	r3, [r5, #12]
 8008278:	059a      	lsls	r2, r3, #22
 800827a:	d402      	bmi.n	8008282 <_vfiprintf_r+0x202>
 800827c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800827e:	f7fe f8fd 	bl	800647c <__retarget_lock_release_recursive>
 8008282:	89ab      	ldrh	r3, [r5, #12]
 8008284:	065b      	lsls	r3, r3, #25
 8008286:	f53f af1d 	bmi.w	80080c4 <_vfiprintf_r+0x44>
 800828a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800828c:	e71c      	b.n	80080c8 <_vfiprintf_r+0x48>
 800828e:	ab03      	add	r3, sp, #12
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	462a      	mov	r2, r5
 8008294:	4b05      	ldr	r3, [pc, #20]	; (80082ac <_vfiprintf_r+0x22c>)
 8008296:	a904      	add	r1, sp, #16
 8008298:	4630      	mov	r0, r6
 800829a:	f7fd fe29 	bl	8005ef0 <_printf_i>
 800829e:	e7e4      	b.n	800826a <_vfiprintf_r+0x1ea>
 80082a0:	08008ef4 	.word	0x08008ef4
 80082a4:	08008efe 	.word	0x08008efe
 80082a8:	080059a9 	.word	0x080059a9
 80082ac:	0800805d 	.word	0x0800805d
 80082b0:	08008efa 	.word	0x08008efa

080082b4 <__swbuf_r>:
 80082b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b6:	460e      	mov	r6, r1
 80082b8:	4614      	mov	r4, r2
 80082ba:	4605      	mov	r5, r0
 80082bc:	b118      	cbz	r0, 80082c6 <__swbuf_r+0x12>
 80082be:	6a03      	ldr	r3, [r0, #32]
 80082c0:	b90b      	cbnz	r3, 80082c6 <__swbuf_r+0x12>
 80082c2:	f7fd ffc3 	bl	800624c <__sinit>
 80082c6:	69a3      	ldr	r3, [r4, #24]
 80082c8:	60a3      	str	r3, [r4, #8]
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	071a      	lsls	r2, r3, #28
 80082ce:	d525      	bpl.n	800831c <__swbuf_r+0x68>
 80082d0:	6923      	ldr	r3, [r4, #16]
 80082d2:	b31b      	cbz	r3, 800831c <__swbuf_r+0x68>
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	6922      	ldr	r2, [r4, #16]
 80082d8:	1a98      	subs	r0, r3, r2
 80082da:	6963      	ldr	r3, [r4, #20]
 80082dc:	b2f6      	uxtb	r6, r6
 80082de:	4283      	cmp	r3, r0
 80082e0:	4637      	mov	r7, r6
 80082e2:	dc04      	bgt.n	80082ee <__swbuf_r+0x3a>
 80082e4:	4621      	mov	r1, r4
 80082e6:	4628      	mov	r0, r5
 80082e8:	f7ff fd9e 	bl	8007e28 <_fflush_r>
 80082ec:	b9e0      	cbnz	r0, 8008328 <__swbuf_r+0x74>
 80082ee:	68a3      	ldr	r3, [r4, #8]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	60a3      	str	r3, [r4, #8]
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	1c5a      	adds	r2, r3, #1
 80082f8:	6022      	str	r2, [r4, #0]
 80082fa:	701e      	strb	r6, [r3, #0]
 80082fc:	6962      	ldr	r2, [r4, #20]
 80082fe:	1c43      	adds	r3, r0, #1
 8008300:	429a      	cmp	r2, r3
 8008302:	d004      	beq.n	800830e <__swbuf_r+0x5a>
 8008304:	89a3      	ldrh	r3, [r4, #12]
 8008306:	07db      	lsls	r3, r3, #31
 8008308:	d506      	bpl.n	8008318 <__swbuf_r+0x64>
 800830a:	2e0a      	cmp	r6, #10
 800830c:	d104      	bne.n	8008318 <__swbuf_r+0x64>
 800830e:	4621      	mov	r1, r4
 8008310:	4628      	mov	r0, r5
 8008312:	f7ff fd89 	bl	8007e28 <_fflush_r>
 8008316:	b938      	cbnz	r0, 8008328 <__swbuf_r+0x74>
 8008318:	4638      	mov	r0, r7
 800831a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800831c:	4621      	mov	r1, r4
 800831e:	4628      	mov	r0, r5
 8008320:	f000 f806 	bl	8008330 <__swsetup_r>
 8008324:	2800      	cmp	r0, #0
 8008326:	d0d5      	beq.n	80082d4 <__swbuf_r+0x20>
 8008328:	f04f 37ff 	mov.w	r7, #4294967295
 800832c:	e7f4      	b.n	8008318 <__swbuf_r+0x64>
	...

08008330 <__swsetup_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4b2a      	ldr	r3, [pc, #168]	; (80083dc <__swsetup_r+0xac>)
 8008334:	4605      	mov	r5, r0
 8008336:	6818      	ldr	r0, [r3, #0]
 8008338:	460c      	mov	r4, r1
 800833a:	b118      	cbz	r0, 8008344 <__swsetup_r+0x14>
 800833c:	6a03      	ldr	r3, [r0, #32]
 800833e:	b90b      	cbnz	r3, 8008344 <__swsetup_r+0x14>
 8008340:	f7fd ff84 	bl	800624c <__sinit>
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800834a:	0718      	lsls	r0, r3, #28
 800834c:	d422      	bmi.n	8008394 <__swsetup_r+0x64>
 800834e:	06d9      	lsls	r1, r3, #27
 8008350:	d407      	bmi.n	8008362 <__swsetup_r+0x32>
 8008352:	2309      	movs	r3, #9
 8008354:	602b      	str	r3, [r5, #0]
 8008356:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800835a:	81a3      	strh	r3, [r4, #12]
 800835c:	f04f 30ff 	mov.w	r0, #4294967295
 8008360:	e034      	b.n	80083cc <__swsetup_r+0x9c>
 8008362:	0758      	lsls	r0, r3, #29
 8008364:	d512      	bpl.n	800838c <__swsetup_r+0x5c>
 8008366:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008368:	b141      	cbz	r1, 800837c <__swsetup_r+0x4c>
 800836a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800836e:	4299      	cmp	r1, r3
 8008370:	d002      	beq.n	8008378 <__swsetup_r+0x48>
 8008372:	4628      	mov	r0, r5
 8008374:	f7fe fefe 	bl	8007174 <_free_r>
 8008378:	2300      	movs	r3, #0
 800837a:	6363      	str	r3, [r4, #52]	; 0x34
 800837c:	89a3      	ldrh	r3, [r4, #12]
 800837e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008382:	81a3      	strh	r3, [r4, #12]
 8008384:	2300      	movs	r3, #0
 8008386:	6063      	str	r3, [r4, #4]
 8008388:	6923      	ldr	r3, [r4, #16]
 800838a:	6023      	str	r3, [r4, #0]
 800838c:	89a3      	ldrh	r3, [r4, #12]
 800838e:	f043 0308 	orr.w	r3, r3, #8
 8008392:	81a3      	strh	r3, [r4, #12]
 8008394:	6923      	ldr	r3, [r4, #16]
 8008396:	b94b      	cbnz	r3, 80083ac <__swsetup_r+0x7c>
 8008398:	89a3      	ldrh	r3, [r4, #12]
 800839a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800839e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083a2:	d003      	beq.n	80083ac <__swsetup_r+0x7c>
 80083a4:	4621      	mov	r1, r4
 80083a6:	4628      	mov	r0, r5
 80083a8:	f000 f884 	bl	80084b4 <__smakebuf_r>
 80083ac:	89a0      	ldrh	r0, [r4, #12]
 80083ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083b2:	f010 0301 	ands.w	r3, r0, #1
 80083b6:	d00a      	beq.n	80083ce <__swsetup_r+0x9e>
 80083b8:	2300      	movs	r3, #0
 80083ba:	60a3      	str	r3, [r4, #8]
 80083bc:	6963      	ldr	r3, [r4, #20]
 80083be:	425b      	negs	r3, r3
 80083c0:	61a3      	str	r3, [r4, #24]
 80083c2:	6923      	ldr	r3, [r4, #16]
 80083c4:	b943      	cbnz	r3, 80083d8 <__swsetup_r+0xa8>
 80083c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083ca:	d1c4      	bne.n	8008356 <__swsetup_r+0x26>
 80083cc:	bd38      	pop	{r3, r4, r5, pc}
 80083ce:	0781      	lsls	r1, r0, #30
 80083d0:	bf58      	it	pl
 80083d2:	6963      	ldrpl	r3, [r4, #20]
 80083d4:	60a3      	str	r3, [r4, #8]
 80083d6:	e7f4      	b.n	80083c2 <__swsetup_r+0x92>
 80083d8:	2000      	movs	r0, #0
 80083da:	e7f7      	b.n	80083cc <__swsetup_r+0x9c>
 80083dc:	200000f4 	.word	0x200000f4

080083e0 <_raise_r>:
 80083e0:	291f      	cmp	r1, #31
 80083e2:	b538      	push	{r3, r4, r5, lr}
 80083e4:	4604      	mov	r4, r0
 80083e6:	460d      	mov	r5, r1
 80083e8:	d904      	bls.n	80083f4 <_raise_r+0x14>
 80083ea:	2316      	movs	r3, #22
 80083ec:	6003      	str	r3, [r0, #0]
 80083ee:	f04f 30ff 	mov.w	r0, #4294967295
 80083f2:	bd38      	pop	{r3, r4, r5, pc}
 80083f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80083f6:	b112      	cbz	r2, 80083fe <_raise_r+0x1e>
 80083f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083fc:	b94b      	cbnz	r3, 8008412 <_raise_r+0x32>
 80083fe:	4620      	mov	r0, r4
 8008400:	f000 f830 	bl	8008464 <_getpid_r>
 8008404:	462a      	mov	r2, r5
 8008406:	4601      	mov	r1, r0
 8008408:	4620      	mov	r0, r4
 800840a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800840e:	f000 b817 	b.w	8008440 <_kill_r>
 8008412:	2b01      	cmp	r3, #1
 8008414:	d00a      	beq.n	800842c <_raise_r+0x4c>
 8008416:	1c59      	adds	r1, r3, #1
 8008418:	d103      	bne.n	8008422 <_raise_r+0x42>
 800841a:	2316      	movs	r3, #22
 800841c:	6003      	str	r3, [r0, #0]
 800841e:	2001      	movs	r0, #1
 8008420:	e7e7      	b.n	80083f2 <_raise_r+0x12>
 8008422:	2400      	movs	r4, #0
 8008424:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008428:	4628      	mov	r0, r5
 800842a:	4798      	blx	r3
 800842c:	2000      	movs	r0, #0
 800842e:	e7e0      	b.n	80083f2 <_raise_r+0x12>

08008430 <raise>:
 8008430:	4b02      	ldr	r3, [pc, #8]	; (800843c <raise+0xc>)
 8008432:	4601      	mov	r1, r0
 8008434:	6818      	ldr	r0, [r3, #0]
 8008436:	f7ff bfd3 	b.w	80083e0 <_raise_r>
 800843a:	bf00      	nop
 800843c:	200000f4 	.word	0x200000f4

08008440 <_kill_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4d07      	ldr	r5, [pc, #28]	; (8008460 <_kill_r+0x20>)
 8008444:	2300      	movs	r3, #0
 8008446:	4604      	mov	r4, r0
 8008448:	4608      	mov	r0, r1
 800844a:	4611      	mov	r1, r2
 800844c:	602b      	str	r3, [r5, #0]
 800844e:	f7f9 fabf 	bl	80019d0 <_kill>
 8008452:	1c43      	adds	r3, r0, #1
 8008454:	d102      	bne.n	800845c <_kill_r+0x1c>
 8008456:	682b      	ldr	r3, [r5, #0]
 8008458:	b103      	cbz	r3, 800845c <_kill_r+0x1c>
 800845a:	6023      	str	r3, [r4, #0]
 800845c:	bd38      	pop	{r3, r4, r5, pc}
 800845e:	bf00      	nop
 8008460:	20000510 	.word	0x20000510

08008464 <_getpid_r>:
 8008464:	f7f9 baac 	b.w	80019c0 <_getpid>

08008468 <__swhatbuf_r>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	460c      	mov	r4, r1
 800846c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008470:	2900      	cmp	r1, #0
 8008472:	b096      	sub	sp, #88	; 0x58
 8008474:	4615      	mov	r5, r2
 8008476:	461e      	mov	r6, r3
 8008478:	da0d      	bge.n	8008496 <__swhatbuf_r+0x2e>
 800847a:	89a3      	ldrh	r3, [r4, #12]
 800847c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008480:	f04f 0100 	mov.w	r1, #0
 8008484:	bf0c      	ite	eq
 8008486:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800848a:	2340      	movne	r3, #64	; 0x40
 800848c:	2000      	movs	r0, #0
 800848e:	6031      	str	r1, [r6, #0]
 8008490:	602b      	str	r3, [r5, #0]
 8008492:	b016      	add	sp, #88	; 0x58
 8008494:	bd70      	pop	{r4, r5, r6, pc}
 8008496:	466a      	mov	r2, sp
 8008498:	f000 f848 	bl	800852c <_fstat_r>
 800849c:	2800      	cmp	r0, #0
 800849e:	dbec      	blt.n	800847a <__swhatbuf_r+0x12>
 80084a0:	9901      	ldr	r1, [sp, #4]
 80084a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80084a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80084aa:	4259      	negs	r1, r3
 80084ac:	4159      	adcs	r1, r3
 80084ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084b2:	e7eb      	b.n	800848c <__swhatbuf_r+0x24>

080084b4 <__smakebuf_r>:
 80084b4:	898b      	ldrh	r3, [r1, #12]
 80084b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084b8:	079d      	lsls	r5, r3, #30
 80084ba:	4606      	mov	r6, r0
 80084bc:	460c      	mov	r4, r1
 80084be:	d507      	bpl.n	80084d0 <__smakebuf_r+0x1c>
 80084c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	6123      	str	r3, [r4, #16]
 80084c8:	2301      	movs	r3, #1
 80084ca:	6163      	str	r3, [r4, #20]
 80084cc:	b002      	add	sp, #8
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	ab01      	add	r3, sp, #4
 80084d2:	466a      	mov	r2, sp
 80084d4:	f7ff ffc8 	bl	8008468 <__swhatbuf_r>
 80084d8:	9900      	ldr	r1, [sp, #0]
 80084da:	4605      	mov	r5, r0
 80084dc:	4630      	mov	r0, r6
 80084de:	f7fe febd 	bl	800725c <_malloc_r>
 80084e2:	b948      	cbnz	r0, 80084f8 <__smakebuf_r+0x44>
 80084e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084e8:	059a      	lsls	r2, r3, #22
 80084ea:	d4ef      	bmi.n	80084cc <__smakebuf_r+0x18>
 80084ec:	f023 0303 	bic.w	r3, r3, #3
 80084f0:	f043 0302 	orr.w	r3, r3, #2
 80084f4:	81a3      	strh	r3, [r4, #12]
 80084f6:	e7e3      	b.n	80084c0 <__smakebuf_r+0xc>
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	6020      	str	r0, [r4, #0]
 80084fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008500:	81a3      	strh	r3, [r4, #12]
 8008502:	9b00      	ldr	r3, [sp, #0]
 8008504:	6163      	str	r3, [r4, #20]
 8008506:	9b01      	ldr	r3, [sp, #4]
 8008508:	6120      	str	r0, [r4, #16]
 800850a:	b15b      	cbz	r3, 8008524 <__smakebuf_r+0x70>
 800850c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008510:	4630      	mov	r0, r6
 8008512:	f000 f81d 	bl	8008550 <_isatty_r>
 8008516:	b128      	cbz	r0, 8008524 <__smakebuf_r+0x70>
 8008518:	89a3      	ldrh	r3, [r4, #12]
 800851a:	f023 0303 	bic.w	r3, r3, #3
 800851e:	f043 0301 	orr.w	r3, r3, #1
 8008522:	81a3      	strh	r3, [r4, #12]
 8008524:	89a3      	ldrh	r3, [r4, #12]
 8008526:	431d      	orrs	r5, r3
 8008528:	81a5      	strh	r5, [r4, #12]
 800852a:	e7cf      	b.n	80084cc <__smakebuf_r+0x18>

0800852c <_fstat_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4d07      	ldr	r5, [pc, #28]	; (800854c <_fstat_r+0x20>)
 8008530:	2300      	movs	r3, #0
 8008532:	4604      	mov	r4, r0
 8008534:	4608      	mov	r0, r1
 8008536:	4611      	mov	r1, r2
 8008538:	602b      	str	r3, [r5, #0]
 800853a:	f7f9 faa8 	bl	8001a8e <_fstat>
 800853e:	1c43      	adds	r3, r0, #1
 8008540:	d102      	bne.n	8008548 <_fstat_r+0x1c>
 8008542:	682b      	ldr	r3, [r5, #0]
 8008544:	b103      	cbz	r3, 8008548 <_fstat_r+0x1c>
 8008546:	6023      	str	r3, [r4, #0]
 8008548:	bd38      	pop	{r3, r4, r5, pc}
 800854a:	bf00      	nop
 800854c:	20000510 	.word	0x20000510

08008550 <_isatty_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	4d06      	ldr	r5, [pc, #24]	; (800856c <_isatty_r+0x1c>)
 8008554:	2300      	movs	r3, #0
 8008556:	4604      	mov	r4, r0
 8008558:	4608      	mov	r0, r1
 800855a:	602b      	str	r3, [r5, #0]
 800855c:	f7f9 faa7 	bl	8001aae <_isatty>
 8008560:	1c43      	adds	r3, r0, #1
 8008562:	d102      	bne.n	800856a <_isatty_r+0x1a>
 8008564:	682b      	ldr	r3, [r5, #0]
 8008566:	b103      	cbz	r3, 800856a <_isatty_r+0x1a>
 8008568:	6023      	str	r3, [r4, #0]
 800856a:	bd38      	pop	{r3, r4, r5, pc}
 800856c:	20000510 	.word	0x20000510

08008570 <atan2>:
 8008570:	f000 bab2 	b.w	8008ad8 <__ieee754_atan2>

08008574 <sqrt>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	ed2d 8b02 	vpush	{d8}
 800857a:	ec55 4b10 	vmov	r4, r5, d0
 800857e:	f000 f9d1 	bl	8008924 <__ieee754_sqrt>
 8008582:	4622      	mov	r2, r4
 8008584:	462b      	mov	r3, r5
 8008586:	4620      	mov	r0, r4
 8008588:	4629      	mov	r1, r5
 800858a:	eeb0 8a40 	vmov.f32	s16, s0
 800858e:	eef0 8a60 	vmov.f32	s17, s1
 8008592:	f7f8 facb 	bl	8000b2c <__aeabi_dcmpun>
 8008596:	b990      	cbnz	r0, 80085be <sqrt+0x4a>
 8008598:	2200      	movs	r2, #0
 800859a:	2300      	movs	r3, #0
 800859c:	4620      	mov	r0, r4
 800859e:	4629      	mov	r1, r5
 80085a0:	f7f8 fa9c 	bl	8000adc <__aeabi_dcmplt>
 80085a4:	b158      	cbz	r0, 80085be <sqrt+0x4a>
 80085a6:	f7fd ff3d 	bl	8006424 <__errno>
 80085aa:	2321      	movs	r3, #33	; 0x21
 80085ac:	6003      	str	r3, [r0, #0]
 80085ae:	2200      	movs	r2, #0
 80085b0:	2300      	movs	r3, #0
 80085b2:	4610      	mov	r0, r2
 80085b4:	4619      	mov	r1, r3
 80085b6:	f7f8 f949 	bl	800084c <__aeabi_ddiv>
 80085ba:	ec41 0b18 	vmov	d8, r0, r1
 80085be:	eeb0 0a48 	vmov.f32	s0, s16
 80085c2:	eef0 0a68 	vmov.f32	s1, s17
 80085c6:	ecbd 8b02 	vpop	{d8}
 80085ca:	bd38      	pop	{r3, r4, r5, pc}
 80085cc:	0000      	movs	r0, r0
	...

080085d0 <atan>:
 80085d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d4:	ec55 4b10 	vmov	r4, r5, d0
 80085d8:	4bc3      	ldr	r3, [pc, #780]	; (80088e8 <atan+0x318>)
 80085da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80085de:	429e      	cmp	r6, r3
 80085e0:	46ab      	mov	fp, r5
 80085e2:	dd18      	ble.n	8008616 <atan+0x46>
 80085e4:	4bc1      	ldr	r3, [pc, #772]	; (80088ec <atan+0x31c>)
 80085e6:	429e      	cmp	r6, r3
 80085e8:	dc01      	bgt.n	80085ee <atan+0x1e>
 80085ea:	d109      	bne.n	8008600 <atan+0x30>
 80085ec:	b144      	cbz	r4, 8008600 <atan+0x30>
 80085ee:	4622      	mov	r2, r4
 80085f0:	462b      	mov	r3, r5
 80085f2:	4620      	mov	r0, r4
 80085f4:	4629      	mov	r1, r5
 80085f6:	f7f7 fe49 	bl	800028c <__adddf3>
 80085fa:	4604      	mov	r4, r0
 80085fc:	460d      	mov	r5, r1
 80085fe:	e006      	b.n	800860e <atan+0x3e>
 8008600:	f1bb 0f00 	cmp.w	fp, #0
 8008604:	f300 8131 	bgt.w	800886a <atan+0x29a>
 8008608:	a59b      	add	r5, pc, #620	; (adr r5, 8008878 <atan+0x2a8>)
 800860a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800860e:	ec45 4b10 	vmov	d0, r4, r5
 8008612:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008616:	4bb6      	ldr	r3, [pc, #728]	; (80088f0 <atan+0x320>)
 8008618:	429e      	cmp	r6, r3
 800861a:	dc14      	bgt.n	8008646 <atan+0x76>
 800861c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008620:	429e      	cmp	r6, r3
 8008622:	dc0d      	bgt.n	8008640 <atan+0x70>
 8008624:	a396      	add	r3, pc, #600	; (adr r3, 8008880 <atan+0x2b0>)
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	ee10 0a10 	vmov	r0, s0
 800862e:	4629      	mov	r1, r5
 8008630:	f7f7 fe2c 	bl	800028c <__adddf3>
 8008634:	4baf      	ldr	r3, [pc, #700]	; (80088f4 <atan+0x324>)
 8008636:	2200      	movs	r2, #0
 8008638:	f7f8 fa6e 	bl	8000b18 <__aeabi_dcmpgt>
 800863c:	2800      	cmp	r0, #0
 800863e:	d1e6      	bne.n	800860e <atan+0x3e>
 8008640:	f04f 3aff 	mov.w	sl, #4294967295
 8008644:	e02b      	b.n	800869e <atan+0xce>
 8008646:	f000 f963 	bl	8008910 <fabs>
 800864a:	4bab      	ldr	r3, [pc, #684]	; (80088f8 <atan+0x328>)
 800864c:	429e      	cmp	r6, r3
 800864e:	ec55 4b10 	vmov	r4, r5, d0
 8008652:	f300 80bf 	bgt.w	80087d4 <atan+0x204>
 8008656:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800865a:	429e      	cmp	r6, r3
 800865c:	f300 80a0 	bgt.w	80087a0 <atan+0x1d0>
 8008660:	ee10 2a10 	vmov	r2, s0
 8008664:	ee10 0a10 	vmov	r0, s0
 8008668:	462b      	mov	r3, r5
 800866a:	4629      	mov	r1, r5
 800866c:	f7f7 fe0e 	bl	800028c <__adddf3>
 8008670:	4ba0      	ldr	r3, [pc, #640]	; (80088f4 <atan+0x324>)
 8008672:	2200      	movs	r2, #0
 8008674:	f7f7 fe08 	bl	8000288 <__aeabi_dsub>
 8008678:	2200      	movs	r2, #0
 800867a:	4606      	mov	r6, r0
 800867c:	460f      	mov	r7, r1
 800867e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008682:	4620      	mov	r0, r4
 8008684:	4629      	mov	r1, r5
 8008686:	f7f7 fe01 	bl	800028c <__adddf3>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	4630      	mov	r0, r6
 8008690:	4639      	mov	r1, r7
 8008692:	f7f8 f8db 	bl	800084c <__aeabi_ddiv>
 8008696:	f04f 0a00 	mov.w	sl, #0
 800869a:	4604      	mov	r4, r0
 800869c:	460d      	mov	r5, r1
 800869e:	4622      	mov	r2, r4
 80086a0:	462b      	mov	r3, r5
 80086a2:	4620      	mov	r0, r4
 80086a4:	4629      	mov	r1, r5
 80086a6:	f7f7 ffa7 	bl	80005f8 <__aeabi_dmul>
 80086aa:	4602      	mov	r2, r0
 80086ac:	460b      	mov	r3, r1
 80086ae:	4680      	mov	r8, r0
 80086b0:	4689      	mov	r9, r1
 80086b2:	f7f7 ffa1 	bl	80005f8 <__aeabi_dmul>
 80086b6:	a374      	add	r3, pc, #464	; (adr r3, 8008888 <atan+0x2b8>)
 80086b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086bc:	4606      	mov	r6, r0
 80086be:	460f      	mov	r7, r1
 80086c0:	f7f7 ff9a 	bl	80005f8 <__aeabi_dmul>
 80086c4:	a372      	add	r3, pc, #456	; (adr r3, 8008890 <atan+0x2c0>)
 80086c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ca:	f7f7 fddf 	bl	800028c <__adddf3>
 80086ce:	4632      	mov	r2, r6
 80086d0:	463b      	mov	r3, r7
 80086d2:	f7f7 ff91 	bl	80005f8 <__aeabi_dmul>
 80086d6:	a370      	add	r3, pc, #448	; (adr r3, 8008898 <atan+0x2c8>)
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	f7f7 fdd6 	bl	800028c <__adddf3>
 80086e0:	4632      	mov	r2, r6
 80086e2:	463b      	mov	r3, r7
 80086e4:	f7f7 ff88 	bl	80005f8 <__aeabi_dmul>
 80086e8:	a36d      	add	r3, pc, #436	; (adr r3, 80088a0 <atan+0x2d0>)
 80086ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ee:	f7f7 fdcd 	bl	800028c <__adddf3>
 80086f2:	4632      	mov	r2, r6
 80086f4:	463b      	mov	r3, r7
 80086f6:	f7f7 ff7f 	bl	80005f8 <__aeabi_dmul>
 80086fa:	a36b      	add	r3, pc, #428	; (adr r3, 80088a8 <atan+0x2d8>)
 80086fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008700:	f7f7 fdc4 	bl	800028c <__adddf3>
 8008704:	4632      	mov	r2, r6
 8008706:	463b      	mov	r3, r7
 8008708:	f7f7 ff76 	bl	80005f8 <__aeabi_dmul>
 800870c:	a368      	add	r3, pc, #416	; (adr r3, 80088b0 <atan+0x2e0>)
 800870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008712:	f7f7 fdbb 	bl	800028c <__adddf3>
 8008716:	4642      	mov	r2, r8
 8008718:	464b      	mov	r3, r9
 800871a:	f7f7 ff6d 	bl	80005f8 <__aeabi_dmul>
 800871e:	a366      	add	r3, pc, #408	; (adr r3, 80088b8 <atan+0x2e8>)
 8008720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008724:	4680      	mov	r8, r0
 8008726:	4689      	mov	r9, r1
 8008728:	4630      	mov	r0, r6
 800872a:	4639      	mov	r1, r7
 800872c:	f7f7 ff64 	bl	80005f8 <__aeabi_dmul>
 8008730:	a363      	add	r3, pc, #396	; (adr r3, 80088c0 <atan+0x2f0>)
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	f7f7 fda7 	bl	8000288 <__aeabi_dsub>
 800873a:	4632      	mov	r2, r6
 800873c:	463b      	mov	r3, r7
 800873e:	f7f7 ff5b 	bl	80005f8 <__aeabi_dmul>
 8008742:	a361      	add	r3, pc, #388	; (adr r3, 80088c8 <atan+0x2f8>)
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	f7f7 fd9e 	bl	8000288 <__aeabi_dsub>
 800874c:	4632      	mov	r2, r6
 800874e:	463b      	mov	r3, r7
 8008750:	f7f7 ff52 	bl	80005f8 <__aeabi_dmul>
 8008754:	a35e      	add	r3, pc, #376	; (adr r3, 80088d0 <atan+0x300>)
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	f7f7 fd95 	bl	8000288 <__aeabi_dsub>
 800875e:	4632      	mov	r2, r6
 8008760:	463b      	mov	r3, r7
 8008762:	f7f7 ff49 	bl	80005f8 <__aeabi_dmul>
 8008766:	a35c      	add	r3, pc, #368	; (adr r3, 80088d8 <atan+0x308>)
 8008768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876c:	f7f7 fd8c 	bl	8000288 <__aeabi_dsub>
 8008770:	4632      	mov	r2, r6
 8008772:	463b      	mov	r3, r7
 8008774:	f7f7 ff40 	bl	80005f8 <__aeabi_dmul>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4640      	mov	r0, r8
 800877e:	4649      	mov	r1, r9
 8008780:	f7f7 fd84 	bl	800028c <__adddf3>
 8008784:	4622      	mov	r2, r4
 8008786:	462b      	mov	r3, r5
 8008788:	f7f7 ff36 	bl	80005f8 <__aeabi_dmul>
 800878c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	d14b      	bne.n	800882e <atan+0x25e>
 8008796:	4620      	mov	r0, r4
 8008798:	4629      	mov	r1, r5
 800879a:	f7f7 fd75 	bl	8000288 <__aeabi_dsub>
 800879e:	e72c      	b.n	80085fa <atan+0x2a>
 80087a0:	ee10 0a10 	vmov	r0, s0
 80087a4:	4b53      	ldr	r3, [pc, #332]	; (80088f4 <atan+0x324>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	4629      	mov	r1, r5
 80087aa:	f7f7 fd6d 	bl	8000288 <__aeabi_dsub>
 80087ae:	4b51      	ldr	r3, [pc, #324]	; (80088f4 <atan+0x324>)
 80087b0:	4606      	mov	r6, r0
 80087b2:	460f      	mov	r7, r1
 80087b4:	2200      	movs	r2, #0
 80087b6:	4620      	mov	r0, r4
 80087b8:	4629      	mov	r1, r5
 80087ba:	f7f7 fd67 	bl	800028c <__adddf3>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4630      	mov	r0, r6
 80087c4:	4639      	mov	r1, r7
 80087c6:	f7f8 f841 	bl	800084c <__aeabi_ddiv>
 80087ca:	f04f 0a01 	mov.w	sl, #1
 80087ce:	4604      	mov	r4, r0
 80087d0:	460d      	mov	r5, r1
 80087d2:	e764      	b.n	800869e <atan+0xce>
 80087d4:	4b49      	ldr	r3, [pc, #292]	; (80088fc <atan+0x32c>)
 80087d6:	429e      	cmp	r6, r3
 80087d8:	da1d      	bge.n	8008816 <atan+0x246>
 80087da:	ee10 0a10 	vmov	r0, s0
 80087de:	4b48      	ldr	r3, [pc, #288]	; (8008900 <atan+0x330>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	4629      	mov	r1, r5
 80087e4:	f7f7 fd50 	bl	8000288 <__aeabi_dsub>
 80087e8:	4b45      	ldr	r3, [pc, #276]	; (8008900 <atan+0x330>)
 80087ea:	4606      	mov	r6, r0
 80087ec:	460f      	mov	r7, r1
 80087ee:	2200      	movs	r2, #0
 80087f0:	4620      	mov	r0, r4
 80087f2:	4629      	mov	r1, r5
 80087f4:	f7f7 ff00 	bl	80005f8 <__aeabi_dmul>
 80087f8:	4b3e      	ldr	r3, [pc, #248]	; (80088f4 <atan+0x324>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	f7f7 fd46 	bl	800028c <__adddf3>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	4630      	mov	r0, r6
 8008806:	4639      	mov	r1, r7
 8008808:	f7f8 f820 	bl	800084c <__aeabi_ddiv>
 800880c:	f04f 0a02 	mov.w	sl, #2
 8008810:	4604      	mov	r4, r0
 8008812:	460d      	mov	r5, r1
 8008814:	e743      	b.n	800869e <atan+0xce>
 8008816:	462b      	mov	r3, r5
 8008818:	ee10 2a10 	vmov	r2, s0
 800881c:	4939      	ldr	r1, [pc, #228]	; (8008904 <atan+0x334>)
 800881e:	2000      	movs	r0, #0
 8008820:	f7f8 f814 	bl	800084c <__aeabi_ddiv>
 8008824:	f04f 0a03 	mov.w	sl, #3
 8008828:	4604      	mov	r4, r0
 800882a:	460d      	mov	r5, r1
 800882c:	e737      	b.n	800869e <atan+0xce>
 800882e:	4b36      	ldr	r3, [pc, #216]	; (8008908 <atan+0x338>)
 8008830:	4e36      	ldr	r6, [pc, #216]	; (800890c <atan+0x33c>)
 8008832:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	f7f7 fd25 	bl	8000288 <__aeabi_dsub>
 800883e:	4622      	mov	r2, r4
 8008840:	462b      	mov	r3, r5
 8008842:	f7f7 fd21 	bl	8000288 <__aeabi_dsub>
 8008846:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800884a:	4602      	mov	r2, r0
 800884c:	460b      	mov	r3, r1
 800884e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008852:	f7f7 fd19 	bl	8000288 <__aeabi_dsub>
 8008856:	f1bb 0f00 	cmp.w	fp, #0
 800885a:	4604      	mov	r4, r0
 800885c:	460d      	mov	r5, r1
 800885e:	f6bf aed6 	bge.w	800860e <atan+0x3e>
 8008862:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008866:	461d      	mov	r5, r3
 8008868:	e6d1      	b.n	800860e <atan+0x3e>
 800886a:	a51d      	add	r5, pc, #116	; (adr r5, 80088e0 <atan+0x310>)
 800886c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008870:	e6cd      	b.n	800860e <atan+0x3e>
 8008872:	bf00      	nop
 8008874:	f3af 8000 	nop.w
 8008878:	54442d18 	.word	0x54442d18
 800887c:	bff921fb 	.word	0xbff921fb
 8008880:	8800759c 	.word	0x8800759c
 8008884:	7e37e43c 	.word	0x7e37e43c
 8008888:	e322da11 	.word	0xe322da11
 800888c:	3f90ad3a 	.word	0x3f90ad3a
 8008890:	24760deb 	.word	0x24760deb
 8008894:	3fa97b4b 	.word	0x3fa97b4b
 8008898:	a0d03d51 	.word	0xa0d03d51
 800889c:	3fb10d66 	.word	0x3fb10d66
 80088a0:	c54c206e 	.word	0xc54c206e
 80088a4:	3fb745cd 	.word	0x3fb745cd
 80088a8:	920083ff 	.word	0x920083ff
 80088ac:	3fc24924 	.word	0x3fc24924
 80088b0:	5555550d 	.word	0x5555550d
 80088b4:	3fd55555 	.word	0x3fd55555
 80088b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80088bc:	bfa2b444 	.word	0xbfa2b444
 80088c0:	52defd9a 	.word	0x52defd9a
 80088c4:	3fadde2d 	.word	0x3fadde2d
 80088c8:	af749a6d 	.word	0xaf749a6d
 80088cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80088d0:	fe231671 	.word	0xfe231671
 80088d4:	3fbc71c6 	.word	0x3fbc71c6
 80088d8:	9998ebc4 	.word	0x9998ebc4
 80088dc:	3fc99999 	.word	0x3fc99999
 80088e0:	54442d18 	.word	0x54442d18
 80088e4:	3ff921fb 	.word	0x3ff921fb
 80088e8:	440fffff 	.word	0x440fffff
 80088ec:	7ff00000 	.word	0x7ff00000
 80088f0:	3fdbffff 	.word	0x3fdbffff
 80088f4:	3ff00000 	.word	0x3ff00000
 80088f8:	3ff2ffff 	.word	0x3ff2ffff
 80088fc:	40038000 	.word	0x40038000
 8008900:	3ff80000 	.word	0x3ff80000
 8008904:	bff00000 	.word	0xbff00000
 8008908:	08009070 	.word	0x08009070
 800890c:	08009050 	.word	0x08009050

08008910 <fabs>:
 8008910:	ec51 0b10 	vmov	r0, r1, d0
 8008914:	ee10 2a10 	vmov	r2, s0
 8008918:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800891c:	ec43 2b10 	vmov	d0, r2, r3
 8008920:	4770      	bx	lr
	...

08008924 <__ieee754_sqrt>:
 8008924:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008928:	ec55 4b10 	vmov	r4, r5, d0
 800892c:	4e67      	ldr	r6, [pc, #412]	; (8008acc <__ieee754_sqrt+0x1a8>)
 800892e:	43ae      	bics	r6, r5
 8008930:	ee10 0a10 	vmov	r0, s0
 8008934:	ee10 2a10 	vmov	r2, s0
 8008938:	4629      	mov	r1, r5
 800893a:	462b      	mov	r3, r5
 800893c:	d10d      	bne.n	800895a <__ieee754_sqrt+0x36>
 800893e:	f7f7 fe5b 	bl	80005f8 <__aeabi_dmul>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	4620      	mov	r0, r4
 8008948:	4629      	mov	r1, r5
 800894a:	f7f7 fc9f 	bl	800028c <__adddf3>
 800894e:	4604      	mov	r4, r0
 8008950:	460d      	mov	r5, r1
 8008952:	ec45 4b10 	vmov	d0, r4, r5
 8008956:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800895a:	2d00      	cmp	r5, #0
 800895c:	dc0b      	bgt.n	8008976 <__ieee754_sqrt+0x52>
 800895e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008962:	4326      	orrs	r6, r4
 8008964:	d0f5      	beq.n	8008952 <__ieee754_sqrt+0x2e>
 8008966:	b135      	cbz	r5, 8008976 <__ieee754_sqrt+0x52>
 8008968:	f7f7 fc8e 	bl	8000288 <__aeabi_dsub>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	f7f7 ff6c 	bl	800084c <__aeabi_ddiv>
 8008974:	e7eb      	b.n	800894e <__ieee754_sqrt+0x2a>
 8008976:	1509      	asrs	r1, r1, #20
 8008978:	f000 808d 	beq.w	8008a96 <__ieee754_sqrt+0x172>
 800897c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008980:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008984:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008988:	07c9      	lsls	r1, r1, #31
 800898a:	bf5c      	itt	pl
 800898c:	005b      	lslpl	r3, r3, #1
 800898e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008992:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008996:	bf58      	it	pl
 8008998:	0052      	lslpl	r2, r2, #1
 800899a:	2500      	movs	r5, #0
 800899c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80089a0:	1076      	asrs	r6, r6, #1
 80089a2:	0052      	lsls	r2, r2, #1
 80089a4:	f04f 0e16 	mov.w	lr, #22
 80089a8:	46ac      	mov	ip, r5
 80089aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089ae:	eb0c 0001 	add.w	r0, ip, r1
 80089b2:	4298      	cmp	r0, r3
 80089b4:	bfde      	ittt	le
 80089b6:	1a1b      	suble	r3, r3, r0
 80089b8:	eb00 0c01 	addle.w	ip, r0, r1
 80089bc:	186d      	addle	r5, r5, r1
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	f1be 0e01 	subs.w	lr, lr, #1
 80089c4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80089c8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80089cc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80089d0:	d1ed      	bne.n	80089ae <__ieee754_sqrt+0x8a>
 80089d2:	4674      	mov	r4, lr
 80089d4:	2720      	movs	r7, #32
 80089d6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80089da:	4563      	cmp	r3, ip
 80089dc:	eb01 000e 	add.w	r0, r1, lr
 80089e0:	dc02      	bgt.n	80089e8 <__ieee754_sqrt+0xc4>
 80089e2:	d113      	bne.n	8008a0c <__ieee754_sqrt+0xe8>
 80089e4:	4290      	cmp	r0, r2
 80089e6:	d811      	bhi.n	8008a0c <__ieee754_sqrt+0xe8>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	eb00 0e01 	add.w	lr, r0, r1
 80089ee:	da57      	bge.n	8008aa0 <__ieee754_sqrt+0x17c>
 80089f0:	f1be 0f00 	cmp.w	lr, #0
 80089f4:	db54      	blt.n	8008aa0 <__ieee754_sqrt+0x17c>
 80089f6:	f10c 0801 	add.w	r8, ip, #1
 80089fa:	eba3 030c 	sub.w	r3, r3, ip
 80089fe:	4290      	cmp	r0, r2
 8008a00:	bf88      	it	hi
 8008a02:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008a06:	1a12      	subs	r2, r2, r0
 8008a08:	440c      	add	r4, r1
 8008a0a:	46c4      	mov	ip, r8
 8008a0c:	005b      	lsls	r3, r3, #1
 8008a0e:	3f01      	subs	r7, #1
 8008a10:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008a14:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008a18:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008a1c:	d1dd      	bne.n	80089da <__ieee754_sqrt+0xb6>
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	d01b      	beq.n	8008a5a <__ieee754_sqrt+0x136>
 8008a22:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008ad0 <__ieee754_sqrt+0x1ac>
 8008a26:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008ad4 <__ieee754_sqrt+0x1b0>
 8008a2a:	e9da 0100 	ldrd	r0, r1, [sl]
 8008a2e:	e9db 2300 	ldrd	r2, r3, [fp]
 8008a32:	f7f7 fc29 	bl	8000288 <__aeabi_dsub>
 8008a36:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	4640      	mov	r0, r8
 8008a40:	4649      	mov	r1, r9
 8008a42:	f7f8 f855 	bl	8000af0 <__aeabi_dcmple>
 8008a46:	b140      	cbz	r0, 8008a5a <__ieee754_sqrt+0x136>
 8008a48:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008a4c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008a50:	e9db 2300 	ldrd	r2, r3, [fp]
 8008a54:	d126      	bne.n	8008aa4 <__ieee754_sqrt+0x180>
 8008a56:	3501      	adds	r5, #1
 8008a58:	463c      	mov	r4, r7
 8008a5a:	106a      	asrs	r2, r5, #1
 8008a5c:	0863      	lsrs	r3, r4, #1
 8008a5e:	07e9      	lsls	r1, r5, #31
 8008a60:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008a64:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008a68:	bf48      	it	mi
 8008a6a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008a6e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8008a72:	461c      	mov	r4, r3
 8008a74:	e76d      	b.n	8008952 <__ieee754_sqrt+0x2e>
 8008a76:	0ad3      	lsrs	r3, r2, #11
 8008a78:	3815      	subs	r0, #21
 8008a7a:	0552      	lsls	r2, r2, #21
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d0fa      	beq.n	8008a76 <__ieee754_sqrt+0x152>
 8008a80:	02dc      	lsls	r4, r3, #11
 8008a82:	d50a      	bpl.n	8008a9a <__ieee754_sqrt+0x176>
 8008a84:	f1c1 0420 	rsb	r4, r1, #32
 8008a88:	fa22 f404 	lsr.w	r4, r2, r4
 8008a8c:	1e4d      	subs	r5, r1, #1
 8008a8e:	408a      	lsls	r2, r1
 8008a90:	4323      	orrs	r3, r4
 8008a92:	1b41      	subs	r1, r0, r5
 8008a94:	e772      	b.n	800897c <__ieee754_sqrt+0x58>
 8008a96:	4608      	mov	r0, r1
 8008a98:	e7f0      	b.n	8008a7c <__ieee754_sqrt+0x158>
 8008a9a:	005b      	lsls	r3, r3, #1
 8008a9c:	3101      	adds	r1, #1
 8008a9e:	e7ef      	b.n	8008a80 <__ieee754_sqrt+0x15c>
 8008aa0:	46e0      	mov	r8, ip
 8008aa2:	e7aa      	b.n	80089fa <__ieee754_sqrt+0xd6>
 8008aa4:	f7f7 fbf2 	bl	800028c <__adddf3>
 8008aa8:	e9da 8900 	ldrd	r8, r9, [sl]
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4640      	mov	r0, r8
 8008ab2:	4649      	mov	r1, r9
 8008ab4:	f7f8 f812 	bl	8000adc <__aeabi_dcmplt>
 8008ab8:	b120      	cbz	r0, 8008ac4 <__ieee754_sqrt+0x1a0>
 8008aba:	1ca0      	adds	r0, r4, #2
 8008abc:	bf08      	it	eq
 8008abe:	3501      	addeq	r5, #1
 8008ac0:	3402      	adds	r4, #2
 8008ac2:	e7ca      	b.n	8008a5a <__ieee754_sqrt+0x136>
 8008ac4:	3401      	adds	r4, #1
 8008ac6:	f024 0401 	bic.w	r4, r4, #1
 8008aca:	e7c6      	b.n	8008a5a <__ieee754_sqrt+0x136>
 8008acc:	7ff00000 	.word	0x7ff00000
 8008ad0:	20000268 	.word	0x20000268
 8008ad4:	20000270 	.word	0x20000270

08008ad8 <__ieee754_atan2>:
 8008ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008adc:	ec57 6b11 	vmov	r6, r7, d1
 8008ae0:	4273      	negs	r3, r6
 8008ae2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8008c60 <__ieee754_atan2+0x188>
 8008ae6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008aea:	4333      	orrs	r3, r6
 8008aec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008af0:	4543      	cmp	r3, r8
 8008af2:	ec51 0b10 	vmov	r0, r1, d0
 8008af6:	ee11 5a10 	vmov	r5, s2
 8008afa:	d80a      	bhi.n	8008b12 <__ieee754_atan2+0x3a>
 8008afc:	4244      	negs	r4, r0
 8008afe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b02:	4304      	orrs	r4, r0
 8008b04:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008b08:	4544      	cmp	r4, r8
 8008b0a:	ee10 9a10 	vmov	r9, s0
 8008b0e:	468e      	mov	lr, r1
 8008b10:	d907      	bls.n	8008b22 <__ieee754_atan2+0x4a>
 8008b12:	4632      	mov	r2, r6
 8008b14:	463b      	mov	r3, r7
 8008b16:	f7f7 fbb9 	bl	800028c <__adddf3>
 8008b1a:	ec41 0b10 	vmov	d0, r0, r1
 8008b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b22:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008b26:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008b2a:	4334      	orrs	r4, r6
 8008b2c:	d103      	bne.n	8008b36 <__ieee754_atan2+0x5e>
 8008b2e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b32:	f7ff bd4d 	b.w	80085d0 <atan>
 8008b36:	17bc      	asrs	r4, r7, #30
 8008b38:	f004 0402 	and.w	r4, r4, #2
 8008b3c:	ea53 0909 	orrs.w	r9, r3, r9
 8008b40:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008b44:	d107      	bne.n	8008b56 <__ieee754_atan2+0x7e>
 8008b46:	2c02      	cmp	r4, #2
 8008b48:	d05f      	beq.n	8008c0a <__ieee754_atan2+0x132>
 8008b4a:	2c03      	cmp	r4, #3
 8008b4c:	d1e5      	bne.n	8008b1a <__ieee754_atan2+0x42>
 8008b4e:	a140      	add	r1, pc, #256	; (adr r1, 8008c50 <__ieee754_atan2+0x178>)
 8008b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b54:	e7e1      	b.n	8008b1a <__ieee754_atan2+0x42>
 8008b56:	4315      	orrs	r5, r2
 8008b58:	d106      	bne.n	8008b68 <__ieee754_atan2+0x90>
 8008b5a:	f1be 0f00 	cmp.w	lr, #0
 8008b5e:	da5f      	bge.n	8008c20 <__ieee754_atan2+0x148>
 8008b60:	a13d      	add	r1, pc, #244	; (adr r1, 8008c58 <__ieee754_atan2+0x180>)
 8008b62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b66:	e7d8      	b.n	8008b1a <__ieee754_atan2+0x42>
 8008b68:	4542      	cmp	r2, r8
 8008b6a:	d10f      	bne.n	8008b8c <__ieee754_atan2+0xb4>
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008b72:	d107      	bne.n	8008b84 <__ieee754_atan2+0xac>
 8008b74:	2c02      	cmp	r4, #2
 8008b76:	d84c      	bhi.n	8008c12 <__ieee754_atan2+0x13a>
 8008b78:	4b33      	ldr	r3, [pc, #204]	; (8008c48 <__ieee754_atan2+0x170>)
 8008b7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b82:	e7ca      	b.n	8008b1a <__ieee754_atan2+0x42>
 8008b84:	2c02      	cmp	r4, #2
 8008b86:	d848      	bhi.n	8008c1a <__ieee754_atan2+0x142>
 8008b88:	4b30      	ldr	r3, [pc, #192]	; (8008c4c <__ieee754_atan2+0x174>)
 8008b8a:	e7f6      	b.n	8008b7a <__ieee754_atan2+0xa2>
 8008b8c:	4543      	cmp	r3, r8
 8008b8e:	d0e4      	beq.n	8008b5a <__ieee754_atan2+0x82>
 8008b90:	1a9b      	subs	r3, r3, r2
 8008b92:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008b96:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008b9a:	da1e      	bge.n	8008bda <__ieee754_atan2+0x102>
 8008b9c:	2f00      	cmp	r7, #0
 8008b9e:	da01      	bge.n	8008ba4 <__ieee754_atan2+0xcc>
 8008ba0:	323c      	adds	r2, #60	; 0x3c
 8008ba2:	db1e      	blt.n	8008be2 <__ieee754_atan2+0x10a>
 8008ba4:	4632      	mov	r2, r6
 8008ba6:	463b      	mov	r3, r7
 8008ba8:	f7f7 fe50 	bl	800084c <__aeabi_ddiv>
 8008bac:	ec41 0b10 	vmov	d0, r0, r1
 8008bb0:	f7ff feae 	bl	8008910 <fabs>
 8008bb4:	f7ff fd0c 	bl	80085d0 <atan>
 8008bb8:	ec51 0b10 	vmov	r0, r1, d0
 8008bbc:	2c01      	cmp	r4, #1
 8008bbe:	d013      	beq.n	8008be8 <__ieee754_atan2+0x110>
 8008bc0:	2c02      	cmp	r4, #2
 8008bc2:	d015      	beq.n	8008bf0 <__ieee754_atan2+0x118>
 8008bc4:	2c00      	cmp	r4, #0
 8008bc6:	d0a8      	beq.n	8008b1a <__ieee754_atan2+0x42>
 8008bc8:	a317      	add	r3, pc, #92	; (adr r3, 8008c28 <__ieee754_atan2+0x150>)
 8008bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bce:	f7f7 fb5b 	bl	8000288 <__aeabi_dsub>
 8008bd2:	a317      	add	r3, pc, #92	; (adr r3, 8008c30 <__ieee754_atan2+0x158>)
 8008bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd8:	e014      	b.n	8008c04 <__ieee754_atan2+0x12c>
 8008bda:	a117      	add	r1, pc, #92	; (adr r1, 8008c38 <__ieee754_atan2+0x160>)
 8008bdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008be0:	e7ec      	b.n	8008bbc <__ieee754_atan2+0xe4>
 8008be2:	2000      	movs	r0, #0
 8008be4:	2100      	movs	r1, #0
 8008be6:	e7e9      	b.n	8008bbc <__ieee754_atan2+0xe4>
 8008be8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bec:	4619      	mov	r1, r3
 8008bee:	e794      	b.n	8008b1a <__ieee754_atan2+0x42>
 8008bf0:	a30d      	add	r3, pc, #52	; (adr r3, 8008c28 <__ieee754_atan2+0x150>)
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	f7f7 fb47 	bl	8000288 <__aeabi_dsub>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	a10c      	add	r1, pc, #48	; (adr r1, 8008c30 <__ieee754_atan2+0x158>)
 8008c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c04:	f7f7 fb40 	bl	8000288 <__aeabi_dsub>
 8008c08:	e787      	b.n	8008b1a <__ieee754_atan2+0x42>
 8008c0a:	a109      	add	r1, pc, #36	; (adr r1, 8008c30 <__ieee754_atan2+0x158>)
 8008c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c10:	e783      	b.n	8008b1a <__ieee754_atan2+0x42>
 8008c12:	a10b      	add	r1, pc, #44	; (adr r1, 8008c40 <__ieee754_atan2+0x168>)
 8008c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c18:	e77f      	b.n	8008b1a <__ieee754_atan2+0x42>
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	e77c      	b.n	8008b1a <__ieee754_atan2+0x42>
 8008c20:	a105      	add	r1, pc, #20	; (adr r1, 8008c38 <__ieee754_atan2+0x160>)
 8008c22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c26:	e778      	b.n	8008b1a <__ieee754_atan2+0x42>
 8008c28:	33145c07 	.word	0x33145c07
 8008c2c:	3ca1a626 	.word	0x3ca1a626
 8008c30:	54442d18 	.word	0x54442d18
 8008c34:	400921fb 	.word	0x400921fb
 8008c38:	54442d18 	.word	0x54442d18
 8008c3c:	3ff921fb 	.word	0x3ff921fb
 8008c40:	54442d18 	.word	0x54442d18
 8008c44:	3fe921fb 	.word	0x3fe921fb
 8008c48:	08009090 	.word	0x08009090
 8008c4c:	080090a8 	.word	0x080090a8
 8008c50:	54442d18 	.word	0x54442d18
 8008c54:	c00921fb 	.word	0xc00921fb
 8008c58:	54442d18 	.word	0x54442d18
 8008c5c:	bff921fb 	.word	0xbff921fb
 8008c60:	7ff00000 	.word	0x7ff00000

08008c64 <_init>:
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c66:	bf00      	nop
 8008c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6a:	bc08      	pop	{r3}
 8008c6c:	469e      	mov	lr, r3
 8008c6e:	4770      	bx	lr

08008c70 <_fini>:
 8008c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c72:	bf00      	nop
 8008c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c76:	bc08      	pop	{r3}
 8008c78:	469e      	mov	lr, r3
 8008c7a:	4770      	bx	lr
